
MotorControlBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d4  00800100  00001f28  00001fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  008001d4  008001d4  00002090  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000540  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000499e  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cc9  00000000  00000000  00006fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000276e  00000000  00000000  00008ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e88  00000000  00000000  0000b414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001215  00000000  00000000  0000c29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003706  00000000  00000000  0000d4b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e0  00000000  00000000  00010bb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_7>
      20:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_8>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__vector_15>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_17>
      48:	0c 94 bb 03 	jmp	0x776	; 0x776 <__vector_18>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      80:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__vector_32>
      84:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__vector_33>
      88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e8 e2       	ldi	r30, 0x28	; 40
      a8:	ff e1       	ldi	r31, 0x1F	; 31
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a4 3d       	cpi	r26, 0xD4	; 212
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	22 e0       	ldi	r18, 0x02	; 2
      b8:	a4 ed       	ldi	r26, 0xD4	; 212
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a2 34       	cpi	r26, 0x42	; 66
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 5f 05 	call	0xabe	; 0xabe <main>
      ca:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <init_ADC>:
#include "adc.h"
#include "timers.h"

/*Initialize the ADC and prepare it for reading*/
void init_ADC(){
	ADMUX = (1<<6); //5V VREF
      d2:	80 e4       	ldi	r24, 0x40	; 64
      d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	#if F_CPU < 10000000
	ADCSRA = (1<<ADPS2) | (1<<ADPS0); //Up to 10MHz, prescale by 32
	#else
	ADCSRA = (1<<ADPS2) | (1<<ADPS1); //For faster clocks, prescale by 64
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	86 e0       	ldi	r24, 0x06	; 6
      de:	80 83       	st	Z, r24
	#endif
	ADCSRA |= (1<<ADEN); //Enable the ADC
      e0:	80 81       	ld	r24, Z
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	80 83       	st	Z, r24
      e6:	08 95       	ret

000000e8 <read_ADC>:
  Return value:
  The 10-bit ADC result
*/
uint16_t read_ADC(uint8_t pin){
	uint8_t l,h;
	ADMUX = (ADMUX & 0xC0) | (pin & 7); //Setup ADC, preserve REFS0
      e8:	ec e7       	ldi	r30, 0x7C	; 124
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	90 81       	ld	r25, Z
      ee:	90 7c       	andi	r25, 0xC0	; 192
      f0:	87 70       	andi	r24, 0x07	; 7
      f2:	89 2b       	or	r24, r25
      f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start the conversion
      f6:	ea e7       	ldi	r30, 0x7A	; 122
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //Wait for conversion
     100:	80 81       	ld	r24, Z
     102:	86 fd       	sbrc	r24, 6
     104:	fd cf       	rjmp	.-6      	; 0x100 <read_ADC+0x18>
	l = ADCL;  //Read and return 10 bit result
     106:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	h = ADCH;
     10a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return (h << 8)|l; 
     10e:	90 e0       	ldi	r25, 0x00	; 0
}
     110:	92 2b       	or	r25, r18
     112:	08 95       	ret

00000114 <internalAREF>:

/*Switches to the internal (2.56V) Vref*/
void internalAREF(){
	if((ADMUX & 0xC0) != 0xC0){
     114:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     118:	80 7c       	andi	r24, 0xC0	; 192
     11a:	80 3c       	cpi	r24, 0xC0	; 192
     11c:	61 f0       	breq	.+24     	; 0x136 <internalAREF+0x22>
		ADMUX |= 0xC0;
     11e:	ec e7       	ldi	r30, 0x7C	; 124
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	80 6c       	ori	r24, 0xC0	; 192
     126:	80 83       	st	Z, r24
		delay_mS(5);
     128:	85 e0       	ldi	r24, 0x05	; 5
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_mS>
		read_ADC(0); //As per the datasheet, discard the first reading after changing AREF
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 74 00 	call	0xe8	; 0xe8 <read_ADC>
     136:	08 95       	ret

00000138 <detect_board>:
/*Tries to detect the board revision
Return:
1 if it is likely a revision 1 board or 2 if it is a rev. 2 board
*/
uint8_t detect_board(){
	internalAREF();
     138:	0e 94 8a 00 	call	0x114	; 0x114 <internalAREF>
	uint16_t a = read_ADC(0);
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 74 00 	call	0xe8	; 0xe8 <read_ADC>
	if(a > 384 && a < 640){
     142:	81 58       	subi	r24, 0x81	; 129
     144:	91 40       	sbci	r25, 0x01	; 1
     146:	8f 3f       	cpi	r24, 0xFF	; 255
     148:	91 05       	cpc	r25, r1
     14a:	10 f0       	brcs	.+4      	; 0x150 <detect_board+0x18>
		return 2;
	}
	return 1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	08 95       	ret
*/
uint8_t detect_board(){
	internalAREF();
	uint16_t a = read_ADC(0);
	if(a > 384 && a < 640){
		return 2;
     150:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 1;
}
     152:	08 95       	ret

00000154 <do_board_specific_setup>:

/*Does setup specific to the board
  Parameters:
  the CAN address of the board
*/
void do_board_specific_setup(uint8_t addr){
     154:	cf 93       	push	r28
     156:	c8 2f       	mov	r28, r24
		set_LED(3, 3);
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
		set_Kp(120, 0);
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	88 e7       	ldi	r24, 0x78	; 120
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 f4 06 	call	0xde8	; 0xde8 <set_Kp>
		set_Ki(20, 0);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	84 e1       	ldi	r24, 0x14	; 20
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <set_Ki>
		set_Kd(170, 0);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	8a ea       	ldi	r24, 0xAA	; 170
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 02 07 	call	0xe04	; 0xe04 <set_Kd>
		switch(addr){
     184:	c2 30       	cpi	r28, 0x02	; 2
     186:	71 f0       	breq	.+28     	; 0x1a4 <do_board_specific_setup+0x50>
     188:	18 f4       	brcc	.+6      	; 0x190 <do_board_specific_setup+0x3c>
     18a:	cc 23       	and	r28, r28
     18c:	31 f0       	breq	.+12     	; 0x19a <do_board_specific_setup+0x46>
     18e:	1d c0       	rjmp	.+58     	; 0x1ca <do_board_specific_setup+0x76>
     190:	c3 30       	cpi	r28, 0x03	; 3
     192:	81 f0       	breq	.+32     	; 0x1b4 <do_board_specific_setup+0x60>
     194:	c6 30       	cpi	r28, 0x06	; 6
     196:	99 f0       	breq	.+38     	; 0x1be <do_board_specific_setup+0x6a>
     198:	18 c0       	rjmp	.+48     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x0: //Base rotation:
				set_ticks_per_10degrees(172);
     19a:	8c ea       	ldi	r24, 0xAC	; 172
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <set_ticks_per_10degrees>
				break;
     1a2:	13 c0       	rjmp	.+38     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x2: //Elbow
				set_motor_reverse(1);
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <set_motor_reverse>
				set_ticks_per_10degrees(85);
     1aa:	85 e5       	ldi	r24, 0x55	; 85
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <set_ticks_per_10degrees>
				break;
     1b2:	0b c0       	rjmp	.+22     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x3: //Forearm rotation
				set_ticks_per_10degrees(68);
     1b4:	84 e4       	ldi	r24, 0x44	; 68
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <set_ticks_per_10degrees>
				break;
     1bc:	06 c0       	rjmp	.+12     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x6: //Hand
				init_servo();
     1be:	0e 94 44 0b 	call	0x1688	; 0x1688 <init_servo>
				set_servo_position(0);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <set_servo_position>
				break;
		}
		#ifdef REV_2
		tprintf("REV. 2 firmware\n");
     1ca:	86 e0       	ldi	r24, 0x06	; 6
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	9f 93       	push	r25
     1d0:	8f 93       	push	r24
     1d2:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tprintf>
		#endif
		uint8_t rev = detect_board();
     1d6:	0e 94 9c 00 	call	0x138	; 0x138 <detect_board>
     1da:	c8 2f       	mov	r28, r24
		tprintf("Detecting board rev: %d\n", rev);
     1dc:	1f 92       	push	r1
     1de:	8f 93       	push	r24
     1e0:	87 e1       	ldi	r24, 0x17	; 23
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	9f 93       	push	r25
     1e6:	8f 93       	push	r24
     1e8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tprintf>
		#ifdef REV_2
		if(rev != 2){
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	c2 30       	cpi	r28, 0x02	; 2
     1fa:	81 f0       	breq	.+32     	; 0x21c <do_board_specific_setup+0xc8>
			tprintf("***WARNING*** Rev. 2 firmware on Rev. 1 board\n");
     1fc:	80 e3       	ldi	r24, 0x30	; 48
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	9f 93       	push	r25
     202:	8f 93       	push	r24
     204:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tprintf>
			set_LED(0, 3);
     208:	63 e0       	ldi	r22, 0x03	; 3
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
			delay_mS(1000);
     210:	88 ee       	ldi	r24, 0xE8	; 232
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_mS>
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
			tprintf("***WARNING*** Rev. 1 firmware on Rev. 2 board\n")
			set_LED(0, 3);
			delay_mS(1000);
		}
		#endif
}
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <__vector_17>:

#ifdef DEBOUNCE
volatile uint16_t lastA, lastB;
#endif

ISR(TIMER0_OVF_vect){
     220:	1f 92       	push	r1
     222:	0f 92       	push	r0
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	0f 92       	push	r0
     228:	11 24       	eor	r1, r1
     22a:	8f 93       	push	r24
     22c:	9f 93       	push	r25
	gate_control++;
     22e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <gate_control>
     232:	8f 5f       	subi	r24, 0xFF	; 255
     234:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <gate_control>
	if(gate_control == gate_control_top){
     238:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <gate_control>
     23c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <gate_control_top>
     240:	98 13       	cpse	r25, r24
     242:	0e c0       	rjmp	.+28     	; 0x260 <__vector_17+0x40>
		raw_velocity = vticks;
     244:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     248:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     24c:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <raw_velocity+0x1>
     250:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <raw_velocity>
		vticks = gate_control = 0;
     254:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <gate_control>
     258:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <vticks+0x1>
     25c:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <vticks>
	}
}
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <get_encoder_ticks>:

/*Returns the total number of encoder ticks since the last reset*/
int32_t get_encoder_ticks(){
	//return -19;
	//return 0;
	return encoder_ticks;
     26e:	60 91 e1 01 	lds	r22, 0x01E1	; 0x8001e1 <encoder_ticks>
     272:	70 91 e2 01 	lds	r23, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     276:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     27a:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
	//return 255;
}
     27e:	08 95       	ret

00000280 <set_encoder_ticks>:

/*Sets the encoder counter to the specified value*/
void set_encoder_ticks(int32_t ticks){
	encoder_ticks = ticks;
     280:	60 93 e1 01 	sts	0x01E1, r22	; 0x8001e1 <encoder_ticks>
     284:	70 93 e2 01 	sts	0x01E2, r23	; 0x8001e2 <encoder_ticks+0x1>
     288:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <encoder_ticks+0x2>
     28c:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <encoder_ticks+0x3>
     290:	08 95       	ret

00000292 <init_encoder>:
}

/*Initializes the encoder with A on PE6 and B on PE7*/
void init_encoder(){
	EIMSK &= 0x3F; //Disable pin change interrupts
     292:	8d b3       	in	r24, 0x1d	; 29
     294:	8f 73       	andi	r24, 0x3F	; 63
     296:	8d bb       	out	0x1d, r24	; 29
	DDRE &= 0x3F; //Set PE6, PE7 as inputs
     298:	8d b1       	in	r24, 0x0d	; 13
     29a:	8f 73       	andi	r24, 0x3F	; 63
     29c:	8d b9       	out	0x0d, r24	; 13
	PORTE |= 0xC0; //Enable pullups on PE6, PE7
     29e:	8e b1       	in	r24, 0x0e	; 14
     2a0:	80 6c       	ori	r24, 0xC0	; 192
     2a2:	8e b9       	out	0x0e, r24	; 14
	encoder_ticks = 0; //Reset count
     2a4:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <encoder_ticks>
     2a8:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <encoder_ticks+0x1>
     2ac:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <encoder_ticks+0x2>
     2b0:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <encoder_ticks+0x3>
	gate_control_top = 24; //Short gate time
     2b4:	88 e1       	ldi	r24, 0x18	; 24
     2b6:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <gate_control_top>
	EICRB |= 0x50; //Enable pin change interrupt on PE6, PE7
     2ba:	ea e6       	ldi	r30, 0x6A	; 106
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	80 65       	ori	r24, 0x50	; 80
     2c2:	80 83       	st	Z, r24
	EICRA = 0;
     2c4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK |= 0xC0;
     2c8:	8d b3       	in	r24, 0x1d	; 29
     2ca:	80 6c       	ori	r24, 0xC0	; 192
     2cc:	8d bb       	out	0x1d, r24	; 29
     2ce:	08 95       	ret

000002d0 <reset_encoder>:
}

/*Resets the encoder count*/
void reset_encoder(){
	EIMSK &= 0x3F; //Disable pin change interrupts
     2d0:	8d b3       	in	r24, 0x1d	; 29
     2d2:	8f 73       	andi	r24, 0x3F	; 63
     2d4:	8d bb       	out	0x1d, r24	; 29
	encoder_ticks = 0; //Reset count
     2d6:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <encoder_ticks>
     2da:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <encoder_ticks+0x1>
     2de:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <encoder_ticks+0x2>
     2e2:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <encoder_ticks+0x3>
	vticks = 0;
     2e6:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <vticks+0x1>
     2ea:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <vticks>
	raw_velocity = 0;
     2ee:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <raw_velocity+0x1>
     2f2:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <raw_velocity>
	gate_control = 0;
     2f6:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <gate_control>
	EIMSK |= 0xC0; //Enable pin change interrupt on PE6, PE7
     2fa:	8d b3       	in	r24, 0x1d	; 29
     2fc:	80 6c       	ori	r24, 0xC0	; 192
     2fe:	8d bb       	out	0x1d, r24	; 29
     300:	08 95       	ret

00000302 <get_encoder_velocity>:
}

/*Returns the encoder velocity in ticks/second*/
int16_t get_encoder_velocity(){
	int16_t rv = raw_velocity;
     302:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <raw_velocity>
     306:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <raw_velocity+0x1>
	int16_t velocity;
	if(gate_control_top == 24){
     30a:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <gate_control_top>
     30e:	28 31       	cpi	r18, 0x18	; 24
     310:	59 f5       	brne	.+86     	; 0x368 <get_encoder_velocity+0x66>
		if(rv < 5 && rv > -5){ //If it's slow, increase the gate time
     312:	9c 01       	movw	r18, r24
     314:	2c 5f       	subi	r18, 0xFC	; 252
     316:	3f 4f       	sbci	r19, 0xFF	; 255
     318:	29 30       	cpi	r18, 0x09	; 9
     31a:	31 05       	cpc	r19, r1
     31c:	18 f4       	brcc	.+6      	; 0x324 <get_encoder_velocity+0x22>
			gate_control_top = 122;
     31e:	2a e7       	ldi	r18, 0x7A	; 122
     320:	20 93 db 01 	sts	0x01DB, r18	; 0x8001db <gate_control_top>
			//tprintf("GCT=122\n");
		}
		velocity = (rv * 60)/4 + old_velocity/4; //Compute velocity and low pass filter
     324:	4c e3       	ldi	r20, 0x3C	; 60
     326:	48 9f       	mul	r20, r24
     328:	90 01       	movw	r18, r0
     32a:	49 9f       	mul	r20, r25
     32c:	30 0d       	add	r19, r0
     32e:	11 24       	eor	r1, r1
     330:	33 23       	and	r19, r19
     332:	14 f4       	brge	.+4      	; 0x338 <get_encoder_velocity+0x36>
     334:	2d 5f       	subi	r18, 0xFD	; 253
     336:	3f 4f       	sbci	r19, 0xFF	; 255
     338:	35 95       	asr	r19
     33a:	27 95       	ror	r18
     33c:	35 95       	asr	r19
     33e:	27 95       	ror	r18
     340:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <old_velocity>
     344:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <old_velocity+0x1>
     348:	99 23       	and	r25, r25
     34a:	0c f4       	brge	.+2      	; 0x34e <get_encoder_velocity+0x4c>
     34c:	03 96       	adiw	r24, 0x03	; 3
     34e:	95 95       	asr	r25
     350:	87 95       	ror	r24
     352:	95 95       	asr	r25
     354:	87 95       	ror	r24
     356:	28 0f       	add	r18, r24
     358:	39 1f       	adc	r19, r25
		old_velocity = velocity;
     35a:	30 93 da 01 	sts	0x01DA, r19	; 0x8001da <old_velocity+0x1>
     35e:	20 93 d9 01 	sts	0x01D9, r18	; 0x8001d9 <old_velocity>
		return velocity;
     362:	82 2f       	mov	r24, r18
     364:	93 2f       	mov	r25, r19
     366:	08 95       	ret
	} else if(gate_control_top == 122){ //If it's fast, decrease gate time
     368:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <gate_control_top>
     36c:	2a 37       	cpi	r18, 0x7A	; 122
     36e:	79 f5       	brne	.+94     	; 0x3ce <get_encoder_velocity+0xcc>
		if(rv > 80 || rv < -80){
     370:	9c 01       	movw	r18, r24
     372:	20 5b       	subi	r18, 0xB0	; 176
     374:	3f 4f       	sbci	r19, 0xFF	; 255
     376:	21 3a       	cpi	r18, 0xA1	; 161
     378:	31 05       	cpc	r19, r1
     37a:	18 f0       	brcs	.+6      	; 0x382 <get_encoder_velocity+0x80>
			gate_control_top = 24;
     37c:	28 e1       	ldi	r18, 0x18	; 24
     37e:	20 93 db 01 	sts	0x01DB, r18	; 0x8001db <gate_control_top>
			//tprintf("GCT=24\n");
		}
		velocity = (rv * 12)/4 + old_velocity/4; //Compute velocity and LPF
     382:	9c 01       	movw	r18, r24
     384:	22 0f       	add	r18, r18
     386:	33 1f       	adc	r19, r19
     388:	82 0f       	add	r24, r18
     38a:	93 1f       	adc	r25, r19
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	9c 01       	movw	r18, r24
     396:	99 23       	and	r25, r25
     398:	14 f4       	brge	.+4      	; 0x39e <get_encoder_velocity+0x9c>
     39a:	2d 5f       	subi	r18, 0xFD	; 253
     39c:	3f 4f       	sbci	r19, 0xFF	; 255
     39e:	35 95       	asr	r19
     3a0:	27 95       	ror	r18
     3a2:	35 95       	asr	r19
     3a4:	27 95       	ror	r18
     3a6:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <old_velocity>
     3aa:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <old_velocity+0x1>
     3ae:	99 23       	and	r25, r25
     3b0:	0c f4       	brge	.+2      	; 0x3b4 <get_encoder_velocity+0xb2>
     3b2:	03 96       	adiw	r24, 0x03	; 3
     3b4:	95 95       	asr	r25
     3b6:	87 95       	ror	r24
     3b8:	95 95       	asr	r25
     3ba:	87 95       	ror	r24
     3bc:	28 0f       	add	r18, r24
     3be:	39 1f       	adc	r19, r25
		old_velocity = velocity;
     3c0:	30 93 da 01 	sts	0x01DA, r19	; 0x8001da <old_velocity+0x1>
     3c4:	20 93 d9 01 	sts	0x01D9, r18	; 0x8001d9 <old_velocity>
		return velocity;
     3c8:	82 2f       	mov	r24, r18
     3ca:	93 2f       	mov	r25, r19
     3cc:	08 95       	ret
	}
	return -1;
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	9f ef       	ldi	r25, 0xFF	; 255
}
     3d2:	08 95       	ret

000003d4 <__vector_7>:

ISR(INT6_vect){ //PE6, A
     3d4:	1f 92       	push	r1
     3d6:	0f 92       	push	r0
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	0f 92       	push	r0
     3dc:	11 24       	eor	r1, r1
     3de:	8f 93       	push	r24
     3e0:	9f 93       	push	r25
     3e2:	af 93       	push	r26
     3e4:	bf 93       	push	r27
	#ifdef DEBOUNCE
	uint16_t tc = TCNT1;
	if(tc > lastA && tc - lastA < 400) return;
	lastA = tc;
	#endif
	uint8_t state = PINE;
     3e6:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE6)){ //A rising
     3e8:	86 ff       	sbrs	r24, 6
     3ea:	3c c0       	rjmp	.+120    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
		if(state & (1<<PE7)){ //B high
     3ec:	88 23       	and	r24, r24
     3ee:	ec f4       	brge	.+58     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			encoder_ticks++;
     3f0:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     3f4:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     3f8:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     3fc:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	a1 1d       	adc	r26, r1
     404:	b1 1d       	adc	r27, r1
     406:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     40a:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     40e:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     412:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks++;
     416:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     41a:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     424:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     428:	58 c0       	rjmp	.+176    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
		} else { //B low
			encoder_ticks--;
     42a:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     42e:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     432:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     436:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     43a:	01 97       	sbiw	r24, 0x01	; 1
     43c:	a1 09       	sbc	r26, r1
     43e:	b1 09       	sbc	r27, r1
     440:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     444:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     448:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     44c:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks--;
     450:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     454:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     45e:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     462:	3b c0       	rjmp	.+118    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
		}
	} else { //A falling
		if(state & (1<<PE7)){ //B high
     464:	88 23       	and	r24, r24
     466:	ec f4       	brge	.+58     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			encoder_ticks--;
     468:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     46c:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     470:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     474:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	a1 09       	sbc	r26, r1
     47c:	b1 09       	sbc	r27, r1
     47e:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     482:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     486:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     48a:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks--;
     48e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     492:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     49c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     4a0:	1c c0       	rjmp	.+56     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
		} else { //B low
			encoder_ticks++;
     4a2:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     4a6:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     4aa:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     4ae:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	a1 1d       	adc	r26, r1
     4b6:	b1 1d       	adc	r27, r1
     4b8:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     4bc:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     4c0:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     4c4:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks++;
     4c8:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     4cc:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     4d6:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
		}
	}
}
     4da:	bf 91       	pop	r27
     4dc:	af 91       	pop	r26
     4de:	9f 91       	pop	r25
     4e0:	8f 91       	pop	r24
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <__vector_8>:

ISR(INT7_vect){ //PE7, B
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	8f 93       	push	r24
     4f8:	9f 93       	push	r25
     4fa:	af 93       	push	r26
     4fc:	bf 93       	push	r27
	#ifdef DEBOUNCE
	uint16_t tc = TCNT1;
	if(tc > lastB && tc - lastB < 400) return;
	lastB = tc;
	#endif
	uint8_t state = PINE;
     4fe:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE7)){ //B rising
     500:	88 23       	and	r24, r24
     502:	e4 f5       	brge	.+120    	; 0x57c <__vector_8+0x90>
		if(state & (1<<PE6)){ //A high
     504:	86 ff       	sbrs	r24, 6
     506:	1d c0       	rjmp	.+58     	; 0x542 <__vector_8+0x56>
			encoder_ticks--;
     508:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     50c:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     510:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     514:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     518:	01 97       	sbiw	r24, 0x01	; 1
     51a:	a1 09       	sbc	r26, r1
     51c:	b1 09       	sbc	r27, r1
     51e:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     522:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     526:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     52a:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks--;
     52e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     532:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     53c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     540:	58 c0       	rjmp	.+176    	; 0x5f2 <__vector_8+0x106>
		} else { //A low
			encoder_ticks++;
     542:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     546:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     54a:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     54e:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	a1 1d       	adc	r26, r1
     556:	b1 1d       	adc	r27, r1
     558:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     55c:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     560:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     564:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks++;
     568:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     56c:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     576:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     57a:	3b c0       	rjmp	.+118    	; 0x5f2 <__vector_8+0x106>
		}
	} else { //B falling
		if(state & (1<<PE6)){ //A high
     57c:	86 ff       	sbrs	r24, 6
     57e:	1d c0       	rjmp	.+58     	; 0x5ba <__vector_8+0xce>
			encoder_ticks++;
     580:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     584:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     588:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     58c:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	a1 1d       	adc	r26, r1
     594:	b1 1d       	adc	r27, r1
     596:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     59a:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     59e:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     5a2:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks++;
     5a6:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     5aa:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     5ae:	01 96       	adiw	r24, 0x01	; 1
     5b0:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     5b4:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     5b8:	1c c0       	rjmp	.+56     	; 0x5f2 <__vector_8+0x106>
		} else { //A low
			encoder_ticks--;
     5ba:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     5be:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     5c2:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     5c6:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	a1 09       	sbc	r26, r1
     5ce:	b1 09       	sbc	r27, r1
     5d0:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     5d4:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     5d8:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     5dc:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks--;
     5e0:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     5e4:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     5ee:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
		}
	}
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	0f 90       	pop	r0
     600:	1f 90       	pop	r1
     602:	18 95       	reti

00000604 <GetModeFromPacket>:
{
    packetToAssemble->id = ConstructCANID(PRIO_MOTOR_UNIT_ENC_PPJR_SET, targetDeviceGroup, targetDeviceSerial);
    packetToAssemble->dlc = DLC_MOTOR_UNIT_ENC_PPJR_SET;
    int nextByte = WritePacketIDOnly(packetToAssemble->data, ID_MOTOR_UNIT_ENC_PPJR_SET);
    PackIntIntoDataMSBFirst(packetToAssemble->data, pulses, nextByte);
}
     604:	fc 01       	movw	r30, r24
     606:	84 81       	ldd	r24, Z+4	; 0x04
     608:	08 95       	ret

0000060a <GetPWMFromPacket>:
     60a:	42 e0       	ldi	r20, 0x02	; 2
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	03 96       	adiw	r24, 0x03	; 3
     614:	0e 94 22 03 	call	0x644	; 0x644 <DecodeBytesToIntMSBFirst>
     618:	08 95       	ret

0000061a <GetPIDTargetFromPacket>:
     61a:	45 e0       	ldi	r20, 0x05	; 5
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	03 96       	adiw	r24, 0x03	; 3
     624:	0e 94 22 03 	call	0x644	; 0x644 <DecodeBytesToIntMSBFirst>
     628:	86 2f       	mov	r24, r22
     62a:	08 95       	ret

0000062c <GetEncoderPPJRFromPacket>:

uint32_t GetEncoderPPJRFromPacket(CANPacket *packet)
{
    return DecodeBytesToIntMSBFirst(packet->data, 1, 4);
     62c:	44 e0       	ldi	r20, 0x04	; 4
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	03 96       	adiw	r24, 0x03	; 3
     636:	0e 94 22 03 	call	0x644	; 0x644 <DecodeBytesToIntMSBFirst>
}
     63a:	08 95       	ret

0000063c <GetPacketID>:
}

void PackShortIntoDataMSBFirst(uint8_t *data, int16_t dataToPack, int startIndex)
{
	data[startIndex + 0] = (dataToPack & 0xFF00) >> 8;
	data[startIndex + 1] = (dataToPack & 0x00FF);
     63c:	fc 01       	movw	r30, r24
     63e:	83 81       	ldd	r24, Z+3	; 0x03
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	08 95       	ret

00000644 <DecodeBytesToIntMSBFirst>:
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
     644:	cf 92       	push	r12
     646:	df 92       	push	r13
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
    int length = 4;
    int32_t decodedData = 0; 

    if (endIndex > 0 && startIndex >= 0) {
     650:	14 16       	cp	r1, r20
     652:	15 06       	cpc	r1, r21
     654:	9c f4       	brge	.+38     	; 0x67c <DecodeBytesToIntMSBFirst+0x38>
     656:	77 23       	and	r23, r23
     658:	a4 f0       	brlt	.+40     	; 0x682 <DecodeBytesToIntMSBFirst+0x3e>
        length = endIndex - startIndex + 1;
     65a:	ea 01       	movw	r28, r20
     65c:	c6 1b       	sub	r28, r22
     65e:	d7 0b       	sbc	r29, r23
     660:	21 96       	adiw	r28, 0x01	; 1
     662:	c5 30       	cpi	r28, 0x05	; 5
     664:	d1 05       	cpc	r29, r1
     666:	14 f0       	brlt	.+4      	; 0x66c <DecodeBytesToIntMSBFirst+0x28>
     668:	c4 e0       	ldi	r28, 0x04	; 4
     66a:	d0 e0       	ldi	r29, 0x00	; 0
     66c:	dd 23       	and	r29, r29
     66e:	14 f4       	brge	.+4      	; 0x674 <DecodeBytesToIntMSBFirst+0x30>
     670:	c0 e0       	ldi	r28, 0x00	; 0
     672:	d0 e0       	ldi	r29, 0x00	; 0
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     674:	1c 16       	cp	r1, r28
     676:	1d 06       	cpc	r1, r29
     678:	34 f0       	brlt	.+12     	; 0x686 <DecodeBytesToIntMSBFirst+0x42>
     67a:	2d c0       	rjmp	.+90     	; 0x6d6 <DecodeBytesToIntMSBFirst+0x92>
     67c:	c4 e0       	ldi	r28, 0x04	; 4
     67e:	d0 e0       	ldi	r29, 0x00	; 0
     680:	02 c0       	rjmp	.+4      	; 0x686 <DecodeBytesToIntMSBFirst+0x42>
     682:	c4 e0       	ldi	r28, 0x04	; 4
     684:	d0 e0       	ldi	r29, 0x00	; 0
     686:	dc 01       	movw	r26, r24
     688:	a6 0f       	add	r26, r22
     68a:	b7 1f       	adc	r27, r23
     68c:	9e 01       	movw	r18, r28
     68e:	21 50       	subi	r18, 0x01	; 1
     690:	31 09       	sbc	r19, r1
     692:	22 0f       	add	r18, r18
     694:	33 1f       	adc	r19, r19
     696:	22 0f       	add	r18, r18
     698:	33 1f       	adc	r19, r19
     69a:	22 0f       	add	r18, r18
     69c:	33 1f       	adc	r19, r19
     69e:	e0 e0       	ldi	r30, 0x00	; 0
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	c1 2c       	mov	r12, r1
     6a4:	d1 2c       	mov	r13, r1
     6a6:	76 01       	movw	r14, r12
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
     6a8:	4d 91       	ld	r20, X+
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	02 2e       	mov	r0, r18
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DecodeBytesToIntMSBFirst+0x70>
     6b0:	44 0f       	add	r20, r20
     6b2:	55 1f       	adc	r21, r21
     6b4:	0a 94       	dec	r0
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DecodeBytesToIntMSBFirst+0x6c>
     6b8:	05 2e       	mov	r0, r21
     6ba:	00 0c       	add	r0, r0
     6bc:	66 0b       	sbc	r22, r22
     6be:	77 0b       	sbc	r23, r23
     6c0:	c4 2a       	or	r12, r20
     6c2:	d5 2a       	or	r13, r21
     6c4:	e6 2a       	or	r14, r22
     6c6:	f7 2a       	or	r15, r23
        length = endIndex - startIndex + 1;
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     6c8:	31 96       	adiw	r30, 0x01	; 1
     6ca:	28 50       	subi	r18, 0x08	; 8
     6cc:	31 09       	sbc	r19, r1
     6ce:	ec 17       	cp	r30, r28
     6d0:	fd 07       	cpc	r31, r29
     6d2:	54 f3       	brlt	.-44     	; 0x6a8 <DecodeBytesToIntMSBFirst+0x64>
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <DecodeBytesToIntMSBFirst+0x98>
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
    int length = 4;
    int32_t decodedData = 0; 
     6d6:	c1 2c       	mov	r12, r1
     6d8:	d1 2c       	mov	r13, r1
     6da:	76 01       	movw	r14, r12
    for (int i = 0; i < length; i++) 
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
    }
    return decodedData;
}
     6dc:	c7 01       	movw	r24, r14
     6de:	b6 01       	movw	r22, r12
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	08 95       	ret

000006ee <disable_mob_interrupt>:
	CANIDT2 = ((packetToSend->id & 7) << 5);
	CANIDT1 = ((packetToSend->id & 0x7F8) >> 3);
	CANCDMOB |= (1<<CONMOB0);
	enable_mob_interrupt(mob); //Enable MOb interrupt
	return 0;
}
     6ee:	88 30       	cpi	r24, 0x08	; 8
     6f0:	80 f4       	brcc	.+32     	; 0x712 <disable_mob_interrupt+0x24>
     6f2:	ee ed       	ldi	r30, 0xDE	; 222
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	40 81       	ld	r20, Z
     6f8:	21 e0       	ldi	r18, 0x01	; 1
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	b9 01       	movw	r22, r18
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <disable_mob_interrupt+0x16>
     700:	66 0f       	add	r22, r22
     702:	77 1f       	adc	r23, r23
     704:	8a 95       	dec	r24
     706:	e2 f7       	brpl	.-8      	; 0x700 <disable_mob_interrupt+0x12>
     708:	cb 01       	movw	r24, r22
     70a:	80 95       	com	r24
     70c:	84 23       	and	r24, r20
     70e:	80 83       	st	Z, r24
     710:	08 95       	ret
     712:	ef ed       	ldi	r30, 0xDF	; 223
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	40 81       	ld	r20, Z
     718:	88 50       	subi	r24, 0x08	; 8
     71a:	21 e0       	ldi	r18, 0x01	; 1
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	b9 01       	movw	r22, r18
     720:	02 c0       	rjmp	.+4      	; 0x726 <disable_mob_interrupt+0x38>
     722:	66 0f       	add	r22, r22
     724:	77 1f       	adc	r23, r23
     726:	8a 95       	dec	r24
     728:	e2 f7       	brpl	.-8      	; 0x722 <disable_mob_interrupt+0x34>
     72a:	cb 01       	movw	r24, r22
     72c:	80 95       	com	r24
     72e:	84 23       	and	r24, r20
     730:	80 83       	st	Z, r24
     732:	08 95       	ret

00000734 <enable_mob_interrupt>:
     734:	88 30       	cpi	r24, 0x08	; 8
     736:	78 f4       	brcc	.+30     	; 0x756 <enable_mob_interrupt+0x22>
     738:	ee ed       	ldi	r30, 0xDE	; 222
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	40 81       	ld	r20, Z
     73e:	21 e0       	ldi	r18, 0x01	; 1
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	b9 01       	movw	r22, r18
     744:	02 c0       	rjmp	.+4      	; 0x74a <enable_mob_interrupt+0x16>
     746:	66 0f       	add	r22, r22
     748:	77 1f       	adc	r23, r23
     74a:	8a 95       	dec	r24
     74c:	e2 f7       	brpl	.-8      	; 0x746 <enable_mob_interrupt+0x12>
     74e:	cb 01       	movw	r24, r22
     750:	84 2b       	or	r24, r20
     752:	80 83       	st	Z, r24
     754:	08 95       	ret
     756:	ef ed       	ldi	r30, 0xDF	; 223
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	40 81       	ld	r20, Z
     75c:	88 50       	subi	r24, 0x08	; 8
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	b9 01       	movw	r22, r18
     764:	02 c0       	rjmp	.+4      	; 0x76a <enable_mob_interrupt+0x36>
     766:	66 0f       	add	r22, r22
     768:	77 1f       	adc	r23, r23
     76a:	8a 95       	dec	r24
     76c:	e2 f7       	brpl	.-8      	; 0x766 <enable_mob_interrupt+0x32>
     76e:	cb 01       	movw	r24, r22
     770:	84 2b       	or	r24, r20
     772:	80 83       	st	Z, r24
     774:	08 95       	ret

00000776 <__vector_18>:
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
     77e:	11 24       	eor	r1, r1
     780:	2f 93       	push	r18
     782:	3f 93       	push	r19
     784:	4f 93       	push	r20
     786:	5f 93       	push	r21
     788:	6f 93       	push	r22
     78a:	7f 93       	push	r23
     78c:	8f 93       	push	r24
     78e:	9f 93       	push	r25
     790:	af 93       	push	r26
     792:	bf 93       	push	r27
     794:	cf 93       	push	r28
     796:	ef 93       	push	r30
     798:	ff 93       	push	r31
     79a:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     79e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
     7a2:	80 7f       	andi	r24, 0xF0	; 240
     7a4:	80 3f       	cpi	r24, 0xF0	; 240
     7a6:	b1 f1       	breq	.+108    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     7a8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
     7ac:	82 95       	swap	r24
     7ae:	8f 70       	andi	r24, 0x0F	; 15
     7b0:	90 e1       	ldi	r25, 0x10	; 16
     7b2:	89 9f       	mul	r24, r25
     7b4:	90 01       	movw	r18, r0
     7b6:	11 24       	eor	r1, r1
     7b8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     7bc:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
     7c0:	96 ff       	sbrs	r25, 6
     7c2:	09 c0       	rjmp	.+18     	; 0x7d6 <__vector_18+0x60>
     7c4:	ee ee       	ldi	r30, 0xEE	; 238
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	90 81       	ld	r25, Z
     7ca:	10 82       	st	Z, r1
     7cc:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
     7d0:	0e 94 9a 03 	call	0x734	; 0x734 <enable_mob_interrupt>
     7d4:	23 c0       	rjmp	.+70     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7d6:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <msgs_av>
     7da:	9f 5f       	subi	r25, 0xFF	; 255
     7dc:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <msgs_av>
     7e0:	e8 2f       	mov	r30, r24
     7e2:	e6 95       	lsr	r30
     7e4:	e6 95       	lsr	r30
     7e6:	e6 95       	lsr	r30
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	ea 51       	subi	r30, 0x1A	; 26
     7ec:	fe 4f       	sbci	r31, 0xFE	; 254
     7ee:	90 81       	ld	r25, Z
     7f0:	48 2f       	mov	r20, r24
     7f2:	47 70       	andi	r20, 0x07	; 7
     7f4:	21 e0       	ldi	r18, 0x01	; 1
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <__vector_18+0x88>
     7fa:	22 0f       	add	r18, r18
     7fc:	33 1f       	adc	r19, r19
     7fe:	4a 95       	dec	r20
     800:	e2 f7       	brpl	.-8      	; 0x7fa <__vector_18+0x84>
     802:	29 2b       	or	r18, r25
     804:	20 83       	st	Z, r18
     806:	ee ee       	ldi	r30, 0xEE	; 238
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	90 81       	ld	r25, Z
     80c:	10 82       	st	Z, r1
     80e:	0e 94 77 03 	call	0x6ee	; 0x6ee <disable_mob_interrupt>
     812:	04 c0       	rjmp	.+8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     814:	ea ed       	ldi	r30, 0xDA	; 218
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	80 83       	st	Z, r24
     81c:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     820:	ff 91       	pop	r31
     822:	ef 91       	pop	r30
     824:	cf 91       	pop	r28
     826:	bf 91       	pop	r27
     828:	af 91       	pop	r26
     82a:	9f 91       	pop	r25
     82c:	8f 91       	pop	r24
     82e:	7f 91       	pop	r23
     830:	6f 91       	pop	r22
     832:	5f 91       	pop	r21
     834:	4f 91       	pop	r20
     836:	3f 91       	pop	r19
     838:	2f 91       	pop	r18
     83a:	0f 90       	pop	r0
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	0f 90       	pop	r0
     840:	1f 90       	pop	r1
     842:	18 95       	reti

00000844 <set_mob_rx_filter>:
     844:	9c 01       	movw	r18, r24
     846:	33 27       	eor	r19, r19
     848:	22 95       	swap	r18
     84a:	32 95       	swap	r19
     84c:	30 7f       	andi	r19, 0xF0	; 240
     84e:	32 27       	eor	r19, r18
     850:	20 7f       	andi	r18, 0xF0	; 240
     852:	32 27       	eor	r19, r18
     854:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     858:	9c 01       	movw	r18, r24
     85a:	21 50       	subi	r18, 0x01	; 1
     85c:	31 09       	sbc	r19, r1
     85e:	22 30       	cpi	r18, 0x02	; 2
     860:	31 05       	cpc	r19, r1
     862:	40 f4       	brcc	.+16     	; 0x874 <set_mob_rx_filter+0x30>
     864:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <devGrp>
     868:	20 e4       	ldi	r18, 0x40	; 64
     86a:	82 9f       	mul	r24, r18
     86c:	c0 01       	movw	r24, r0
     86e:	11 24       	eor	r1, r1
     870:	8f 63       	ori	r24, 0x3F	; 63
     872:	0f c0       	rjmp	.+30     	; 0x892 <set_mob_rx_filter+0x4e>
     874:	03 97       	sbiw	r24, 0x03	; 3
     876:	02 97       	sbiw	r24, 0x02	; 2
     878:	50 f4       	brcc	.+20     	; 0x88e <set_mob_rx_filter+0x4a>
     87a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <devGrp>
     87e:	20 e4       	ldi	r18, 0x40	; 64
     880:	82 9f       	mul	r24, r18
     882:	c0 01       	movw	r24, r0
     884:	11 24       	eor	r1, r1
     886:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <devSer>
     88a:	82 2b       	or	r24, r18
     88c:	02 c0       	rjmp	.+4      	; 0x892 <set_mob_rx_filter+0x4e>
     88e:	8f e3       	ldi	r24, 0x3F	; 63
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
     896:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
     89a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
     89e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     8a2:	28 2f       	mov	r18, r24
     8a4:	22 95       	swap	r18
     8a6:	22 0f       	add	r18, r18
     8a8:	20 7e       	andi	r18, 0xE0	; 224
     8aa:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     8ae:	88 7f       	andi	r24, 0xF8	; 248
     8b0:	97 70       	andi	r25, 0x07	; 7
     8b2:	96 95       	lsr	r25
     8b4:	87 95       	ror	r24
     8b6:	96 95       	lsr	r25
     8b8:	87 95       	ror	r24
     8ba:	96 95       	lsr	r25
     8bc:	87 95       	ror	r24
     8be:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
     8c2:	80 ee       	ldi	r24, 0xE0	; 224
     8c4:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
     8c8:	8f e7       	ldi	r24, 0x7F	; 127
     8ca:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
     8ce:	08 95       	ret

000008d0 <init_CAN>:
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	e8 ed       	ldi	r30, 0xD8	; 216
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	90 81       	ld	r25, Z
     8e4:	91 60       	ori	r25, 0x01	; 1
     8e6:	90 83       	st	Z, r25
     8e8:	40 93 e9 01 	sts	0x01E9, r20	; 0x8001e9 <devGrp>
     8ec:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <devSer>
     8f0:	2f ef       	ldi	r18, 0xFF	; 255
     8f2:	31 ee       	ldi	r19, 0xE1	; 225
     8f4:	94 e0       	ldi	r25, 0x04	; 4
     8f6:	21 50       	subi	r18, 0x01	; 1
     8f8:	30 40       	sbci	r19, 0x00	; 0
     8fa:	90 40       	sbci	r25, 0x00	; 0
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <init_CAN+0x26>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <__stack+0x1>
     900:	00 00       	nop
     902:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     906:	70 93 e3 00 	sts	0x00E3, r23	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
     90a:	60 93 e4 00 	sts	0x00E4, r22	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
     90e:	80 eb       	ldi	r24, 0xB0	; 176
     910:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
     91a:	e6 ee       	ldi	r30, 0xE6	; 230
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	11 82       	std	Z+1, r1	; 0x01
     920:	10 82       	st	Z, r1
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	d0 e0       	ldi	r29, 0x00	; 0
     926:	0f ee       	ldi	r16, 0xEF	; 239
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	0f 2e       	mov	r0, r31
     92c:	fe ee       	ldi	r31, 0xEE	; 238
     92e:	ef 2e       	mov	r14, r31
     930:	f1 2c       	mov	r15, r1
     932:	f0 2d       	mov	r31, r0
     934:	68 94       	set
     936:	dd 24       	eor	r13, r13
     938:	d7 f8       	bld	r13, 7
     93a:	c5 30       	cpi	r28, 0x05	; 5
     93c:	60 f4       	brcc	.+24     	; 0x956 <__stack+0x57>
     93e:	f7 01       	movw	r30, r14
     940:	80 81       	ld	r24, Z
     942:	10 82       	st	Z, r1
     944:	ce 01       	movw	r24, r28
     946:	0e 94 22 04 	call	0x844	; 0x844 <set_mob_rx_filter>
     94a:	f8 01       	movw	r30, r16
     94c:	d0 82       	st	Z, r13
     94e:	8c 2f       	mov	r24, r28
     950:	0e 94 9a 03 	call	0x734	; 0x734 <enable_mob_interrupt>
     954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0x5b>
     956:	f8 01       	movw	r30, r16
     958:	10 82       	st	Z, r1
     95a:	21 96       	adiw	r28, 0x01	; 1
     95c:	cf 30       	cpi	r28, 0x0F	; 15
     95e:	d1 05       	cpc	r29, r1
     960:	61 f7       	brne	.-40     	; 0x93a <__stack+0x3b>
     962:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <msgs_av>
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	df 90       	pop	r13
     97a:	08 95       	ret

0000097c <InitCAN>:
     97c:	9b 01       	movw	r18, r22
     97e:	ac 01       	movw	r20, r24
     980:	63 e1       	ldi	r22, 0x13	; 19
     982:	74 e0       	ldi	r23, 0x04	; 4
     984:	8e e1       	ldi	r24, 0x1E	; 30
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 68 04 	call	0x8d0	; 0x8d0 <init_CAN>
     98c:	08 95       	ret

0000098e <PollAndReceiveCANPacket>:

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
	if(receivedPacket == NULL){
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	09 f4       	brne	.+2      	; 0x99a <PollAndReceiveCANPacket+0xc>
     998:	83 c0       	rjmp	.+262    	; 0xaa0 <PollAndReceiveCANPacket+0x112>
	CANGCON = (1 << ENASTB);
}

/*Returns the number of CAN messages waiting*/
uint8_t inline CAN_msg_available(){
	return msgs_av;
     99a:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <msgs_av>
	if(receivedPacket == NULL){
		return 0x02;
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
     99e:	22 23       	and	r18, r18
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <PollAndReceiveCANPacket+0x16>
     9a2:	81 c0       	rjmp	.+258    	; 0xaa6 <PollAndReceiveCANPacket+0x118>

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     9a4:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     9a8:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <rxed_mobs>
     9ac:	20 fd       	sbrc	r18, 0
     9ae:	25 c0       	rjmp	.+74     	; 0x9fa <PollAndReceiveCANPacket+0x6c>
     9b0:	21 e0       	ldi	r18, 0x01	; 1
     9b2:	30 e0       	ldi	r19, 0x00	; 0

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     9b4:	ad ee       	ldi	r26, 0xED	; 237
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	12 2f       	mov	r17, r18
     9ba:	a9 01       	movw	r20, r18
     9bc:	42 95       	swap	r20
     9be:	52 95       	swap	r21
     9c0:	50 7f       	andi	r21, 0xF0	; 240
     9c2:	54 27       	eor	r21, r20
     9c4:	40 7f       	andi	r20, 0xF0	; 240
     9c6:	54 27       	eor	r21, r20
     9c8:	4c 93       	st	X, r20
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     9ca:	23 fb       	bst	r18, 3
     9cc:	66 27       	eor	r22, r22
     9ce:	60 f9       	bld	r22, 0
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	fb 01       	movw	r30, r22
     9d4:	ea 51       	subi	r30, 0x1A	; 26
     9d6:	fe 4f       	sbci	r31, 0xFE	; 254
     9d8:	40 81       	ld	r20, Z
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	e2 2f       	mov	r30, r18
     9de:	e7 70       	andi	r30, 0x07	; 7
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <PollAndReceiveCANPacket+0x58>
     9e2:	55 95       	asr	r21
     9e4:	47 95       	ror	r20
     9e6:	ea 95       	dec	r30
     9e8:	e2 f7       	brpl	.-8      	; 0x9e2 <PollAndReceiveCANPacket+0x54>
     9ea:	40 fd       	sbrc	r20, 0
     9ec:	07 c0       	rjmp	.+14     	; 0x9fc <PollAndReceiveCANPacket+0x6e>
     9ee:	2f 5f       	subi	r18, 0xFF	; 255
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
	if(!CAN_msg_available()){
		return 0x01;
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
     9f2:	2f 30       	cpi	r18, 0x0F	; 15
     9f4:	31 05       	cpc	r19, r1
     9f6:	01 f7       	brne	.-64     	; 0x9b8 <PollAndReceiveCANPacket+0x2a>
     9f8:	59 c0       	rjmp	.+178    	; 0xaac <PollAndReceiveCANPacket+0x11e>
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     9fa:	10 e0       	ldi	r17, 0x00	; 0
			break;
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
     9fc:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
     a00:	2f 70       	andi	r18, 0x0F	; 15
     a02:	fc 01       	movw	r30, r24
     a04:	22 83       	std	Z+2, r18	; 0x02
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
     a06:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     a0a:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
     a0e:	32 95       	swap	r19
     a10:	36 95       	lsr	r19
     a12:	37 70       	andi	r19, 0x07	; 7
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	44 0f       	add	r20, r20
     a18:	55 1f       	adc	r21, r21
     a1a:	44 0f       	add	r20, r20
     a1c:	55 1f       	adc	r21, r21
     a1e:	44 0f       	add	r20, r20
     a20:	55 1f       	adc	r21, r21
     a22:	43 2b       	or	r20, r19
     a24:	51 83       	std	Z+1, r21	; 0x01
     a26:	40 83       	st	Z, r20
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
     a28:	22 23       	and	r18, r18
     a2a:	91 f0       	breq	.+36     	; 0xa50 <PollAndReceiveCANPacket+0xc2>
     a2c:	33 96       	adiw	r30, 0x03	; 3
     a2e:	21 50       	subi	r18, 0x01	; 1
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	2c 5f       	subi	r18, 0xFC	; 252
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	28 0f       	add	r18, r24
     a38:	39 1f       	adc	r19, r25
     a3a:	0b 96       	adiw	r24, 0x0b	; 11
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
     a3c:	aa ef       	ldi	r26, 0xFA	; 250
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	4c 91       	ld	r20, X
     a42:	41 93       	st	Z+, r20
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
     a44:	e2 17       	cp	r30, r18
     a46:	f3 07       	cpc	r31, r19
     a48:	19 f0       	breq	.+6      	; 0xa50 <PollAndReceiveCANPacket+0xc2>
     a4a:	8e 17       	cp	r24, r30
     a4c:	9f 07       	cpc	r25, r31
     a4e:	c1 f7       	brne	.-16     	; 0xa40 <PollAndReceiveCANPacket+0xb2>
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
	}
	//Atomically decrement the number of messages available
	cli();
     a50:	f8 94       	cli
	msgs_av--;
     a52:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <msgs_av>
     a56:	81 50       	subi	r24, 0x01	; 1
     a58:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <msgs_av>
	sei();
     a5c:	78 94       	sei
	/*Reset the MOb*/
	set_mob_rx_filter(mob);
     a5e:	81 2f       	mov	r24, r17
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 22 04 	call	0x844	; 0x844 <set_mob_rx_filter>
	enable_mob_interrupt(mob);
     a66:	81 2f       	mov	r24, r17
     a68:	0e 94 9a 03 	call	0x734	; 0x734 <enable_mob_interrupt>
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
     a6c:	13 fb       	bst	r17, 3
     a6e:	ff 27       	eor	r31, r31
     a70:	f0 f9       	bld	r31, 0
     a72:	cf 2f       	mov	r28, r31
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	d8 2f       	mov	r29, r24
     a78:	ca 51       	subi	r28, 0x1A	; 26
     a7a:	de 4f       	sbci	r29, 0xFE	; 254
     a7c:	28 81       	ld	r18, Y
     a7e:	17 70       	andi	r17, 0x07	; 7
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <PollAndReceiveCANPacket+0xfc>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	1a 95       	dec	r17
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <PollAndReceiveCANPacket+0xf8>
     a8e:	80 95       	com	r24
     a90:	82 23       	and	r24, r18
     a92:	88 83       	st	Y, r24
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
     a94:	80 e8       	ldi	r24, 0x80	; 128
     a96:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
	return 0;
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	08 c0       	rjmp	.+16     	; 0xab0 <PollAndReceiveCANPacket+0x122>
}

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
	if(receivedPacket == NULL){
		return 0x02;
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	05 c0       	rjmp	.+10     	; 0xab0 <PollAndReceiveCANPacket+0x122>
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
		return 0x01;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <PollAndReceiveCANPacket+0x122>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
	enable_mob_interrupt(mob);
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
	return 0;
    
}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	08 95       	ret

00000ab8 <getLocalDeviceSerial>:

uint8_t getLocalDeviceSerial()
{
    /*Return the DIP switch value*/
    return devSer;
}
     ab8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <devSer>
     abc:	08 95       	ret

00000abe <main>:

uint8_t get_dip_switch(){
	return (~PINA) & 0xF;
}

int main(){
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	2b 97       	sbiw	r28, 0x0b	; 11
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
	CANPacket m;
	DDRA = 0xF0;
     ad2:	80 ef       	ldi	r24, 0xF0	; 240
     ad4:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xF0;
     ad6:	82 b9       	out	0x02, r24	; 2
	setup_timers();
     ad8:	0e 94 c5 0b 	call	0x178a	; 0x178a <setup_timers>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     adc:	2f ef       	ldi	r18, 0xFF	; 255
     ade:	81 ee       	ldi	r24, 0xE1	; 225
     ae0:	94 e0       	ldi	r25, 0x04	; 4
     ae2:	21 50       	subi	r18, 0x01	; 1
     ae4:	80 40       	sbci	r24, 0x00	; 0
     ae6:	90 40       	sbci	r25, 0x00	; 0
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <main+0x24>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <main+0x2e>
     aec:	00 00       	nop
	_delay_ms(100);
	PORTA = 0;
     aee:	12 b8       	out	0x02, r1	; 2
	set_LED(0, 3);
     af0:	63 e0       	ldi	r22, 0x03	; 3
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
	sei();
     af8:	78 94       	sei
	usart_init(19200); //Debug serial
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	7b e4       	ldi	r23, 0x4B	; 75
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <usart_init>
	set_LED(1, 3);
     b06:	63 e0       	ldi	r22, 0x03	; 3
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
	delay_mS(666); //Delay so one can connect to debug serial
     b0e:	8a e9       	ldi	r24, 0x9A	; 154
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_mS>
	uint16_t my_address = getLocalDeviceSerial();
     b16:	0e 94 5c 05 	call	0xab8	; 0xab8 <getLocalDeviceSerial>
     b1a:	f8 2e       	mov	r15, r24
	tprintf("adr=%X\n", my_address);
     b1c:	c8 2e       	mov	r12, r24
     b1e:	d1 2c       	mov	r13, r1
     b20:	1f 92       	push	r1
     b22:	8f 93       	push	r24
     b24:	8f e5       	ldi	r24, 0x5F	; 95
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	9f 93       	push	r25
     b2a:	8f 93       	push	r24
     b2c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tprintf>
	delay_mS(250);
     b30:	8a ef       	ldi	r24, 0xFA	; 250
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_mS>
	InitCAN(DEVICE_GROUP_MOTOR_CONTROL, my_address);
     b38:	b6 01       	movw	r22, r12
     b3a:	84 e0       	ldi	r24, 0x04	; 4
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 be 04 	call	0x97c	; 0x97c <InitCAN>
	set_LED(2, 3);
     b42:	63 e0       	ldi	r22, 0x03	; 3
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
	init_encoder();
     b4a:	0e 94 49 01 	call	0x292	; 0x292 <init_encoder>
	init_ADC();
     b4e:	0e 94 69 00 	call	0xd2	; 0xd2 <init_ADC>
	do_board_specific_setup(my_address);
     b52:	8f 2d       	mov	r24, r15
     b54:	0e 94 aa 00 	call	0x154	; 0x154 <do_board_specific_setup>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     b58:	9f e0       	ldi	r25, 0x0F	; 15
     b5a:	88 e1       	ldi	r24, 0x18	; 24
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	a8 95       	wdr
     b62:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	wdt_enable(WDTO_2S);
	init_motor();
     b6c:	0e 94 9a 07 	call	0xf34	; 0xf34 <init_motor>
	//enable_motor();
	delay_mS(500);
     b70:	84 ef       	ldi	r24, 0xF4	; 244
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_mS>
	set_LED(0, 0);
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
	set_LED(1, 0);
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
	set_LED(3, 0);
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
	while(1){
		if(PollAndReceiveCANPacket(&m) == 0){
			set_LED(3, 3);
			update_LEDS(get_mS()/40);
     b98:	0f 2e       	mov	r0, r31
     b9a:	f8 e2       	ldi	r31, 0x28	; 40
     b9c:	cf 2e       	mov	r12, r31
     b9e:	d1 2c       	mov	r13, r1
     ba0:	e1 2c       	mov	r14, r1
     ba2:	f1 2c       	mov	r15, r1
     ba4:	f0 2d       	mov	r31, r0
	delay_mS(500);
	set_LED(0, 0);
	set_LED(1, 0);
	set_LED(3, 0);
	while(1){
		if(PollAndReceiveCANPacket(&m) == 0){
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	0e 94 c7 04 	call	0x98e	; 0x98e <PollAndReceiveCANPacket>
     bae:	89 2b       	or	r24, r25
     bb0:	a9 f4       	brne	.+42     	; 0xbdc <main+0x11e>
			set_LED(3, 3);
     bb2:	63 e0       	ldi	r22, 0x03	; 3
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
			update_LEDS(get_mS()/40);
     bba:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <get_mS>
     bbe:	a7 01       	movw	r20, r14
     bc0:	96 01       	movw	r18, r12
     bc2:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__udivmodsi4>
     bc6:	c9 01       	movw	r24, r18
     bc8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <update_LEDS>
			handle_CAN_message(&m);
     bcc:	ce 01       	movw	r24, r28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	0e 94 07 06 	call	0xc0e	; 0xc0e <handle_CAN_message>
			set_LED(3, 0);
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
		}
		if(get_motor_mode() & MOTOR_MODE_ENABLED){
     bdc:	0e 94 fd 07 	call	0xffa	; 0xffa <get_motor_mode>
     be0:	80 ff       	sbrs	r24, 0
     be2:	09 c0       	rjmp	.+18     	; 0xbf6 <main+0x138>
			set_LED(2, 3);
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
			set_LED(1, 0);
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
     bf4:	08 c0       	rjmp	.+16     	; 0xc06 <main+0x148>
		} else {
			set_LED(1, 3);
     bf6:	63 e0       	ldi	r22, 0x03	; 3
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
			set_LED(2, 0);
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
		}
		motor_control_tick();
     c06:	0e 94 4f 08 	call	0x109e	; 0x109e <motor_control_tick>
		wdt_reset();
     c0a:	a8 95       	wdr
	}
     c0c:	cc cf       	rjmp	.-104    	; 0xba6 <main+0xe8>

00000c0e <handle_CAN_message>:
#include "CANMotorUnit.h"

uint32_t ppjr = 1;

/*Handle a received CAN message*/
void handle_CAN_message(CANPacket *m){
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	ec 01       	movw	r28, r24
	switch(GetPacketID(m)){
     c14:	0e 94 1e 03 	call	0x63c	; 0x63c <GetPacketID>
     c18:	8a 30       	cpi	r24, 0x0A	; 10
     c1a:	91 05       	cpc	r25, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <handle_CAN_message+0x12>
     c1e:	70 c0       	rjmp	.+224    	; 0xd00 <handle_CAN_message+0xf2>
     c20:	5c f4       	brge	.+22     	; 0xc38 <handle_CAN_message+0x2a>
     c22:	83 30       	cpi	r24, 0x03	; 3
     c24:	91 05       	cpc	r25, r1
     c26:	79 f1       	breq	.+94     	; 0xc86 <handle_CAN_message+0x78>
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <handle_CAN_message+0x22>
     c2e:	45 c0       	rjmp	.+138    	; 0xcba <handle_CAN_message+0xac>
     c30:	89 2b       	or	r24, r25
     c32:	09 f0       	breq	.+2      	; 0xc36 <handle_CAN_message+0x28>
     c34:	8d c0       	rjmp	.+282    	; 0xd50 <handle_CAN_message+0x142>
     c36:	0c c0       	rjmp	.+24     	; 0xc50 <handle_CAN_message+0x42>
     c38:	80 3f       	cpi	r24, 0xF0	; 240
     c3a:	91 05       	cpc	r25, r1
     c3c:	09 f4       	brne	.+2      	; 0xc40 <handle_CAN_message+0x32>
     c3e:	57 c0       	rjmp	.+174    	; 0xcee <handle_CAN_message+0xe0>
     c40:	8f 3f       	cpi	r24, 0xFF	; 255
     c42:	91 05       	cpc	r25, r1
     c44:	09 f4       	brne	.+2      	; 0xc48 <handle_CAN_message+0x3a>
     c46:	68 c0       	rjmp	.+208    	; 0xd18 <handle_CAN_message+0x10a>
     c48:	0c 97       	sbiw	r24, 0x0c	; 12
     c4a:	09 f0       	breq	.+2      	; 0xc4e <handle_CAN_message+0x40>
     c4c:	81 c0       	rjmp	.+258    	; 0xd50 <handle_CAN_message+0x142>
     c4e:	52 c0       	rjmp	.+164    	; 0xcf4 <handle_CAN_message+0xe6>
		case ID_MOTOR_UNIT_MODE_SEL:; //Set Mode
			uint8_t mode = GetModeFromPacket(m);
     c50:	ce 01       	movw	r24, r28
     c52:	0e 94 02 03 	call	0x604	; 0x604 <GetModeFromPacket>
			if(mode == MOTOR_UNIT_MODE_PID){
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	61 f4       	brne	.+24     	; 0xc72 <handle_CAN_message+0x64>
				set_motor_mode(get_motor_mode() | MOTOR_MODE_PID);
     c5a:	0e 94 fd 07 	call	0xffa	; 0xffa <get_motor_mode>
     c5e:	82 60       	ori	r24, 0x02	; 2
     c60:	0e 94 fa 07 	call	0xff4	; 0xff4 <set_motor_mode>
				set_target_position(get_encoder_ticks());
     c64:	0e 94 37 01 	call	0x26e	; 0x26e <get_encoder_ticks>
     c68:	0e 94 09 07 	call	0xe12	; 0xe12 <set_target_position>
				enable_motor();
     c6c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <enable_motor>
     c70:	8f c0       	rjmp	.+286    	; 0xd90 <handle_CAN_message+0x182>
			} else if(mode == MOTOR_UNIT_MODE_PWM){
     c72:	81 11       	cpse	r24, r1
     c74:	8d c0       	rjmp	.+282    	; 0xd90 <handle_CAN_message+0x182>
				set_motor_mode(get_motor_mode() & ~MOTOR_MODE_PID);
     c76:	0e 94 fd 07 	call	0xffa	; 0xffa <get_motor_mode>
     c7a:	8d 7f       	andi	r24, 0xFD	; 253
     c7c:	0e 94 fa 07 	call	0xff4	; 0xff4 <set_motor_mode>
				enable_motor();
     c80:	0e 94 e6 07 	call	0xfcc	; 0xfcc <enable_motor>
     c84:	85 c0       	rjmp	.+266    	; 0xd90 <handle_CAN_message+0x182>
			}
			break;
		case ID_MOTOR_UNIT_PWM_DIR_SET: //Set PWM/Direction
			if(!(get_motor_mode() & MOTOR_MODE_PID)){
     c86:	0e 94 fd 07 	call	0xffa	; 0xffa <get_motor_mode>
     c8a:	81 fd       	sbrc	r24, 1
     c8c:	81 c0       	rjmp	.+258    	; 0xd90 <handle_CAN_message+0x182>
				int16_t mp = GetPWMFromPacket(m) / 32;
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 05 03 	call	0x60a	; 0x60a <GetPWMFromPacket>
				set_motor_power(mp);
     c94:	99 23       	and	r25, r25
     c96:	24 f4       	brge	.+8      	; 0xca0 <handle_CAN_message+0x92>
     c98:	61 5e       	subi	r22, 0xE1	; 225
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	8f 4f       	sbci	r24, 0xFF	; 255
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	68 94       	set
     ca6:	14 f8       	bld	r1, 4
     ca8:	b5 95       	asr	r27
     caa:	a7 95       	ror	r26
     cac:	97 95       	ror	r25
     cae:	87 95       	ror	r24
     cb0:	16 94       	lsr	r1
     cb2:	d1 f7       	brne	.-12     	; 0xca8 <handle_CAN_message+0x9a>
     cb4:	0e 94 09 08 	call	0x1012	; 0x1012 <set_motor_power>
     cb8:	6b c0       	rjmp	.+214    	; 0xd90 <handle_CAN_message+0x182>
			}
			break;
		case ID_MOTOR_UNIT_PID_POS_TGT_SET: //Set angle + velocity
			set_target_position(((GetPIDTargetFromPacket(m) * ppjr) / 360LL) / 1000LL);
     cba:	ce 01       	movw	r24, r28
     cbc:	0e 94 0d 03 	call	0x61a	; 0x61a <GetPIDTargetFromPacket>
     cc0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     cc4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cc8:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     ccc:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     cd0:	a8 2f       	mov	r26, r24
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__muluhisi3>
     cd8:	20 e4       	ldi	r18, 0x40	; 64
     cda:	3e e7       	ldi	r19, 0x7E	; 126
     cdc:	45 e0       	ldi	r20, 0x05	; 5
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__udivmodsi4>
     ce4:	ca 01       	movw	r24, r20
     ce6:	b9 01       	movw	r22, r18
     ce8:	0e 94 09 07 	call	0xe12	; 0xe12 <set_target_position>
			//set_target_velocity(param2);
			break;
     cec:	51 c0       	rjmp	.+162    	; 0xd90 <handle_CAN_message+0x182>
		case ID_ESTOP:
			disable_motor();
     cee:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <disable_motor>
			break;
     cf2:	4e c0       	rjmp	.+156    	; 0xd90 <handle_CAN_message+0x182>
		case ID_MOTOR_UNIT_ENC_INIT:
			set_encoder_ticks(0);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	cb 01       	movw	r24, r22
     cfa:	0e 94 40 01 	call	0x280	; 0x280 <set_encoder_ticks>
			break;
     cfe:	48 c0       	rjmp	.+144    	; 0xd90 <handle_CAN_message+0x182>
		case ID_MOTOR_UNIT_ENC_PPJR_SET:
			ppjr = GetEncoderPPJRFromPacket(m);
     d00:	ce 01       	movw	r24, r28
     d02:	0e 94 16 03 	call	0x62c	; 0x62c <GetEncoderPPJRFromPacket>
     d06:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     d0a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d0e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     d12:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			break;
     d16:	3c c0       	rjmp	.+120    	; 0xd90 <handle_CAN_message+0x182>
			} else {
				DDRC &= ~2;
			}
			break;*/
		case 0xFF: /*error*/
			tprintf("Error\n");
     d18:	87 e6       	ldi	r24, 0x67	; 103
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	9f 93       	push	r25
     d1e:	8f 93       	push	r24
     d20:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tprintf>
			set_LED(0, 2);
     d24:	62 e0       	ldi	r22, 0x02	; 2
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
			update_LEDS(get_mS()/40);
     d2c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <get_mS>
     d30:	28 e2       	ldi	r18, 0x28	; 40
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__udivmodsi4>
     d3c:	c9 01       	movw	r24, r18
     d3e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <update_LEDS>
			set_LED(0, 0);
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
			break;
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	20 c0       	rjmp	.+64     	; 0xd90 <handle_CAN_message+0x182>
			break;
		default:
			tprintf("Unknown CAN code %d\n", m->data[0]);
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	1f 92       	push	r1
     d54:	8f 93       	push	r24
     d56:	8e e6       	ldi	r24, 0x6E	; 110
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tprintf>
			set_LED(0, 2);
     d62:	62 e0       	ldi	r22, 0x02	; 2
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
			update_LEDS(get_mS()/40);
     d6a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <get_mS>
     d6e:	28 e2       	ldi	r18, 0x28	; 40
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__udivmodsi4>
     d7a:	c9 01       	movw	r24, r18
     d7c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <update_LEDS>
			set_LED(0, 0);
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
			break;
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
	}
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <set_motor_power_raw>:
}

/*Gets the motor maximum position*/
uint32_t get_motor_max_position(){
	return motor_max_pos;
}
     d96:	81 15       	cp	r24, r1
     d98:	24 e0       	ldi	r18, 0x04	; 4
     d9a:	92 07       	cpc	r25, r18
     d9c:	14 f0       	brlt	.+4      	; 0xda2 <set_motor_power_raw+0xc>
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	93 e0       	ldi	r25, 0x03	; 3
     da2:	bc 01       	movw	r22, r24
     da4:	61 30       	cpi	r22, 0x01	; 1
     da6:	8c ef       	ldi	r24, 0xFC	; 252
     da8:	78 07       	cpc	r23, r24
     daa:	14 f4       	brge	.+4      	; 0xdb0 <set_motor_power_raw+0x1a>
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	7c ef       	ldi	r23, 0xFC	; 252
     db0:	61 15       	cp	r22, r1
     db2:	71 05       	cpc	r23, r1
     db4:	21 f0       	breq	.+8      	; 0xdbe <set_motor_power_raw+0x28>
     db6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <motor_mode>
     dba:	80 fd       	sbrc	r24, 0
     dbc:	07 c0       	rjmp	.+14     	; 0xdcc <set_motor_power_raw+0x36>
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	0e 94 1f 0b 	call	0x163e	; 0x163e <write_PWM>
     dc8:	73 98       	cbi	0x0e, 3	; 14
     dca:	08 95       	ret
     dcc:	77 23       	and	r23, r23
     dce:	34 f4       	brge	.+12     	; 0xddc <set_motor_power_raw+0x46>
     dd0:	72 99       	sbic	0x0e, 2	; 14
     dd2:	72 98       	cbi	0x0e, 2	; 14
     dd4:	71 95       	neg	r23
     dd6:	61 95       	neg	r22
     dd8:	71 09       	sbc	r23, r1
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <set_motor_power_raw+0x4a>
     ddc:	72 9b       	sbis	0x0e, 2	; 14
     dde:	72 9a       	sbi	0x0e, 2	; 14
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	0e 94 1f 0b 	call	0x163e	; 0x163e <write_PWM>
     de6:	08 95       	ret

00000de8 <set_Kp>:
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	21 f0       	breq	.+8      	; 0xdf4 <set_Kp+0xc>
     dec:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Kp+0x1>
     df0:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Kp>
     df4:	08 95       	ret

00000df6 <set_Ki>:
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	21 f0       	breq	.+8      	; 0xe02 <set_Ki+0xc>
     dfa:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <Ki+0x1>
     dfe:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Ki>
     e02:	08 95       	ret

00000e04 <set_Kd>:
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	21 f0       	breq	.+8      	; 0xe10 <set_Kd+0xc>
     e08:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <Kd+0x1>
     e0c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <Kd>
     e10:	08 95       	ret

00000e12 <set_target_position>:
     e12:	cf 92       	push	r12
     e14:	df 92       	push	r13
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	6b 01       	movw	r12, r22
     e1c:	7c 01       	movw	r14, r24
     e1e:	ff 92       	push	r15
     e20:	ef 92       	push	r14
     e22:	df 92       	push	r13
     e24:	6f 93       	push	r22
     e26:	83 e8       	ldi	r24, 0x83	; 131
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	9f 93       	push	r25
     e2c:	8f 93       	push	r24
     e2e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tprintf>
     e32:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <motor_target_pos>
     e36:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <motor_target_pos+0x1>
     e3a:	8c 19       	sub	r24, r12
     e3c:	9d 09       	sbc	r25, r13
     e3e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <int_abs>
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	85 36       	cpi	r24, 0x65	; 101
     e50:	91 05       	cpc	r25, r1
     e52:	40 f0       	brcs	.+16     	; 0xe64 <set_target_position+0x52>
     e54:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <pos_i>
     e58:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <pos_i+0x1>
     e5c:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <pos_i+0x2>
     e60:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <pos_i+0x3>
     e64:	c0 92 f4 01 	sts	0x01F4, r12	; 0x8001f4 <motor_target_pos>
     e68:	d0 92 f5 01 	sts	0x01F5, r13	; 0x8001f5 <motor_target_pos+0x1>
     e6c:	e0 92 f6 01 	sts	0x01F6, r14	; 0x8001f6 <motor_target_pos+0x2>
     e70:	f0 92 f7 01 	sts	0x01F7, r15	; 0x8001f7 <motor_target_pos+0x3>
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	08 95       	ret

00000e7e <set_target_velocity>:
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ec 01       	movw	r28, r24
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	8b e9       	ldi	r24, 0x9B	; 155
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	9f 93       	push	r25
     e8e:	8f 93       	push	r24
     e90:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tprintf>
     e94:	d0 93 f9 01 	sts	0x01F9, r29	; 0x8001f9 <motor_target_vel+0x1>
     e98:	c0 93 f8 01 	sts	0x01F8, r28	; 0x8001f8 <motor_target_vel>
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cd 37       	cpi	r28, 0x7D	; 125
     ea6:	d1 05       	cpc	r29, r1
     ea8:	c8 f4       	brcc	.+50     	; 0xedc <set_target_velocity+0x5e>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <slow>
     eb0:	8d e7       	ldi	r24, 0x7D	; 125
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	be 01       	movw	r22, r28
     eb6:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__udivmodhi4>
     eba:	41 e0       	ldi	r20, 0x01	; 1
     ebc:	9e 01       	movw	r18, r28
     ebe:	36 95       	lsr	r19
     ec0:	27 95       	ror	r18
     ec2:	28 17       	cp	r18, r24
     ec4:	39 07       	cpc	r19, r25
     ec6:	08 f0       	brcs	.+2      	; 0xeca <set_target_velocity+0x4c>
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	8d e7       	ldi	r24, 0x7D	; 125
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	be 01       	movw	r22, r28
     ed0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__udivmodhi4>
     ed4:	64 0f       	add	r22, r20
     ed6:	60 93 0b 02 	sts	0x020B, r22	; 0x80020b <tgt_inc>
     eda:	15 c0       	rjmp	.+42     	; 0xf06 <set_target_velocity+0x88>
     edc:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <slow>
     ee0:	9e 01       	movw	r18, r28
     ee2:	af ea       	ldi	r26, 0xAF	; 175
     ee4:	b7 e4       	ldi	r27, 0x47	; 71
     ee6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__umulhisi3>
     eea:	c8 1b       	sub	r28, r24
     eec:	d9 0b       	sbc	r29, r25
     eee:	d6 95       	lsr	r29
     ef0:	c7 95       	ror	r28
     ef2:	8c 0f       	add	r24, r28
     ef4:	9d 1f       	adc	r25, r29
     ef6:	92 95       	swap	r25
     ef8:	82 95       	swap	r24
     efa:	8f 70       	andi	r24, 0x0F	; 15
     efc:	89 27       	eor	r24, r25
     efe:	9f 70       	andi	r25, 0x0F	; 15
     f00:	89 27       	eor	r24, r25
     f02:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <tgt_inc>
     f06:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <tgt_inc>
     f0a:	1f 92       	push	r1
     f0c:	8f 93       	push	r24
     f0e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <slow>
     f12:	1f 92       	push	r1
     f14:	8f 93       	push	r24
     f16:	83 eb       	ldi	r24, 0xB3	; 179
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	9f 93       	push	r25
     f1c:	8f 93       	push	r24
     f1e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tprintf>
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <init_motor>:
     f34:	73 98       	cbi	0x0e, 3	; 14
     f36:	6b 9a       	sbi	0x0d, 3	; 13
     f38:	6a 9a       	sbi	0x0d, 2	; 13
     f3a:	72 9a       	sbi	0x0e, 2	; 14
     f3c:	80 98       	cbi	0x10, 0	; 16
     f3e:	74 9a       	sbi	0x0e, 4	; 14
     f40:	6d 9a       	sbi	0x0d, 5	; 13
     f42:	83 e0       	ldi	r24, 0x03	; 3
     f44:	8b b9       	out	0x0b, r24	; 11
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	94 e0       	ldi	r25, 0x04	; 4
     f4a:	a0 e0       	ldi	r26, 0x00	; 0
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <motor_max_pos>
     f52:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <motor_max_pos+0x1>
     f56:	a0 93 fc 01 	sts	0x01FC, r26	; 0x8001fc <motor_max_pos+0x2>
     f5a:	b0 93 fd 01 	sts	0x01FD, r27	; 0x8001fd <motor_max_pos+0x3>
     f5e:	88 e8       	ldi	r24, 0x88	; 136
     f60:	93 e1       	ldi	r25, 0x13	; 19
     f62:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <motor_max_current+0x1>
     f66:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <motor_max_current>
     f6a:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <motor_target_pos>
     f6e:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <motor_target_pos+0x1>
     f72:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <motor_target_pos+0x2>
     f76:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <motor_target_pos+0x3>
     f7a:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <pid_runs+0x1>
     f7e:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <pid_runs>
     f82:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <motor_power+0x1>
     f86:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <motor_power>
     f8a:	8c e8       	ldi	r24, 0x8C	; 140
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Kp+0x1>
     f92:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Kp>
     f96:	84 e1       	ldi	r24, 0x14	; 20
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <Ki+0x1>
     f9e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Ki>
     fa2:	84 e6       	ldi	r24, 0x64	; 100
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <Kd+0x1>
     faa:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <Kd>
     fae:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <pid_target>
     fb2:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <pid_target+0x1>
     fb6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <pid_target+0x2>
     fba:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pid_target+0x3>
     fbe:	8a ef       	ldi	r24, 0xFA	; 250
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <set_target_velocity>
     fc6:	0e 94 49 01 	call	0x292	; 0x292 <init_encoder>
     fca:	08 95       	ret

00000fcc <enable_motor>:
     fcc:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <motor_mode>
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <motor_mode>
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
     fde:	08 95       	ret

00000fe0 <disable_motor>:
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 cb 06 	call	0xd96	; 0xd96 <set_motor_power_raw>
     fe8:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <motor_mode>
     fec:	8e 7f       	andi	r24, 0xFE	; 254
     fee:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <motor_mode>
     ff2:	08 95       	ret

00000ff4 <set_motor_mode>:
     ff4:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <motor_mode>
     ff8:	08 95       	ret

00000ffa <get_motor_mode>:
     ffa:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <motor_mode>
     ffe:	08 95       	ret

00001000 <get_motor_limit_switch_state>:
    1000:	89 b1       	in	r24, 0x09	; 9
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	80 95       	com	r24
    1006:	90 95       	com	r25
    1008:	86 70       	andi	r24, 0x06	; 6
    100a:	99 27       	eor	r25, r25
    100c:	95 95       	asr	r25
    100e:	87 95       	ror	r24
    1010:	08 95       	ret

00001012 <set_motor_power>:
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	ec 01       	movw	r28, r24
    1018:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <get_mS>
    101c:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <last_set>
    1020:	70 93 06 02 	sts	0x0206, r23	; 0x800206 <last_set+0x1>
    1024:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <last_set+0x2>
    1028:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <last_set+0x3>
    102c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <motor_mode>
    1030:	80 fd       	sbrc	r24, 0
    1032:	05 c0       	rjmp	.+10     	; 0x103e <set_motor_power+0x2c>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 cb 06 	call	0xd96	; 0xd96 <set_motor_power_raw>
    103c:	2d c0       	rjmp	.+90     	; 0x1098 <set_motor_power+0x86>
    103e:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <reverse>
    1042:	88 23       	and	r24, r24
    1044:	19 f0       	breq	.+6      	; 0x104c <set_motor_power+0x3a>
    1046:	d1 95       	neg	r29
    1048:	c1 95       	neg	r28
    104a:	d1 09       	sbc	r29, r1
    104c:	d0 93 eb 01 	sts	0x01EB, r29	; 0x8001eb <motor_power+0x1>
    1050:	c0 93 ea 01 	sts	0x01EA, r28	; 0x8001ea <motor_power>
    1054:	0e 94 00 08 	call	0x1000	; 0x1000 <get_motor_limit_switch_state>
    1058:	80 ff       	sbrs	r24, 0
    105a:	0b c0       	rjmp	.+22     	; 0x1072 <set_motor_power+0x60>
    105c:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <motor_power>
    1060:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <motor_power+0x1>
    1064:	33 23       	and	r19, r19
    1066:	2c f4       	brge	.+10     	; 0x1072 <set_motor_power+0x60>
    1068:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <motor_power+0x1>
    106c:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <motor_power>
    1070:	0d c0       	rjmp	.+26     	; 0x108c <set_motor_power+0x7a>
    1072:	81 ff       	sbrs	r24, 1
    1074:	0b c0       	rjmp	.+22     	; 0x108c <set_motor_power+0x7a>
    1076:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <motor_power>
    107a:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <motor_power+0x1>
    107e:	18 16       	cp	r1, r24
    1080:	19 06       	cpc	r1, r25
    1082:	24 f4       	brge	.+8      	; 0x108c <set_motor_power+0x7a>
    1084:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <motor_power+0x1>
    1088:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <motor_power>
    108c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <motor_power>
    1090:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <motor_power+0x1>
    1094:	0e 94 cb 06 	call	0xd96	; 0xd96 <set_motor_power_raw>
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	08 95       	ret

0000109e <motor_control_tick>:
    109e:	4f 92       	push	r4
    10a0:	5f 92       	push	r5
    10a2:	6f 92       	push	r6
    10a4:	7f 92       	push	r7
    10a6:	8f 92       	push	r8
    10a8:	9f 92       	push	r9
    10aa:	af 92       	push	r10
    10ac:	bf 92       	push	r11
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <motor_control_tick+0x22>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <motor_control_tick+0x24>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <motor_mode>
    10ca:	81 fd       	sbrc	r24, 1
    10cc:	9d c2       	rjmp	.+1338   	; 0x1608 <motor_control_tick+0x56a>
    10ce:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PID_due>
    10d2:	0e 94 37 01 	call	0x26e	; 0x26e <get_encoder_ticks>
    10d6:	6b 01       	movw	r12, r22
    10d8:	7c 01       	movw	r14, r24
    10da:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end>
    10de:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <__data_end+0x1>
    10e2:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <__data_end+0x2>
    10e6:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <__data_end+0x3>
    10ea:	c8 16       	cp	r12, r24
    10ec:	d9 06       	cpc	r13, r25
    10ee:	ea 06       	cpc	r14, r26
    10f0:	fb 06       	cpc	r15, r27
    10f2:	c1 f0       	breq	.+48     	; 0x1124 <motor_control_tick+0x86>
    10f4:	ff 92       	push	r15
    10f6:	ef 92       	push	r14
    10f8:	df 92       	push	r13
    10fa:	cf 92       	push	r12
    10fc:	87 e9       	ldi	r24, 0x97	; 151
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	9f 93       	push	r25
    1102:	8f 93       	push	r24
    1104:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tprintf>
    1108:	c0 92 d4 01 	sts	0x01D4, r12	; 0x8001d4 <__data_end>
    110c:	d0 92 d5 01 	sts	0x01D5, r13	; 0x8001d5 <__data_end+0x1>
    1110:	e0 92 d6 01 	sts	0x01D6, r14	; 0x8001d6 <__data_end+0x2>
    1114:	f0 92 d7 01 	sts	0x01D7, r15	; 0x8001d7 <__data_end+0x3>
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <get_mS>
    1128:	c0 90 05 02 	lds	r12, 0x0205	; 0x800205 <last_set>
    112c:	d0 90 06 02 	lds	r13, 0x0206	; 0x800206 <last_set+0x1>
    1130:	e0 90 07 02 	lds	r14, 0x0207	; 0x800207 <last_set+0x2>
    1134:	f0 90 08 02 	lds	r15, 0x0208	; 0x800208 <last_set+0x3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	8c 19       	sub	r24, r12
    113e:	9d 09       	sbc	r25, r13
    1140:	ae 09       	sbc	r26, r14
    1142:	bf 09       	sbc	r27, r15
    1144:	83 3e       	cpi	r24, 0xE3	; 227
    1146:	94 40       	sbci	r25, 0x04	; 4
    1148:	a1 05       	cpc	r26, r1
    114a:	b1 05       	cpc	r27, r1
    114c:	20 f0       	brcs	.+8      	; 0x1156 <motor_control_tick+0xb8>
    114e:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <motor_power+0x1>
    1152:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <motor_power>
    1156:	64 99       	sbic	0x0c, 4	; 12
    1158:	0a c0       	rjmp	.+20     	; 0x116e <motor_control_tick+0xd0>
    115a:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <motor_power+0x1>
    115e:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <motor_power>
    1162:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <disable_motor>
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <set_LED>
    116e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <motor_mode>
    1172:	81 ff       	sbrs	r24, 1
    1174:	f9 c1       	rjmp	.+1010   	; 0x1568 <motor_control_tick+0x4ca>
    1176:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PID_due>
    117a:	88 23       	and	r24, r24
    117c:	09 f4       	brne	.+2      	; 0x1180 <motor_control_tick+0xe2>
    117e:	f4 c1       	rjmp	.+1000   	; 0x1568 <motor_control_tick+0x4ca>
    1180:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <slow>
    1184:	88 23       	and	r24, r24
    1186:	09 f4       	brne	.+2      	; 0x118a <motor_control_tick+0xec>
    1188:	6f c0       	rjmp	.+222    	; 0x1268 <motor_control_tick+0x1ca>
    118a:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <tgt_inc>
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <pid_runs>
    1194:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <pid_runs+0x1>
    1198:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__udivmodhi4>
    119c:	89 2b       	or	r24, r25
    119e:	09 f0       	breq	.+2      	; 0x11a2 <motor_control_tick+0x104>
    11a0:	c6 c0       	rjmp	.+396    	; 0x132e <motor_control_tick+0x290>
    11a2:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <motor_target_pos>
    11a6:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <motor_target_pos+0x1>
    11aa:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <motor_target_pos+0x2>
    11ae:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <motor_target_pos+0x3>
    11b2:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <pid_target>
    11b6:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <pid_target+0x1>
    11ba:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <pid_target+0x2>
    11be:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <pid_target+0x3>
    11c2:	48 17       	cp	r20, r24
    11c4:	59 07       	cpc	r21, r25
    11c6:	6a 07       	cpc	r22, r26
    11c8:	7b 07       	cpc	r23, r27
    11ca:	2c f5       	brge	.+74     	; 0x1216 <motor_control_tick+0x178>
    11cc:	7c 01       	movw	r14, r24
    11ce:	8d 01       	movw	r16, r26
    11d0:	e4 1a       	sub	r14, r20
    11d2:	f5 0a       	sbc	r15, r21
    11d4:	06 0b       	sbc	r16, r22
    11d6:	17 0b       	sbc	r17, r23
    11d8:	a8 01       	movw	r20, r16
    11da:	97 01       	movw	r18, r14
    11dc:	65 e0       	ldi	r22, 0x05	; 5
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <min>
    11e8:	c0 90 00 02 	lds	r12, 0x0200	; 0x800200 <pid_target>
    11ec:	d0 90 01 02 	lds	r13, 0x0201	; 0x800201 <pid_target+0x1>
    11f0:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <pid_target+0x2>
    11f4:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <pid_target+0x3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	8c 0d       	add	r24, r12
    11fe:	9d 1d       	adc	r25, r13
    1200:	ae 1d       	adc	r26, r14
    1202:	bf 1d       	adc	r27, r15
    1204:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <pid_target>
    1208:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <pid_target+0x1>
    120c:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <pid_target+0x2>
    1210:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <pid_target+0x3>
    1214:	8c c0       	rjmp	.+280    	; 0x132e <motor_control_tick+0x290>
    1216:	84 17       	cp	r24, r20
    1218:	95 07       	cpc	r25, r21
    121a:	a6 07       	cpc	r26, r22
    121c:	b7 07       	cpc	r27, r23
    121e:	0c f0       	brlt	.+2      	; 0x1222 <motor_control_tick+0x184>
    1220:	86 c0       	rjmp	.+268    	; 0x132e <motor_control_tick+0x290>
    1222:	9a 01       	movw	r18, r20
    1224:	ab 01       	movw	r20, r22
    1226:	28 1b       	sub	r18, r24
    1228:	39 0b       	sbc	r19, r25
    122a:	4a 0b       	sbc	r20, r26
    122c:	5b 0b       	sbc	r21, r27
    122e:	65 e0       	ldi	r22, 0x05	; 5
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <min>
    123a:	c0 90 00 02 	lds	r12, 0x0200	; 0x800200 <pid_target>
    123e:	d0 90 01 02 	lds	r13, 0x0201	; 0x800201 <pid_target+0x1>
    1242:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <pid_target+0x2>
    1246:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <pid_target+0x3>
    124a:	97 01       	movw	r18, r14
    124c:	86 01       	movw	r16, r12
    124e:	06 1b       	sub	r16, r22
    1250:	17 0b       	sbc	r17, r23
    1252:	28 0b       	sbc	r18, r24
    1254:	39 0b       	sbc	r19, r25
    1256:	00 93 00 02 	sts	0x0200, r16	; 0x800200 <pid_target>
    125a:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <pid_target+0x1>
    125e:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <pid_target+0x2>
    1262:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <pid_target+0x3>
    1266:	63 c0       	rjmp	.+198    	; 0x132e <motor_control_tick+0x290>
    1268:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <motor_target_pos>
    126c:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <motor_target_pos+0x1>
    1270:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <motor_target_pos+0x2>
    1274:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <motor_target_pos+0x3>
    1278:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <pid_target>
    127c:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <pid_target+0x1>
    1280:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <pid_target+0x2>
    1284:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <pid_target+0x3>
    1288:	48 17       	cp	r20, r24
    128a:	59 07       	cpc	r21, r25
    128c:	6a 07       	cpc	r22, r26
    128e:	7b 07       	cpc	r23, r27
    1290:	34 f5       	brge	.+76     	; 0x12de <motor_control_tick+0x240>
    1292:	7c 01       	movw	r14, r24
    1294:	8d 01       	movw	r16, r26
    1296:	e4 1a       	sub	r14, r20
    1298:	f5 0a       	sbc	r15, r21
    129a:	06 0b       	sbc	r16, r22
    129c:	17 0b       	sbc	r17, r23
    129e:	a8 01       	movw	r20, r16
    12a0:	97 01       	movw	r18, r14
    12a2:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <tgt_inc>
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <min>
    12b0:	c0 90 00 02 	lds	r12, 0x0200	; 0x800200 <pid_target>
    12b4:	d0 90 01 02 	lds	r13, 0x0201	; 0x800201 <pid_target+0x1>
    12b8:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <pid_target+0x2>
    12bc:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <pid_target+0x3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	8c 0d       	add	r24, r12
    12c6:	9d 1d       	adc	r25, r13
    12c8:	ae 1d       	adc	r26, r14
    12ca:	bf 1d       	adc	r27, r15
    12cc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <pid_target>
    12d0:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <pid_target+0x1>
    12d4:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <pid_target+0x2>
    12d8:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <pid_target+0x3>
    12dc:	28 c0       	rjmp	.+80     	; 0x132e <motor_control_tick+0x290>
    12de:	84 17       	cp	r24, r20
    12e0:	95 07       	cpc	r25, r21
    12e2:	a6 07       	cpc	r26, r22
    12e4:	b7 07       	cpc	r27, r23
    12e6:	1c f5       	brge	.+70     	; 0x132e <motor_control_tick+0x290>
    12e8:	9a 01       	movw	r18, r20
    12ea:	ab 01       	movw	r20, r22
    12ec:	28 1b       	sub	r18, r24
    12ee:	39 0b       	sbc	r19, r25
    12f0:	4a 0b       	sbc	r20, r26
    12f2:	5b 0b       	sbc	r21, r27
    12f4:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <tgt_inc>
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <min>
    1302:	c0 90 00 02 	lds	r12, 0x0200	; 0x800200 <pid_target>
    1306:	d0 90 01 02 	lds	r13, 0x0201	; 0x800201 <pid_target+0x1>
    130a:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <pid_target+0x2>
    130e:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <pid_target+0x3>
    1312:	97 01       	movw	r18, r14
    1314:	86 01       	movw	r16, r12
    1316:	06 1b       	sub	r16, r22
    1318:	17 0b       	sbc	r17, r23
    131a:	28 0b       	sbc	r18, r24
    131c:	39 0b       	sbc	r19, r25
    131e:	00 93 00 02 	sts	0x0200, r16	; 0x800200 <pid_target>
    1322:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <pid_target+0x1>
    1326:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <pid_target+0x2>
    132a:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <pid_target+0x3>
    132e:	0e 94 37 01 	call	0x26e	; 0x26e <get_encoder_ticks>
    1332:	4b 01       	movw	r8, r22
    1334:	5c 01       	movw	r10, r24
    1336:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <pid_target>
    133a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <pid_target+0x1>
    133e:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <pid_target+0x2>
    1342:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <pid_target+0x3>
    1346:	75 01       	movw	r14, r10
    1348:	64 01       	movw	r12, r8
    134a:	c8 1a       	sub	r12, r24
    134c:	d9 0a       	sbc	r13, r25
    134e:	ea 0a       	sbc	r14, r26
    1350:	fb 0a       	sbc	r15, r27
    1352:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <last_pos_err>
    1356:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <last_pos_err+0x1>
    135a:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <last_pos_err+0x2>
    135e:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <last_pos_err+0x3>
    1362:	29 83       	std	Y+1, r18	; 0x01
    1364:	3a 83       	std	Y+2, r19	; 0x02
    1366:	4b 83       	std	Y+3, r20	; 0x03
    1368:	5c 83       	std	Y+4, r21	; 0x04
    136a:	c0 92 14 02 	sts	0x0214, r12	; 0x800214 <last_pos_err>
    136e:	d0 92 15 02 	sts	0x0215, r13	; 0x800215 <last_pos_err+0x1>
    1372:	e0 92 16 02 	sts	0x0216, r14	; 0x800216 <last_pos_err+0x2>
    1376:	f0 92 17 02 	sts	0x0217, r15	; 0x800217 <last_pos_err+0x3>
    137a:	c6 01       	movw	r24, r12
    137c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <int_abs>
    1380:	05 97       	sbiw	r24, 0x05	; 5
    1382:	a0 f0       	brcs	.+40     	; 0x13ac <motor_control_tick+0x30e>
    1384:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <pos_i>
    1388:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <pos_i+0x1>
    138c:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <pos_i+0x2>
    1390:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <pos_i+0x3>
    1394:	8c 0d       	add	r24, r12
    1396:	9d 1d       	adc	r25, r13
    1398:	ae 1d       	adc	r26, r14
    139a:	bf 1d       	adc	r27, r15
    139c:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <pos_i>
    13a0:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <pos_i+0x1>
    13a4:	a0 93 f2 01 	sts	0x01F2, r26	; 0x8001f2 <pos_i+0x2>
    13a8:	b0 93 f3 01 	sts	0x01F3, r27	; 0x8001f3 <pos_i+0x3>
    13ac:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <motor_target_pos>
    13b0:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <motor_target_pos+0x1>
    13b4:	a4 01       	movw	r20, r8
    13b6:	48 1b       	sub	r20, r24
    13b8:	59 0b       	sbc	r21, r25
    13ba:	ca 01       	movw	r24, r20
    13bc:	0e 94 75 0e 	call	0x1cea	; 0x1cea <int_abs>
    13c0:	04 97       	sbiw	r24, 0x04	; 4
    13c2:	28 f4       	brcc	.+10     	; 0x13ce <motor_control_tick+0x330>
    13c4:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <motor_power+0x1>
    13c8:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <motor_power>
    13cc:	90 c0       	rjmp	.+288    	; 0x14ee <motor_control_tick+0x450>
    13ce:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <pos_i>
    13d2:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <pos_i+0x1>
    13d6:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <pos_i+0x2>
    13da:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <pos_i+0x3>
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	53 e0       	ldi	r21, 0x03	; 3
    13e2:	95 07       	cpc	r25, r21
    13e4:	a1 05       	cpc	r26, r1
    13e6:	b1 05       	cpc	r27, r1
    13e8:	6c f0       	brlt	.+26     	; 0x1404 <motor_control_tick+0x366>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	a0 e0       	ldi	r26, 0x00	; 0
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <pos_i>
    13f6:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <pos_i+0x1>
    13fa:	a0 93 f2 01 	sts	0x01F2, r26	; 0x8001f2 <pos_i+0x2>
    13fe:	b0 93 f3 01 	sts	0x01F3, r27	; 0x8001f3 <pos_i+0x3>
    1402:	11 c0       	rjmp	.+34     	; 0x1426 <motor_control_tick+0x388>
    1404:	81 15       	cp	r24, r1
    1406:	9d 4f       	sbci	r25, 0xFD	; 253
    1408:	af 4f       	sbci	r26, 0xFF	; 255
    140a:	bf 4f       	sbci	r27, 0xFF	; 255
    140c:	64 f4       	brge	.+24     	; 0x1426 <motor_control_tick+0x388>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	9d ef       	ldi	r25, 0xFD	; 253
    1412:	af ef       	ldi	r26, 0xFF	; 255
    1414:	bf ef       	ldi	r27, 0xFF	; 255
    1416:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <pos_i>
    141a:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <pos_i+0x1>
    141e:	a0 93 f2 01 	sts	0x01F2, r26	; 0x8001f2 <pos_i+0x2>
    1422:	b0 93 f3 01 	sts	0x01F3, r27	; 0x8001f3 <pos_i+0x3>
    1426:	a0 91 ee 01 	lds	r26, 0x01EE	; 0x8001ee <Ki>
    142a:	b0 91 ef 01 	lds	r27, 0x01EF	; 0x8001ef <Ki+0x1>
    142e:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <pos_i>
    1432:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <pos_i+0x1>
    1436:	40 91 f2 01 	lds	r20, 0x01F2	; 0x8001f2 <pos_i+0x2>
    143a:	50 91 f3 01 	lds	r21, 0x01F3	; 0x8001f3 <pos_i+0x3>
    143e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__muluhisi3>
    1442:	24 e1       	ldi	r18, 0x14	; 20
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__divmodsi4>
    144e:	29 01       	movw	r4, r18
    1450:	3a 01       	movw	r6, r20
    1452:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <Kp>
    1456:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <Kp+0x1>
    145a:	a7 01       	movw	r20, r14
    145c:	96 01       	movw	r18, r12
    145e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__muluhisi3>
    1462:	24 e1       	ldi	r18, 0x14	; 20
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__divmodsi4>
    146e:	42 0e       	add	r4, r18
    1470:	53 1e       	adc	r5, r19
    1472:	64 1e       	adc	r6, r20
    1474:	75 1e       	adc	r7, r21
    1476:	a7 01       	movw	r20, r14
    1478:	96 01       	movw	r18, r12
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	ab 81       	ldd	r26, Y+3	; 0x03
    1480:	bc 81       	ldd	r27, Y+4	; 0x04
    1482:	28 1b       	sub	r18, r24
    1484:	39 0b       	sbc	r19, r25
    1486:	4a 0b       	sbc	r20, r26
    1488:	5b 0b       	sbc	r21, r27
    148a:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <Kd>
    148e:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <Kd+0x1>
    1492:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__muluhisi3>
    1496:	24 e1       	ldi	r18, 0x14	; 20
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__divmodsi4>
    14a2:	42 0e       	add	r4, r18
    14a4:	53 1e       	adc	r5, r19
    14a6:	64 1e       	adc	r6, r20
    14a8:	75 1e       	adc	r7, r21
    14aa:	91 e8       	ldi	r25, 0x81	; 129
    14ac:	49 16       	cp	r4, r25
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	59 06       	cpc	r5, r25
    14b2:	61 04       	cpc	r6, r1
    14b4:	71 04       	cpc	r7, r1
    14b6:	34 f0       	brlt	.+12     	; 0x14c4 <motor_control_tick+0x426>
    14b8:	41 2c       	mov	r4, r1
    14ba:	51 2c       	mov	r5, r1
    14bc:	32 01       	movw	r6, r4
    14be:	68 94       	set
    14c0:	47 f8       	bld	r4, 7
    14c2:	53 94       	inc	r5
    14c4:	a0 e8       	ldi	r26, 0x80	; 128
    14c6:	4a 16       	cp	r4, r26
    14c8:	ae ef       	ldi	r26, 0xFE	; 254
    14ca:	5a 06       	cpc	r5, r26
    14cc:	af ef       	ldi	r26, 0xFF	; 255
    14ce:	6a 06       	cpc	r6, r26
    14d0:	7a 06       	cpc	r7, r26
    14d2:	4c f4       	brge	.+18     	; 0x14e6 <motor_control_tick+0x448>
    14d4:	0f 2e       	mov	r0, r31
    14d6:	f0 e8       	ldi	r31, 0x80	; 128
    14d8:	4f 2e       	mov	r4, r31
    14da:	fe ef       	ldi	r31, 0xFE	; 254
    14dc:	5f 2e       	mov	r5, r31
    14de:	66 24       	eor	r6, r6
    14e0:	6a 94       	dec	r6
    14e2:	76 2c       	mov	r7, r6
    14e4:	f0 2d       	mov	r31, r0
    14e6:	50 92 eb 01 	sts	0x01EB, r5	; 0x8001eb <motor_power+0x1>
    14ea:	40 92 ea 01 	sts	0x01EA, r4	; 0x8001ea <motor_power>
    14ee:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <av>
    14f2:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <av+0x1>
    14f6:	9c 01       	movw	r18, r24
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	22 0f       	add	r18, r18
    1502:	33 1f       	adc	r19, r19
    1504:	82 0f       	add	r24, r18
    1506:	93 1f       	adc	r25, r19
    1508:	6a e0       	ldi	r22, 0x0A	; 10
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__divmodhi4>
    1510:	7b 01       	movw	r14, r22
    1512:	0e 94 81 01 	call	0x302	; 0x302 <get_encoder_velocity>
    1516:	6a e0       	ldi	r22, 0x0A	; 10
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__divmodhi4>
    151e:	e6 0e       	add	r14, r22
    1520:	f7 1e       	adc	r15, r23
    1522:	f0 92 ff 01 	sts	0x01FF, r15	; 0x8001ff <av+0x1>
    1526:	e0 92 fe 01 	sts	0x01FE, r14	; 0x8001fe <av>
    152a:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <motor_power+0x1>
    152e:	8f 93       	push	r24
    1530:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <motor_power>
    1534:	8f 93       	push	r24
    1536:	9f 92       	push	r9
    1538:	8f 92       	push	r8
    153a:	8c ec       	ldi	r24, 0xCC	; 204
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	9f 93       	push	r25
    1540:	8f 93       	push	r24
    1542:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tprintf>
    1546:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <pid_runs>
    154a:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <pid_runs+0x1>
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <pid_runs+0x1>
    1554:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <pid_runs>
    1558:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PID_due>
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0e 94 00 08 	call	0x1000	; 0x1000 <get_motor_limit_switch_state>
    156c:	f8 2e       	mov	r15, r24
    156e:	80 ff       	sbrs	r24, 0
    1570:	27 c0       	rjmp	.+78     	; 0x15c0 <motor_control_tick+0x522>
    1572:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <motor_mode>
    1576:	82 ff       	sbrs	r24, 2
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <motor_control_tick+0x4e2>
    157a:	8b 7f       	andi	r24, 0xFB	; 251
    157c:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <motor_mode>
    1580:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <motor_target_pos>
    1584:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <motor_target_pos+0x1>
    1588:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <motor_target_pos+0x2>
    158c:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <motor_target_pos+0x3>
    1590:	bb 23       	and	r27, r27
    1592:	44 f4       	brge	.+16     	; 0x15a4 <motor_control_tick+0x506>
    1594:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <motor_target_pos>
    1598:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <motor_target_pos+0x1>
    159c:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <motor_target_pos+0x2>
    15a0:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <motor_target_pos+0x3>
    15a4:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <motor_power>
    15a8:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <motor_power+0x1>
    15ac:	99 23       	and	r25, r25
    15ae:	44 f4       	brge	.+16     	; 0x15c0 <motor_control_tick+0x522>
    15b0:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <motor_power+0x1>
    15b4:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <motor_power>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 cb 06 	call	0xd96	; 0xd96 <set_motor_power_raw>
    15c0:	f1 fe       	sbrs	r15, 1
    15c2:	18 c0       	rjmp	.+48     	; 0x15f4 <motor_control_tick+0x556>
    15c4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <reset_encoder>
    15c8:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <motor_mode>
    15cc:	82 ff       	sbrs	r24, 2
    15ce:	03 c0       	rjmp	.+6      	; 0x15d6 <motor_control_tick+0x538>
    15d0:	8b 7f       	andi	r24, 0xFB	; 251
    15d2:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <motor_mode>
    15d6:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <motor_power>
    15da:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <motor_power+0x1>
    15de:	18 16       	cp	r1, r24
    15e0:	19 06       	cpc	r1, r25
    15e2:	44 f4       	brge	.+16     	; 0x15f4 <motor_control_tick+0x556>
    15e4:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <motor_power+0x1>
    15e8:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <motor_power>
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 cb 06 	call	0xd96	; 0xd96 <set_motor_power_raw>
    15f4:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <motor_power>
    15f8:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <motor_power+0x1>
    15fc:	91 95       	neg	r25
    15fe:	81 95       	neg	r24
    1600:	91 09       	sbc	r25, r1
    1602:	0e 94 cb 06 	call	0xd96	; 0xd96 <set_motor_power_raw>
    1606:	03 c0       	rjmp	.+6      	; 0x160e <motor_control_tick+0x570>
    1608:	64 9b       	sbis	0x0c, 4	; 12
    160a:	a7 cd       	rjmp	.-1202   	; 0x115a <motor_control_tick+0xbc>
    160c:	b4 cd       	rjmp	.-1176   	; 0x1176 <motor_control_tick+0xd8>
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	df 90       	pop	r13
    1624:	cf 90       	pop	r12
    1626:	bf 90       	pop	r11
    1628:	af 90       	pop	r10
    162a:	9f 90       	pop	r9
    162c:	8f 90       	pop	r8
    162e:	7f 90       	pop	r7
    1630:	6f 90       	pop	r6
    1632:	5f 90       	pop	r5
    1634:	4f 90       	pop	r4
    1636:	08 95       	ret

00001638 <set_motor_reverse>:

void set_motor_reverse(uint8_t r){
	reverse = r;
    1638:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <reverse>
    163c:	08 95       	ret

0000163e <write_PWM>:
  uint8_t pin: The pin to set the PWM on (PE3, PE4, PE5)
  uint16_t pwm: 10-bit PWM value
*/
//void write_PWM(uint8_t port, uint8_t pin, uint16_t pwm){
void write_PWM(uint8_t pin, uint16_t pwm){
	pwm &= 1023;
    163e:	73 70       	andi	r23, 0x03	; 3
	switch(pin){
    1640:	84 30       	cpi	r24, 0x04	; 4
    1642:	71 f0       	breq	.+28     	; 0x1660 <write_PWM+0x22>
    1644:	85 30       	cpi	r24, 0x05	; 5
    1646:	b1 f0       	breq	.+44     	; 0x1674 <write_PWM+0x36>
    1648:	83 30       	cpi	r24, 0x03	; 3
    164a:	e9 f4       	brne	.+58     	; 0x1686 <write_PWM+0x48>
		case PE3:
			TCCR3A |= (1 << COM3A1);
    164c:	e0 e9       	ldi	r30, 0x90	; 144
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	80 68       	ori	r24, 0x80	; 128
    1654:	80 83       	st	Z, r24
			OCR3A = pwm;
    1656:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
    165a:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
			break;
    165e:	08 95       	ret
		case PE4:
			TCCR3A |= (1 << COM3B1);
    1660:	e0 e9       	ldi	r30, 0x90	; 144
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 62       	ori	r24, 0x20	; 32
    1668:	80 83       	st	Z, r24
			OCR3B = pwm;
    166a:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7f809b>
    166e:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7f809a>
			break;
    1672:	08 95       	ret
		case PE5:
			TCCR3A |= (1 << COM3C1);
    1674:	e0 e9       	ldi	r30, 0x90	; 144
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	88 60       	ori	r24, 0x08	; 8
    167c:	80 83       	st	Z, r24
			OCR3C = pwm;
    167e:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__TEXT_REGION_LENGTH__+0x7f809d>
    1682:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x7f809c>
    1686:	08 95       	ret

00001688 <init_servo>:
#include <config.h>
#include <servo.h>

#ifdef REV_2
void init_servo(){
	DDRB |= 1<<6;
    1688:	26 9a       	sbi	0x04, 6	; 4
	TCCR1A |= (1 << COM1B1);
    168a:	e0 e8       	ldi	r30, 0x80	; 128
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 62       	ori	r24, 0x20	; 32
    1692:	80 83       	st	Z, r24
//	TCCR1A &= ~(1 << COM1B0);
	OCR1B = 375;
    1694:	87 e7       	ldi	r24, 0x77	; 119
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    169c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    16a0:	08 95       	ret

000016a2 <set_servo_position>:
}

void set_servo_position(int degrees){
    16a2:	84 3b       	cpi	r24, 0xB4	; 180
    16a4:	91 05       	cpc	r25, r1
    16a6:	14 f0       	brlt	.+4      	; 0x16ac <set_servo_position+0xa>
    16a8:	83 eb       	ldi	r24, 0xB3	; 179
    16aa:	90 e0       	ldi	r25, 0x00	; 0
	if(degrees > 179) degrees = 179;
	if(degrees < 1) degrees = 1;
    16ac:	18 16       	cp	r1, r24
    16ae:	19 06       	cpc	r1, r25
    16b0:	14 f0       	brlt	.+4      	; 0x16b6 <set_servo_position+0x14>
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
	OCR1B = 250 + degrees + degrees / 3;
    16b6:	9c 01       	movw	r18, r24
    16b8:	26 50       	subi	r18, 0x06	; 6
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	63 e0       	ldi	r22, 0x03	; 3
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__divmodhi4>
    16c4:	62 0f       	add	r22, r18
    16c6:	73 1f       	adc	r23, r19
    16c8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    16cc:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    16d0:	08 95       	ret

000016d2 <__vector_15>:
	#ifdef REV_2
	return (TOF_Cnt * 20000) + (timer_ticks << 2);
	#else
	return (TOF_Cnt * 40000) + (timer_ticks << 2);
	#endif
}
    16d2:	1f 92       	push	r1
    16d4:	0f 92       	push	r0
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	0f 92       	push	r0
    16da:	11 24       	eor	r1, r1
    16dc:	2f 93       	push	r18
    16de:	3f 93       	push	r19
    16e0:	4f 93       	push	r20
    16e2:	5f 93       	push	r21
    16e4:	6f 93       	push	r22
    16e6:	7f 93       	push	r23
    16e8:	8f 93       	push	r24
    16ea:	9f 93       	push	r25
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
    16f0:	ef 93       	push	r30
    16f2:	ff 93       	push	r31
    16f4:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TOF_Cnt>
    16f8:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TOF_Cnt+0x1>
    16fc:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <TOF_Cnt+0x2>
    1700:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <TOF_Cnt+0x3>
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	a1 1d       	adc	r26, r1
    1708:	b1 1d       	adc	r27, r1
    170a:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <TOF_Cnt>
    170e:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <TOF_Cnt+0x1>
    1712:	a0 93 1c 02 	sts	0x021C, r26	; 0x80021c <TOF_Cnt+0x2>
    1716:	b0 93 1d 02 	sts	0x021D, r27	; 0x80021d <TOF_Cnt+0x3>
    171a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TOF_Cnt>
    171e:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TOF_Cnt+0x1>
    1722:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <TOF_Cnt+0x2>
    1726:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <TOF_Cnt+0x3>
    172a:	87 70       	andi	r24, 0x07	; 7
    172c:	99 27       	eor	r25, r25
    172e:	aa 27       	eor	r26, r26
    1730:	bb 27       	eor	r27, r27
    1732:	89 2b       	or	r24, r25
    1734:	8a 2b       	or	r24, r26
    1736:	8b 2b       	or	r24, r27
    1738:	51 f4       	brne	.+20     	; 0x174e <__vector_15+0x7c>
    173a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TOF_Cnt>
    173e:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TOF_Cnt+0x1>
    1742:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <TOF_Cnt+0x2>
    1746:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <TOF_Cnt+0x3>
    174a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <update_LEDS>
    174e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TOF_Cnt>
    1752:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TOF_Cnt+0x1>
    1756:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <TOF_Cnt+0x2>
    175a:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <TOF_Cnt+0x3>
    175e:	80 fd       	sbrc	r24, 0
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <__vector_15+0x96>
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <PID_due>
    1768:	ff 91       	pop	r31
    176a:	ef 91       	pop	r30
    176c:	bf 91       	pop	r27
    176e:	af 91       	pop	r26
    1770:	9f 91       	pop	r25
    1772:	8f 91       	pop	r24
    1774:	7f 91       	pop	r23
    1776:	6f 91       	pop	r22
    1778:	5f 91       	pop	r21
    177a:	4f 91       	pop	r20
    177c:	3f 91       	pop	r19
    177e:	2f 91       	pop	r18
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	0f 90       	pop	r0
    1786:	1f 90       	pop	r1
    1788:	18 95       	reti

0000178a <setup_timers>:
    178a:	83 e4       	ldi	r24, 0x43	; 67
    178c:	84 bd       	out	0x24, r24	; 36
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1794:	9b e1       	ldi	r25, 0x1B	; 27
    1796:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    179a:	93 e0       	ldi	r25, 0x03	; 3
    179c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    17a0:	28 e8       	ldi	r18, 0x88	; 136
    17a2:	33 e1       	ldi	r19, 0x13	; 19
    17a4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    17a8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    17ac:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    17b0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    17b4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    17b8:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    17bc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    17c0:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <TOF_Cnt>
    17c4:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <TOF_Cnt+0x1>
    17c8:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <TOF_Cnt+0x2>
    17cc:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <TOF_Cnt+0x3>
    17d0:	08 95       	ret

000017d2 <get_mS>:
    17d2:	cf 92       	push	r12
    17d4:	df 92       	push	r13
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    17de:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    17e2:	c0 90 1a 02 	lds	r12, 0x021A	; 0x80021a <TOF_Cnt>
    17e6:	d0 90 1b 02 	lds	r13, 0x021B	; 0x80021b <TOF_Cnt+0x1>
    17ea:	e0 90 1c 02 	lds	r14, 0x021C	; 0x80021c <TOF_Cnt+0x2>
    17ee:	f0 90 1d 02 	lds	r15, 0x021D	; 0x80021d <TOF_Cnt+0x3>
    17f2:	cc 0c       	add	r12, r12
    17f4:	dd 1c       	adc	r13, r13
    17f6:	ee 1c       	adc	r14, r14
    17f8:	ff 1c       	adc	r15, r15
    17fa:	cc 0c       	add	r12, r12
    17fc:	dd 1c       	adc	r13, r13
    17fe:	ee 1c       	adc	r14, r14
    1800:	ff 1c       	adc	r15, r15
    1802:	d7 01       	movw	r26, r14
    1804:	c6 01       	movw	r24, r12
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	aa 1f       	adc	r26, r26
    180c:	bb 1f       	adc	r27, r27
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	aa 1f       	adc	r26, r26
    1814:	bb 1f       	adc	r27, r27
    1816:	c8 0e       	add	r12, r24
    1818:	d9 1e       	adc	r13, r25
    181a:	ea 1e       	adc	r14, r26
    181c:	fb 1e       	adc	r15, r27
    181e:	36 95       	lsr	r19
    1820:	27 95       	ror	r18
    1822:	a3 e1       	ldi	r26, 0x13	; 19
    1824:	b3 e8       	ldi	r27, 0x83	; 131
    1826:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__umulhisi3>
    182a:	00 24       	eor	r0, r0
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	00 1c       	adc	r0, r0
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	00 1c       	adc	r0, r0
    1838:	89 2f       	mov	r24, r25
    183a:	90 2d       	mov	r25, r0
    183c:	a7 01       	movw	r20, r14
    183e:	96 01       	movw	r18, r12
    1840:	28 0f       	add	r18, r24
    1842:	39 1f       	adc	r19, r25
    1844:	41 1d       	adc	r20, r1
    1846:	51 1d       	adc	r21, r1
    1848:	ca 01       	movw	r24, r20
    184a:	b9 01       	movw	r22, r18
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	df 90       	pop	r13
    1852:	cf 90       	pop	r12
    1854:	08 95       	ret

00001856 <delay_mS>:

/*delay for the specified number of milliseconds*/
void delay_mS(uint16_t mS){
    1856:	8f 92       	push	r8
    1858:	9f 92       	push	r9
    185a:	af 92       	push	r10
    185c:	bf 92       	push	r11
    185e:	cf 92       	push	r12
    1860:	df 92       	push	r13
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	6c 01       	movw	r12, r24
	uint32_t start = get_mS();
    1868:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <get_mS>
    186c:	4b 01       	movw	r8, r22
    186e:	5c 01       	movw	r10, r24
	while(get_mS() - start < mS);
    1870:	e1 2c       	mov	r14, r1
    1872:	f1 2c       	mov	r15, r1
    1874:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <get_mS>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	88 19       	sub	r24, r8
    187e:	99 09       	sbc	r25, r9
    1880:	aa 09       	sbc	r26, r10
    1882:	bb 09       	sbc	r27, r11
    1884:	8c 15       	cp	r24, r12
    1886:	9d 05       	cpc	r25, r13
    1888:	ae 05       	cpc	r26, r14
    188a:	bf 05       	cpc	r27, r15
    188c:	98 f3       	brcs	.-26     	; 0x1874 <delay_mS+0x1e>
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	df 90       	pop	r13
    1894:	cf 90       	pop	r12
    1896:	bf 90       	pop	r11
    1898:	af 90       	pop	r10
    189a:	9f 90       	pop	r9
    189c:	8f 90       	pop	r8
    189e:	08 95       	ret

000018a0 <__vector_32>:
}

/*Returns the number of bytes waiting in the USART receive buffer*/
int usart_available(){
	return rxbp;
}
    18a0:	1f 92       	push	r1
    18a2:	0f 92       	push	r0
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	0f 92       	push	r0
    18a8:	11 24       	eor	r1, r1
    18aa:	8f 93       	push	r24
    18ac:	ef 93       	push	r30
    18ae:	ff 93       	push	r31
    18b0:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <rxbp>
    18b4:	81 31       	cpi	r24, 0x11	; 17
    18b6:	20 f0       	brcs	.+8      	; 0x18c0 <__vector_32+0x20>
    18b8:	80 e1       	ldi	r24, 0x10	; 16
    18ba:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <rxbp>
    18be:	0c c0       	rjmp	.+24     	; 0x18d8 <__vector_32+0x38>
    18c0:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <rxbp>
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	8e 0f       	add	r24, r30
    18c8:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <rxbp>
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    18d2:	e0 5d       	subi	r30, 0xD0	; 208
    18d4:	fd 4f       	sbci	r31, 0xFD	; 253
    18d6:	80 83       	st	Z, r24
    18d8:	ff 91       	pop	r31
    18da:	ef 91       	pop	r30
    18dc:	8f 91       	pop	r24
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <__vector_33>:
    18e8:	1f 92       	push	r1
    18ea:	0f 92       	push	r0
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	0f 92       	push	r0
    18f0:	11 24       	eor	r1, r1
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	ef 93       	push	r30
    18f8:	ff 93       	push	r31
    18fa:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <txbp>
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	8e 0f       	add	r24, r30
    1902:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <txbp>
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	e2 5e       	subi	r30, 0xE2	; 226
    190a:	fd 4f       	sbci	r31, 0xFD	; 253
    190c:	80 81       	ld	r24, Z
    190e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    1912:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <txbp>
    1916:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    191a:	98 17       	cp	r25, r24
    191c:	20 f4       	brcc	.+8      	; 0x1926 <__vector_33+0x3e>
    191e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <txbp>
    1922:	81 31       	cpi	r24, 0x11	; 17
    1924:	48 f0       	brcs	.+18     	; 0x1938 <__vector_33+0x50>
    1926:	e9 ec       	ldi	r30, 0xC9	; 201
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8f 7d       	andi	r24, 0xDF	; 223
    192e:	80 83       	st	Z, r24
    1930:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <txend>
    1934:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <txbp>
    1938:	ff 91       	pop	r31
    193a:	ef 91       	pop	r30
    193c:	9f 91       	pop	r25
    193e:	8f 91       	pop	r24
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <usart_write>:
    194a:	af 92       	push	r10
    194c:	bf 92       	push	r11
    194e:	cf 92       	push	r12
    1950:	df 92       	push	r13
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	1f 92       	push	r1
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	5c 01       	movw	r10, r24
    1964:	16 2f       	mov	r17, r22
    1966:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    196a:	88 23       	and	r24, r24
    196c:	29 f0       	breq	.+10     	; 0x1978 <usart_write+0x2e>
    196e:	e9 ec       	ldi	r30, 0xC9	; 201
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	80 62       	ori	r24, 0x20	; 32
    1976:	80 83       	st	Z, r24
    1978:	11 23       	and	r17, r17
    197a:	a9 f1       	breq	.+106    	; 0x19e6 <usart_write+0x9c>
    197c:	68 94       	set
    197e:	cc 24       	eor	r12, r12
    1980:	c4 f8       	bld	r12, 4
    1982:	d1 2c       	mov	r13, r1
    1984:	0f 2e       	mov	r0, r31
    1986:	f9 ec       	ldi	r31, 0xC9	; 201
    1988:	ef 2e       	mov	r14, r31
    198a:	f1 2c       	mov	r15, r1
    198c:	f0 2d       	mov	r31, r0
    198e:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    1992:	8f 30       	cpi	r24, 0x0F	; 15
    1994:	e0 f7       	brcc	.-8      	; 0x198e <usart_write+0x44>
    1996:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    199a:	21 2f       	mov	r18, r17
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	b6 01       	movw	r22, r12
    19a4:	68 1b       	sub	r22, r24
    19a6:	71 09       	sbc	r23, r1
    19a8:	07 2e       	mov	r0, r23
    19aa:	00 0c       	add	r0, r0
    19ac:	88 0b       	sbc	r24, r24
    19ae:	99 0b       	sbc	r25, r25
    19b0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <min>
    19b4:	69 83       	std	Y+1, r22	; 0x01
    19b6:	49 81       	ldd	r20, Y+1	; 0x01
    19b8:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	b5 01       	movw	r22, r10
    19c2:	82 5e       	subi	r24, 0xE2	; 226
    19c4:	9d 4f       	sbci	r25, 0xFD	; 253
    19c6:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <memcpy>
    19ca:	99 81       	ldd	r25, Y+1	; 0x01
    19cc:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    19d0:	89 0f       	add	r24, r25
    19d2:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <txend>
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	18 1b       	sub	r17, r24
    19da:	f7 01       	movw	r30, r14
    19dc:	80 81       	ld	r24, Z
    19de:	80 62       	ori	r24, 0x20	; 32
    19e0:	80 83       	st	Z, r24
    19e2:	11 11       	cpse	r17, r1
    19e4:	d4 cf       	rjmp	.-88     	; 0x198e <usart_write+0x44>
    19e6:	0f 90       	pop	r0
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
    19f6:	bf 90       	pop	r11
    19f8:	af 90       	pop	r10
    19fa:	08 95       	ret

000019fc <usart_init>:
    19fc:	9b 01       	movw	r18, r22
    19fe:	ac 01       	movw	r20, r24
    1a00:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <rxbp>
    1a04:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <txend>
    1a08:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <txbp>
    1a0c:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
    1a10:	60 e4       	ldi	r22, 0x40	; 64
    1a12:	72 e4       	ldi	r23, 0x42	; 66
    1a14:	8f e0       	ldi	r24, 0x0F	; 15
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__udivmodsi4>
    1a1c:	21 50       	subi	r18, 0x01	; 1
    1a1e:	31 09       	sbc	r19, r1
    1a20:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
    1a24:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
    1a28:	86 e0       	ldi	r24, 0x06	; 6
    1a2a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
    1a2e:	88 e9       	ldi	r24, 0x98	; 152
    1a30:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
    1a34:	08 95       	ret

00001a36 <usart_write_char>:
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	1f 92       	push	r1
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	8a 30       	cpi	r24, 0x0A	; 10
    1a44:	19 f4       	brne	.+6      	; 0x1a4c <usart_write_char+0x16>
    1a46:	8d e0       	ldi	r24, 0x0D	; 13
    1a48:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <usart_write_char>
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	ce 01       	movw	r24, r28
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	0e 94 a5 0c 	call	0x194a	; 0x194a <usart_write>
    1a56:	0f 90       	pop	r0
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	08 95       	ret

00001a5e <usart_write_string>:
    1a5e:	fc 01       	movw	r30, r24
    1a60:	01 90       	ld	r0, Z+
    1a62:	00 20       	and	r0, r0
    1a64:	e9 f7       	brne	.-6      	; 0x1a60 <usart_write_string+0x2>
    1a66:	31 97       	sbiw	r30, 0x01	; 1
    1a68:	bf 01       	movw	r22, r30
    1a6a:	68 1b       	sub	r22, r24
    1a6c:	79 0b       	sbc	r23, r25
    1a6e:	0e 94 a5 0c 	call	0x194a	; 0x194a <usart_write>
    1a72:	08 95       	ret

00001a74 <tprintf>:

/*Tiny implementation of prinf()*/
void tprintf(const char *fmt, ...){
    1a74:	2f 92       	push	r2
    1a76:	3f 92       	push	r3
    1a78:	4f 92       	push	r4
    1a7a:	5f 92       	push	r5
    1a7c:	6f 92       	push	r6
    1a7e:	7f 92       	push	r7
    1a80:	8f 92       	push	r8
    1a82:	9f 92       	push	r9
    1a84:	af 92       	push	r10
    1a86:	bf 92       	push	r11
    1a88:	cf 92       	push	r12
    1a8a:	df 92       	push	r13
    1a8c:	ef 92       	push	r14
    1a8e:	ff 92       	push	r15
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	2b 97       	sbiw	r28, 0x0b	; 11
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	b0 96       	adiw	r30, 0x20	; 32
    1aac:	e1 90       	ld	r14, Z+
    1aae:	f1 90       	ld	r15, Z+
	va_list va;
	va_start(va, fmt);
    1ab0:	6f 01       	movw	r12, r30
	int i = 0;
	int32_t l;
	char buf[9],c;
	for(i = 0;c=fmt[i];i++){
    1ab2:	f7 01       	movw	r30, r14
    1ab4:	b0 80       	ld	r11, Z
    1ab6:	bb 20       	and	r11, r11
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <tprintf+0x48>
    1aba:	d2 c0       	rjmp	.+420    	; 0x1c60 <tprintf+0x1ec>
    1abc:	00 e0       	ldi	r16, 0x00	; 0
    1abe:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1ac0:	0f 2e       	mov	r0, r31
    1ac2:	f0 e1       	ldi	r31, 0x10	; 16
    1ac4:	4f 2e       	mov	r4, r31
    1ac6:	f7 e2       	ldi	r31, 0x27	; 39
    1ac8:	5f 2e       	mov	r5, r31
    1aca:	61 2c       	mov	r6, r1
    1acc:	71 2c       	mov	r7, r1
    1ace:	f0 2d       	mov	r31, r0
		if(c != '%'){
    1ad0:	f5 e2       	ldi	r31, 0x25	; 37
    1ad2:	bf 16       	cp	r11, r31
    1ad4:	d1 f0       	breq	.+52     	; 0x1b0a <tprintf+0x96>
			usart_write_char(c);
    1ad6:	8b 2d       	mov	r24, r11
    1ad8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <usart_write_char>
		}
	if(c == '\\'){
    1adc:	2c e5       	ldi	r18, 0x5C	; 92
    1ade:	b2 12       	cpse	r11, r18
    1ae0:	b7 c0       	rjmp	.+366    	; 0x1c50 <tprintf+0x1dc>
		c = fmt[++i];
    1ae2:	0f 5f       	subi	r16, 0xFF	; 255
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	f7 01       	movw	r30, r14
    1ae8:	e0 0f       	add	r30, r16
    1aea:	f1 1f       	adc	r31, r17
    1aec:	80 81       	ld	r24, Z
		switch(c){
    1aee:	8a 30       	cpi	r24, 0x0A	; 10
    1af0:	29 f0       	breq	.+10     	; 0x1afc <tprintf+0x88>
    1af2:	8c 35       	cpi	r24, 0x5C	; 92
    1af4:	39 f4       	brne	.+14     	; 0x1b04 <tprintf+0x90>
			case '\\':
				usart_write_char('\\');
    1af6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <usart_write_char>
				break;
    1afa:	aa c0       	rjmp	.+340    	; 0x1c50 <tprintf+0x1dc>
			case '\n':
				usart_write_char('\n');
    1afc:	8a e0       	ldi	r24, 0x0A	; 10
    1afe:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <usart_write_char>
				break;
    1b02:	a6 c0       	rjmp	.+332    	; 0x1c50 <tprintf+0x1dc>
		}
	}
	if(c == '%'){
    1b04:	85 32       	cpi	r24, 0x25	; 37
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <tprintf+0x96>
    1b08:	a3 c0       	rjmp	.+326    	; 0x1c50 <tprintf+0x1dc>
		c=fmt[++i];
    1b0a:	0f 5f       	subi	r16, 0xFF	; 255
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	f7 01       	movw	r30, r14
    1b10:	e0 0f       	add	r30, r16
    1b12:	f1 1f       	adc	r31, r17
		switch(c){
    1b14:	80 81       	ld	r24, Z
    1b16:	84 36       	cpi	r24, 0x64	; 100
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <tprintf+0xa8>
    1b1a:	75 c0       	rjmp	.+234    	; 0x1c06 <tprintf+0x192>
    1b1c:	38 f4       	brcc	.+14     	; 0x1b2c <tprintf+0xb8>
    1b1e:	88 35       	cpi	r24, 0x58	; 88
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <tprintf+0xb0>
    1b22:	5e c0       	rjmp	.+188    	; 0x1be0 <tprintf+0x16c>
    1b24:	83 36       	cpi	r24, 0x63	; 99
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <tprintf+0xb6>
    1b28:	88 c0       	rjmp	.+272    	; 0x1c3a <tprintf+0x1c6>
    1b2a:	8f c0       	rjmp	.+286    	; 0x1c4a <tprintf+0x1d6>
    1b2c:	8c 36       	cpi	r24, 0x6C	; 108
    1b2e:	21 f0       	breq	.+8      	; 0x1b38 <tprintf+0xc4>
    1b30:	83 37       	cpi	r24, 0x73	; 115
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <tprintf+0xc2>
    1b34:	79 c0       	rjmp	.+242    	; 0x1c28 <tprintf+0x1b4>
    1b36:	89 c0       	rjmp	.+274    	; 0x1c4a <tprintf+0x1d6>
			case 'l':
				l = va_arg(va, int32_t);
    1b38:	c6 01       	movw	r24, r12
    1b3a:	04 96       	adiw	r24, 0x04	; 4
    1b3c:	9b 87       	std	Y+11, r25	; 0x0b
    1b3e:	8a 87       	std	Y+10, r24	; 0x0a
    1b40:	f6 01       	movw	r30, r12
    1b42:	80 80       	ld	r8, Z
    1b44:	91 80       	ldd	r9, Z+1	; 0x01
    1b46:	a2 80       	ldd	r10, Z+2	; 0x02
    1b48:	b3 80       	ldd	r11, Z+3	; 0x03
				if(l > 32767){
    1b4a:	81 14       	cp	r8, r1
    1b4c:	f0 e8       	ldi	r31, 0x80	; 128
    1b4e:	9f 06       	cpc	r9, r31
    1b50:	a1 04       	cpc	r10, r1
    1b52:	b1 04       	cpc	r11, r1
    1b54:	bc f1       	brlt	.+110    	; 0x1bc4 <tprintf+0x150>
    1b56:	c5 01       	movw	r24, r10
    1b58:	b4 01       	movw	r22, r8
    1b5a:	a3 01       	movw	r20, r6
    1b5c:	92 01       	movw	r18, r4
    1b5e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__divmodsi4>
    1b62:	49 01       	movw	r8, r18
    1b64:	5a 01       	movw	r10, r20
    1b66:	c6 2e       	mov	r12, r22
    1b68:	d7 2e       	mov	r13, r23
    1b6a:	28 2e       	mov	r2, r24
    1b6c:	39 2e       	mov	r3, r25
    1b6e:	4a e0       	ldi	r20, 0x0A	; 10
    1b70:	be 01       	movw	r22, r28
    1b72:	6f 5f       	subi	r22, 0xFF	; 255
    1b74:	7f 4f       	sbci	r23, 0xFF	; 255
    1b76:	c4 01       	movw	r24, r8
    1b78:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__itoa_ncheck>
					itoa(l/10000, buf, 10);
					usart_write_string(buf);
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <usart_write_string>
					l %= 10000;
    1b84:	8c 2c       	mov	r8, r12
    1b86:	9d 2c       	mov	r9, r13
    1b88:	a2 2c       	mov	r10, r2
    1b8a:	b3 2c       	mov	r11, r3
					if(l < 1000){
    1b8c:	28 ee       	ldi	r18, 0xE8	; 232
    1b8e:	82 16       	cp	r8, r18
    1b90:	23 e0       	ldi	r18, 0x03	; 3
    1b92:	92 06       	cpc	r9, r18
    1b94:	a1 04       	cpc	r10, r1
    1b96:	b1 04       	cpc	r11, r1
    1b98:	1c f4       	brge	.+6      	; 0x1ba0 <tprintf+0x12c>
						usart_write_char('0');
    1b9a:	80 e3       	ldi	r24, 0x30	; 48
    1b9c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <usart_write_char>
					}
					if(l < 100){
    1ba0:	84 e6       	ldi	r24, 0x64	; 100
    1ba2:	88 16       	cp	r8, r24
    1ba4:	91 04       	cpc	r9, r1
    1ba6:	a1 04       	cpc	r10, r1
    1ba8:	b1 04       	cpc	r11, r1
    1baa:	1c f4       	brge	.+6      	; 0x1bb2 <tprintf+0x13e>
						usart_write_char('0');
    1bac:	80 e3       	ldi	r24, 0x30	; 48
    1bae:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <usart_write_char>
					}
					if(l < 10){
    1bb2:	9a e0       	ldi	r25, 0x0A	; 10
    1bb4:	89 16       	cp	r8, r25
    1bb6:	91 04       	cpc	r9, r1
    1bb8:	a1 04       	cpc	r10, r1
    1bba:	b1 04       	cpc	r11, r1
    1bbc:	1c f4       	brge	.+6      	; 0x1bc4 <tprintf+0x150>
						usart_write_char('0');
    1bbe:	80 e3       	ldi	r24, 0x30	; 48
    1bc0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <usart_write_char>
    1bc4:	4a e0       	ldi	r20, 0x0A	; 10
    1bc6:	be 01       	movw	r22, r28
    1bc8:	6f 5f       	subi	r22, 0xFF	; 255
    1bca:	7f 4f       	sbci	r23, 0xFF	; 255
    1bcc:	c4 01       	movw	r24, r8
    1bce:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__itoa_ncheck>
					}
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	01 96       	adiw	r24, 0x01	; 1
    1bd6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <usart_write_string>
	}
	if(c == '%'){
		c=fmt[++i];
		switch(c){
			case 'l':
				l = va_arg(va, int32_t);
    1bda:	ca 84       	ldd	r12, Y+10	; 0x0a
    1bdc:	db 84       	ldd	r13, Y+11	; 0x0b
						usart_write_char('0');
					}
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
				break;
    1bde:	38 c0       	rjmp	.+112    	; 0x1c50 <tprintf+0x1dc>
			case 'X':
				itoa(va_arg(va, int32_t), buf, 16);
    1be0:	56 01       	movw	r10, r12
    1be2:	e4 e0       	ldi	r30, 0x04	; 4
    1be4:	ae 0e       	add	r10, r30
    1be6:	b1 1c       	adc	r11, r1
    1be8:	40 e1       	ldi	r20, 0x10	; 16
    1bea:	be 01       	movw	r22, r28
    1bec:	6f 5f       	subi	r22, 0xFF	; 255
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	f6 01       	movw	r30, r12
    1bf2:	80 81       	ld	r24, Z
    1bf4:	91 81       	ldd	r25, Z+1	; 0x01
    1bf6:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__itoa_ncheck>
				usart_write_string(buf);
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	01 96       	adiw	r24, 0x01	; 1
    1bfe:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <usart_write_string>
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
				break;
			case 'X':
				itoa(va_arg(va, int32_t), buf, 16);
    1c02:	65 01       	movw	r12, r10
				usart_write_string(buf);
				break;
    1c04:	25 c0       	rjmp	.+74     	; 0x1c50 <tprintf+0x1dc>
			case 'd':
				itoa(va_arg(va, int), buf, 10);
    1c06:	f6 01       	movw	r30, r12
    1c08:	4a e0       	ldi	r20, 0x0A	; 10
    1c0a:	be 01       	movw	r22, r28
    1c0c:	6f 5f       	subi	r22, 0xFF	; 255
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
    1c14:	f2 e0       	ldi	r31, 0x02	; 2
    1c16:	cf 0e       	add	r12, r31
    1c18:	d1 1c       	adc	r13, r1
    1c1a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__itoa_ncheck>
				usart_write_string(buf);
    1c1e:	ce 01       	movw	r24, r28
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <usart_write_string>
				break;
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <tprintf+0x1dc>
			case 's':
				usart_write_string(va_arg(va, char*));
    1c28:	f6 01       	movw	r30, r12
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
    1c2e:	22 e0       	ldi	r18, 0x02	; 2
    1c30:	c2 0e       	add	r12, r18
    1c32:	d1 1c       	adc	r13, r1
    1c34:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <usart_write_string>
				break;
    1c38:	0b c0       	rjmp	.+22     	; 0x1c50 <tprintf+0x1dc>
			case 'c':
				usart_write_char(va_arg(va, int));
    1c3a:	f6 01       	movw	r30, r12
    1c3c:	80 81       	ld	r24, Z
    1c3e:	92 e0       	ldi	r25, 0x02	; 2
    1c40:	c9 0e       	add	r12, r25
    1c42:	d1 1c       	adc	r13, r1
    1c44:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <usart_write_char>
				break;
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <tprintf+0x1dc>
			default:
				usart_write_char('?');
    1c4a:	8f e3       	ldi	r24, 0x3F	; 63
    1c4c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <usart_write_char>
	va_list va;
	va_start(va, fmt);
	int i = 0;
	int32_t l;
	char buf[9],c;
	for(i = 0;c=fmt[i];i++){
    1c50:	0f 5f       	subi	r16, 0xFF	; 255
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	f7 01       	movw	r30, r14
    1c56:	e0 0f       	add	r30, r16
    1c58:	f1 1f       	adc	r31, r17
    1c5a:	b0 80       	ld	r11, Z
    1c5c:	b1 10       	cpse	r11, r1
    1c5e:	38 cf       	rjmp	.-400    	; 0x1ad0 <tprintf+0x5c>
				usart_write_char('?');
				break;
			}
		}
	}
    1c60:	2b 96       	adiw	r28, 0x0b	; 11
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	bf 90       	pop	r11
    1c7e:	af 90       	pop	r10
    1c80:	9f 90       	pop	r9
    1c82:	8f 90       	pop	r8
    1c84:	7f 90       	pop	r7
    1c86:	6f 90       	pop	r6
    1c88:	5f 90       	pop	r5
    1c8a:	4f 90       	pop	r4
    1c8c:	3f 90       	pop	r3
    1c8e:	2f 90       	pop	r2
    1c90:	08 95       	ret

00001c92 <min>:
Returns:
the number of encoder ticks
*/
int16_t deg_to_ticks(int16_t d){
	return ((int32_t)d * (int32_t)ticks_per_degree_x10) / 10L;
}
    1c92:	62 17       	cp	r22, r18
    1c94:	73 07       	cpc	r23, r19
    1c96:	84 07       	cpc	r24, r20
    1c98:	95 07       	cpc	r25, r21
    1c9a:	14 f4       	brge	.+4      	; 0x1ca0 <min+0xe>
    1c9c:	9b 01       	movw	r18, r22
    1c9e:	ac 01       	movw	r20, r24
    1ca0:	ca 01       	movw	r24, r20
    1ca2:	b9 01       	movw	r22, r18
    1ca4:	08 95       	ret

00001ca6 <set_LED>:
    1ca6:	84 30       	cpi	r24, 0x04	; 4
    1ca8:	f8 f4       	brcc	.+62     	; 0x1ce8 <set_LED+0x42>
    1caa:	64 30       	cpi	r22, 0x04	; 4
    1cac:	e8 f4       	brcc	.+58     	; 0x1ce8 <set_LED+0x42>
    1cae:	9f ef       	ldi	r25, 0xFF	; 255
    1cb0:	96 0f       	add	r25, r22
    1cb2:	92 30       	cpi	r25, 0x02	; 2
    1cb4:	18 f4       	brcc	.+6      	; 0x1cbc <set_LED+0x16>
    1cb6:	93 e0       	ldi	r25, 0x03	; 3
    1cb8:	96 1b       	sub	r25, r22
    1cba:	69 2f       	mov	r22, r25
    1cbc:	88 0f       	add	r24, r24
    1cbe:	23 e0       	ldi	r18, 0x03	; 3
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	08 2e       	mov	r0, r24
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <set_LED+0x24>
    1cc6:	22 0f       	add	r18, r18
    1cc8:	33 1f       	adc	r19, r19
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <set_LED+0x20>
    1cce:	20 95       	com	r18
    1cd0:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <LED_states>
    1cd4:	29 23       	and	r18, r25
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <set_LED+0x38>
    1cda:	66 0f       	add	r22, r22
    1cdc:	77 1f       	adc	r23, r23
    1cde:	8a 95       	dec	r24
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <set_LED+0x34>
    1ce2:	62 2b       	or	r22, r18
    1ce4:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <LED_states>
    1ce8:	08 95       	ret

00001cea <int_abs>:
    1cea:	99 23       	and	r25, r25
    1cec:	1c f4       	brge	.+6      	; 0x1cf4 <int_abs+0xa>
    1cee:	91 95       	neg	r25
    1cf0:	81 95       	neg	r24
    1cf2:	91 09       	sbc	r25, r1
    1cf4:	08 95       	ret

00001cf6 <update_LEDS>:
    1cf6:	ef 92       	push	r14
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	8c 01       	movw	r16, r24
    1d04:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <LED_states>
    1d08:	91 11       	cpse	r25, r1
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <update_LEDS+0x1a>
    1d0c:	12 b8       	out	0x02, r1	; 2
    1d0e:	3d c0       	rjmp	.+122    	; 0x1d8a <update_LEDS+0x94>
    1d10:	16 95       	lsr	r17
    1d12:	07 95       	ror	r16
    1d14:	e4 e0       	ldi	r30, 0x04	; 4
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	c0 e0       	ldi	r28, 0x00	; 0
    1d1a:	d0 e0       	ldi	r29, 0x00	; 0
    1d1c:	ee 24       	eor	r14, r14
    1d1e:	e3 94       	inc	r14
    1d20:	f1 2c       	mov	r15, r1
    1d22:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <LED_states>
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	0c 2e       	mov	r0, r28
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <update_LEDS+0x3a>
    1d2c:	35 95       	asr	r19
    1d2e:	27 95       	ror	r18
    1d30:	0a 94       	dec	r0
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <update_LEDS+0x36>
    1d34:	23 70       	andi	r18, 0x03	; 3
    1d36:	69 f0       	breq	.+26     	; 0x1d52 <update_LEDS+0x5c>
    1d38:	62 2f       	mov	r22, r18
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	66 0f       	add	r22, r22
    1d3e:	77 1f       	adc	r23, r23
    1d40:	6f 5f       	subi	r22, 0xFF	; 255
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
    1d44:	c8 01       	movw	r24, r16
    1d46:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__udivmodhi4>
    1d4a:	89 2b       	or	r24, r25
    1d4c:	79 f0       	breq	.+30     	; 0x1d6c <update_LEDS+0x76>
    1d4e:	23 30       	cpi	r18, 0x03	; 3
    1d50:	69 f0       	breq	.+26     	; 0x1d6c <update_LEDS+0x76>
    1d52:	92 b1       	in	r25, 0x02	; 2
    1d54:	97 01       	movw	r18, r14
    1d56:	0e 2e       	mov	r0, r30
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <update_LEDS+0x68>
    1d5a:	22 0f       	add	r18, r18
    1d5c:	33 1f       	adc	r19, r19
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <update_LEDS+0x64>
    1d62:	82 2f       	mov	r24, r18
    1d64:	80 95       	com	r24
    1d66:	89 23       	and	r24, r25
    1d68:	82 b9       	out	0x02, r24	; 2
    1d6a:	0a c0       	rjmp	.+20     	; 0x1d80 <update_LEDS+0x8a>
    1d6c:	22 b1       	in	r18, 0x02	; 2
    1d6e:	c7 01       	movw	r24, r14
    1d70:	0e 2e       	mov	r0, r30
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <update_LEDS+0x82>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	0a 94       	dec	r0
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <update_LEDS+0x7e>
    1d7c:	82 2b       	or	r24, r18
    1d7e:	82 b9       	out	0x02, r24	; 2
    1d80:	22 96       	adiw	r28, 0x02	; 2
    1d82:	31 96       	adiw	r30, 0x01	; 1
    1d84:	e8 30       	cpi	r30, 0x08	; 8
    1d86:	f1 05       	cpc	r31, r1
    1d88:	61 f6       	brne	.-104    	; 0x1d22 <update_LEDS+0x2c>
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	08 95       	ret

00001d98 <set_ticks_per_10degrees>:
/*Sets a new ratio of ticks to degrees.
Parameters:
uint16_t tpd: the number of encoder ticks in 10 degrees of rotation
*/
void set_ticks_per_10degrees(uint16_t tpd){
	ticks_per_degree_x10 = tpd;
    1d98:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ticks_per_degree_x10+0x1>
    1d9c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ticks_per_degree_x10>
    1da0:	08 95       	ret

00001da2 <__udivmodhi4>:
    1da2:	aa 1b       	sub	r26, r26
    1da4:	bb 1b       	sub	r27, r27
    1da6:	51 e1       	ldi	r21, 0x11	; 17
    1da8:	07 c0       	rjmp	.+14     	; 0x1db8 <__udivmodhi4_ep>

00001daa <__udivmodhi4_loop>:
    1daa:	aa 1f       	adc	r26, r26
    1dac:	bb 1f       	adc	r27, r27
    1dae:	a6 17       	cp	r26, r22
    1db0:	b7 07       	cpc	r27, r23
    1db2:	10 f0       	brcs	.+4      	; 0x1db8 <__udivmodhi4_ep>
    1db4:	a6 1b       	sub	r26, r22
    1db6:	b7 0b       	sbc	r27, r23

00001db8 <__udivmodhi4_ep>:
    1db8:	88 1f       	adc	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	5a 95       	dec	r21
    1dbe:	a9 f7       	brne	.-22     	; 0x1daa <__udivmodhi4_loop>
    1dc0:	80 95       	com	r24
    1dc2:	90 95       	com	r25
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	08 95       	ret

00001dca <__divmodhi4>:
    1dca:	97 fb       	bst	r25, 7
    1dcc:	07 2e       	mov	r0, r23
    1dce:	16 f4       	brtc	.+4      	; 0x1dd4 <__divmodhi4+0xa>
    1dd0:	00 94       	com	r0
    1dd2:	07 d0       	rcall	.+14     	; 0x1de2 <__divmodhi4_neg1>
    1dd4:	77 fd       	sbrc	r23, 7
    1dd6:	09 d0       	rcall	.+18     	; 0x1dea <__divmodhi4_neg2>
    1dd8:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__udivmodhi4>
    1ddc:	07 fc       	sbrc	r0, 7
    1dde:	05 d0       	rcall	.+10     	; 0x1dea <__divmodhi4_neg2>
    1de0:	3e f4       	brtc	.+14     	; 0x1df0 <__divmodhi4_exit>

00001de2 <__divmodhi4_neg1>:
    1de2:	90 95       	com	r25
    1de4:	81 95       	neg	r24
    1de6:	9f 4f       	sbci	r25, 0xFF	; 255
    1de8:	08 95       	ret

00001dea <__divmodhi4_neg2>:
    1dea:	70 95       	com	r23
    1dec:	61 95       	neg	r22
    1dee:	7f 4f       	sbci	r23, 0xFF	; 255

00001df0 <__divmodhi4_exit>:
    1df0:	08 95       	ret

00001df2 <__udivmodsi4>:
    1df2:	a1 e2       	ldi	r26, 0x21	; 33
    1df4:	1a 2e       	mov	r1, r26
    1df6:	aa 1b       	sub	r26, r26
    1df8:	bb 1b       	sub	r27, r27
    1dfa:	fd 01       	movw	r30, r26
    1dfc:	0d c0       	rjmp	.+26     	; 0x1e18 <__udivmodsi4_ep>

00001dfe <__udivmodsi4_loop>:
    1dfe:	aa 1f       	adc	r26, r26
    1e00:	bb 1f       	adc	r27, r27
    1e02:	ee 1f       	adc	r30, r30
    1e04:	ff 1f       	adc	r31, r31
    1e06:	a2 17       	cp	r26, r18
    1e08:	b3 07       	cpc	r27, r19
    1e0a:	e4 07       	cpc	r30, r20
    1e0c:	f5 07       	cpc	r31, r21
    1e0e:	20 f0       	brcs	.+8      	; 0x1e18 <__udivmodsi4_ep>
    1e10:	a2 1b       	sub	r26, r18
    1e12:	b3 0b       	sbc	r27, r19
    1e14:	e4 0b       	sbc	r30, r20
    1e16:	f5 0b       	sbc	r31, r21

00001e18 <__udivmodsi4_ep>:
    1e18:	66 1f       	adc	r22, r22
    1e1a:	77 1f       	adc	r23, r23
    1e1c:	88 1f       	adc	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	1a 94       	dec	r1
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <__udivmodsi4_loop>
    1e24:	60 95       	com	r22
    1e26:	70 95       	com	r23
    1e28:	80 95       	com	r24
    1e2a:	90 95       	com	r25
    1e2c:	9b 01       	movw	r18, r22
    1e2e:	ac 01       	movw	r20, r24
    1e30:	bd 01       	movw	r22, r26
    1e32:	cf 01       	movw	r24, r30
    1e34:	08 95       	ret

00001e36 <__divmodsi4>:
    1e36:	05 2e       	mov	r0, r21
    1e38:	97 fb       	bst	r25, 7
    1e3a:	1e f4       	brtc	.+6      	; 0x1e42 <__divmodsi4+0xc>
    1e3c:	00 94       	com	r0
    1e3e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__negsi2>
    1e42:	57 fd       	sbrc	r21, 7
    1e44:	07 d0       	rcall	.+14     	; 0x1e54 <__divmodsi4_neg2>
    1e46:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__udivmodsi4>
    1e4a:	07 fc       	sbrc	r0, 7
    1e4c:	03 d0       	rcall	.+6      	; 0x1e54 <__divmodsi4_neg2>
    1e4e:	4e f4       	brtc	.+18     	; 0x1e62 <__divmodsi4_exit>
    1e50:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__negsi2>

00001e54 <__divmodsi4_neg2>:
    1e54:	50 95       	com	r21
    1e56:	40 95       	com	r20
    1e58:	30 95       	com	r19
    1e5a:	21 95       	neg	r18
    1e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5e:	4f 4f       	sbci	r20, 0xFF	; 255
    1e60:	5f 4f       	sbci	r21, 0xFF	; 255

00001e62 <__divmodsi4_exit>:
    1e62:	08 95       	ret

00001e64 <__negsi2>:
    1e64:	90 95       	com	r25
    1e66:	80 95       	com	r24
    1e68:	70 95       	com	r23
    1e6a:	61 95       	neg	r22
    1e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e70:	9f 4f       	sbci	r25, 0xFF	; 255
    1e72:	08 95       	ret

00001e74 <__umulhisi3>:
    1e74:	a2 9f       	mul	r26, r18
    1e76:	b0 01       	movw	r22, r0
    1e78:	b3 9f       	mul	r27, r19
    1e7a:	c0 01       	movw	r24, r0
    1e7c:	a3 9f       	mul	r26, r19
    1e7e:	70 0d       	add	r23, r0
    1e80:	81 1d       	adc	r24, r1
    1e82:	11 24       	eor	r1, r1
    1e84:	91 1d       	adc	r25, r1
    1e86:	b2 9f       	mul	r27, r18
    1e88:	70 0d       	add	r23, r0
    1e8a:	81 1d       	adc	r24, r1
    1e8c:	11 24       	eor	r1, r1
    1e8e:	91 1d       	adc	r25, r1
    1e90:	08 95       	ret

00001e92 <__muluhisi3>:
    1e92:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__umulhisi3>
    1e96:	a5 9f       	mul	r26, r21
    1e98:	90 0d       	add	r25, r0
    1e9a:	b4 9f       	mul	r27, r20
    1e9c:	90 0d       	add	r25, r0
    1e9e:	a4 9f       	mul	r26, r20
    1ea0:	80 0d       	add	r24, r0
    1ea2:	91 1d       	adc	r25, r1
    1ea4:	11 24       	eor	r1, r1
    1ea6:	08 95       	ret

00001ea8 <memcpy>:
    1ea8:	fb 01       	movw	r30, r22
    1eaa:	dc 01       	movw	r26, r24
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <memcpy+0xa>
    1eae:	01 90       	ld	r0, Z+
    1eb0:	0d 92       	st	X+, r0
    1eb2:	41 50       	subi	r20, 0x01	; 1
    1eb4:	50 40       	sbci	r21, 0x00	; 0
    1eb6:	d8 f7       	brcc	.-10     	; 0x1eae <memcpy+0x6>
    1eb8:	08 95       	ret

00001eba <__itoa_ncheck>:
    1eba:	bb 27       	eor	r27, r27
    1ebc:	4a 30       	cpi	r20, 0x0A	; 10
    1ebe:	31 f4       	brne	.+12     	; 0x1ecc <__itoa_ncheck+0x12>
    1ec0:	99 23       	and	r25, r25
    1ec2:	22 f4       	brpl	.+8      	; 0x1ecc <__itoa_ncheck+0x12>
    1ec4:	bd e2       	ldi	r27, 0x2D	; 45
    1ec6:	90 95       	com	r25
    1ec8:	81 95       	neg	r24
    1eca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ecc:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__utoa_common>

00001ed0 <__utoa_ncheck>:
    1ed0:	bb 27       	eor	r27, r27

00001ed2 <__utoa_common>:
    1ed2:	fb 01       	movw	r30, r22
    1ed4:	55 27       	eor	r21, r21
    1ed6:	aa 27       	eor	r26, r26
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	aa 1f       	adc	r26, r26
    1ede:	a4 17       	cp	r26, r20
    1ee0:	10 f0       	brcs	.+4      	; 0x1ee6 <__utoa_common+0x14>
    1ee2:	a4 1b       	sub	r26, r20
    1ee4:	83 95       	inc	r24
    1ee6:	50 51       	subi	r21, 0x10	; 16
    1ee8:	b9 f7       	brne	.-18     	; 0x1ed8 <__utoa_common+0x6>
    1eea:	a0 5d       	subi	r26, 0xD0	; 208
    1eec:	aa 33       	cpi	r26, 0x3A	; 58
    1eee:	08 f0       	brcs	.+2      	; 0x1ef2 <__utoa_common+0x20>
    1ef0:	a9 5d       	subi	r26, 0xD9	; 217
    1ef2:	a1 93       	st	Z+, r26
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	79 f7       	brne	.-34     	; 0x1ed6 <__utoa_common+0x4>
    1ef8:	b1 11       	cpse	r27, r1
    1efa:	b1 93       	st	Z+, r27
    1efc:	11 92       	st	Z+, r1
    1efe:	cb 01       	movw	r24, r22
    1f00:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <strrev>

00001f04 <strrev>:
    1f04:	dc 01       	movw	r26, r24
    1f06:	fc 01       	movw	r30, r24
    1f08:	67 2f       	mov	r22, r23
    1f0a:	71 91       	ld	r23, Z+
    1f0c:	77 23       	and	r23, r23
    1f0e:	e1 f7       	brne	.-8      	; 0x1f08 <strrev+0x4>
    1f10:	32 97       	sbiw	r30, 0x02	; 2
    1f12:	04 c0       	rjmp	.+8      	; 0x1f1c <strrev+0x18>
    1f14:	7c 91       	ld	r23, X
    1f16:	6d 93       	st	X+, r22
    1f18:	70 83       	st	Z, r23
    1f1a:	62 91       	ld	r22, -Z
    1f1c:	ae 17       	cp	r26, r30
    1f1e:	bf 07       	cpc	r27, r31
    1f20:	c8 f3       	brcs	.-14     	; 0x1f14 <strrev+0x10>
    1f22:	08 95       	ret

00001f24 <_exit>:
    1f24:	f8 94       	cli

00001f26 <__stop_program>:
    1f26:	ff cf       	rjmp	.-2      	; 0x1f26 <__stop_program>
