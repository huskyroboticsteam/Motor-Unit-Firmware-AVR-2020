
MotorControlBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015c  00800100  000022aa  0000233e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  0080025c  0080025c  0000249a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000249a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000024cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000620  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005836  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fa9  00000000  00000000  0000835e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002dc4  00000000  00000000  0000a307  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001258  00000000  00000000  0000d0cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001565  00000000  00000000  0000e324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a38  00000000  00000000  0000f889  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b0  00000000  00000000  000142c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_7>
      20:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_8>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__vector_13>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__vector_15>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_17>
      48:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__vector_18>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      80:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__vector_32>
      84:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__vector_33>
      88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	12 e0       	ldi	r17, 0x02	; 2
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea ea       	ldi	r30, 0xAA	; 170
      a8:	f2 e2       	ldi	r31, 0x22	; 34
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	ac 35       	cpi	r26, 0x5C	; 92
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	22 e0       	ldi	r18, 0x02	; 2
      b8:	ac e5       	ldi	r26, 0x5C	; 92
      ba:	b2 e0       	ldi	r27, 0x02	; 2
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a7 3c       	cpi	r26, 0xC7	; 199
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 cc 06 	call	0xd98	; 0xd98 <main>
      ca:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <init_ADC>:
#include "adc.h"
#include "timers.h"

/*Initialize the ADC and prepare it for reading*/
void init_ADC(){
	ADMUX = (1<<6); //5V VREF
      d2:	80 e4       	ldi	r24, 0x40	; 64
      d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	#if F_CPU < 10000000
	ADCSRA = (1<<ADPS2) | (1<<ADPS0); //Up to 10MHz, prescale by 32
	#else
	ADCSRA = (1<<ADPS2) | (1<<ADPS1); //For faster clocks, prescale by 64
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	86 e0       	ldi	r24, 0x06	; 6
      de:	80 83       	st	Z, r24
	#endif
	ADCSRA |= (1<<ADEN); //Enable the ADC
      e0:	80 81       	ld	r24, Z
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	80 83       	st	Z, r24
      e6:	08 95       	ret

000000e8 <read_ADC>:
  Return value:
  The 10-bit ADC result
*/
uint16_t read_ADC(uint8_t pin){
	uint8_t l,h;
	ADMUX = (ADMUX & 0xC0) | (pin & 7); //Setup ADC, preserve REFS0
      e8:	ec e7       	ldi	r30, 0x7C	; 124
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	90 81       	ld	r25, Z
      ee:	90 7c       	andi	r25, 0xC0	; 192
      f0:	87 70       	andi	r24, 0x07	; 7
      f2:	89 2b       	or	r24, r25
      f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start the conversion
      f6:	ea e7       	ldi	r30, 0x7A	; 122
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //Wait for conversion
     100:	80 81       	ld	r24, Z
     102:	86 fd       	sbrc	r24, 6
     104:	fd cf       	rjmp	.-6      	; 0x100 <read_ADC+0x18>
	l = ADCL;  //Read and return 10 bit result
     106:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	h = ADCH;
     10a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	return (h << 8)|l; 
     10e:	90 e0       	ldi	r25, 0x00	; 0
}
     110:	92 2b       	or	r25, r18
     112:	08 95       	ret

00000114 <internalAREF>:

/*Switches to the internal (2.56V) Vref*/
void internalAREF(){
	if((ADMUX & 0xC0) != 0xC0){
     114:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     118:	80 7c       	andi	r24, 0xC0	; 192
     11a:	80 3c       	cpi	r24, 0xC0	; 192
     11c:	61 f0       	breq	.+24     	; 0x136 <internalAREF+0x22>
		ADMUX |= 0xC0;
     11e:	ec e7       	ldi	r30, 0x7C	; 124
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	80 6c       	ori	r24, 0xC0	; 192
     126:	80 83       	st	Z, r24
		delay_mS(5);
     128:	85 e0       	ldi	r24, 0x05	; 5
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <delay_mS>
		read_ADC(0); //As per the datasheet, discard the first reading after changing AREF
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 74 00 	call	0xe8	; 0xe8 <read_ADC>
     136:	08 95       	ret

00000138 <detect_board>:
/*Tries to detect the board revision
Return:
1 if it is likely a revision 1 board or 2 if it is a rev. 2 board
*/
uint8_t detect_board(){
	internalAREF();
     138:	0e 94 8a 00 	call	0x114	; 0x114 <internalAREF>
	uint16_t a = read_ADC(0);
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 74 00 	call	0xe8	; 0xe8 <read_ADC>
	if(a > 384 && a < 640){
     142:	81 58       	subi	r24, 0x81	; 129
     144:	91 40       	sbci	r25, 0x01	; 1
     146:	8f 3f       	cpi	r24, 0xFF	; 255
     148:	91 05       	cpc	r25, r1
     14a:	10 f0       	brcs	.+4      	; 0x150 <detect_board+0x18>
		return 2;
	}
	return 1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	08 95       	ret
*/
uint8_t detect_board(){
	internalAREF();
	uint16_t a = read_ADC(0);
	if(a > 384 && a < 640){
		return 2;
     150:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 1;
}
     152:	08 95       	ret

00000154 <do_board_specific_setup>:

/*Does setup specific to the board
  Parameters:
  the CAN address of the board
*/
void do_board_specific_setup(uint8_t addr){
     154:	cf 93       	push	r28
     156:	c8 2f       	mov	r28, r24
		set_LED(3, 3);
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
		set_Kp(120, 0);
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	88 e7       	ldi	r24, 0x78	; 120
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <set_Kp>
		set_Ki(20, 0);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	84 e1       	ldi	r24, 0x14	; 20
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 da 08 	call	0x11b4	; 0x11b4 <set_Ki>
		set_Kd(170, 0);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	8a ea       	ldi	r24, 0xAA	; 170
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <set_Kd>
		switch(addr){
     184:	c2 30       	cpi	r28, 0x02	; 2
     186:	71 f0       	breq	.+28     	; 0x1a4 <do_board_specific_setup+0x50>
     188:	18 f4       	brcc	.+6      	; 0x190 <do_board_specific_setup+0x3c>
     18a:	cc 23       	and	r28, r28
     18c:	31 f0       	breq	.+12     	; 0x19a <do_board_specific_setup+0x46>
     18e:	1d c0       	rjmp	.+58     	; 0x1ca <do_board_specific_setup+0x76>
     190:	c3 30       	cpi	r28, 0x03	; 3
     192:	81 f0       	breq	.+32     	; 0x1b4 <do_board_specific_setup+0x60>
     194:	c6 30       	cpi	r28, 0x06	; 6
     196:	99 f0       	breq	.+38     	; 0x1be <do_board_specific_setup+0x6a>
     198:	18 c0       	rjmp	.+48     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x0: //Base rotation:
				set_ticks_per_10degrees(172);
     19a:	8c ea       	ldi	r24, 0xAC	; 172
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <set_ticks_per_10degrees>
				break;
     1a2:	13 c0       	rjmp	.+38     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x2: //Elbow
				set_motor_reverse(1);
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <set_motor_reverse>
				set_ticks_per_10degrees(85);
     1aa:	85 e5       	ldi	r24, 0x55	; 85
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 7d 10 	call	0x20fa	; 0x20fa <set_ticks_per_10degrees>
				break;
     1b2:	0b c0       	rjmp	.+22     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x3: //Forearm rotation
				set_ticks_per_10degrees(68);
     1b4:	84 e4       	ldi	r24, 0x44	; 68
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 7d 10 	call	0x20fa	; 0x20fa <set_ticks_per_10degrees>
				break;
     1bc:	06 c0       	rjmp	.+12     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x6: //Hand
				init_servo();
     1be:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <init_servo>
				set_servo_position(0);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <set_servo_position>
				break;
		}
		#ifdef REV_2
		tprintf("REV. 2 firmware\n");
		#else
		tprintf("REV. 1 firmware\n");
     1ca:	87 e0       	ldi	r24, 0x07	; 7
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	9f 93       	push	r25
     1d0:	8f 93       	push	r24
     1d2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
		#endif
		uint8_t rev = detect_board();
     1d6:	0e 94 9c 00 	call	0x138	; 0x138 <detect_board>
     1da:	c8 2f       	mov	r28, r24
		tprintf("Detecting board rev: %d\n", rev);
     1dc:	1f 92       	push	r1
     1de:	8f 93       	push	r24
     1e0:	88 e1       	ldi	r24, 0x18	; 24
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	9f 93       	push	r25
     1e6:	8f 93       	push	r24
     1e8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
			tprintf("***WARNING*** Rev. 2 firmware on Rev. 1 board\n");
			set_LED(0, 3);
			delay_mS(1000);
		}
		#else //REV 1 firmware
		if(rev == 2){
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	c2 30       	cpi	r28, 0x02	; 2
     1fa:	81 f4       	brne	.+32     	; 0x21c <do_board_specific_setup+0xc8>
			tprintf("***WARNING*** Rev. 1 firmware on Rev. 2 board\n");
     1fc:	81 e3       	ldi	r24, 0x31	; 49
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	9f 93       	push	r25
     202:	8f 93       	push	r24
     204:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
			set_LED(0, 3);
     208:	63 e0       	ldi	r22, 0x03	; 3
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
			delay_mS(1000);
     210:	88 ee       	ldi	r24, 0xE8	; 232
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <delay_mS>
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
		}
		#endif
}
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <__vector_17>:

#ifdef DEBOUNCE
volatile uint16_t lastA, lastB;
#endif

ISR(TIMER0_OVF_vect){
     220:	1f 92       	push	r1
     222:	0f 92       	push	r0
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	0f 92       	push	r0
     228:	11 24       	eor	r1, r1
     22a:	8f 93       	push	r24
     22c:	9f 93       	push	r25
	gate_control++;
     22e:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <gate_control>
     232:	8f 5f       	subi	r24, 0xFF	; 255
     234:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <gate_control>
	if(gate_control == gate_control_top){
     238:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <gate_control>
     23c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <gate_control_top>
     240:	98 13       	cpse	r25, r24
     242:	0e c0       	rjmp	.+28     	; 0x260 <__vector_17+0x40>
		raw_velocity = vticks;
     244:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <vticks>
     248:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <vticks+0x1>
     24c:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <raw_velocity+0x1>
     250:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <raw_velocity>
		vticks = gate_control = 0;
     254:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <gate_control>
     258:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <vticks+0x1>
     25c:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <vticks>
	}
}
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <get_encoder_ticks>:

/*Returns the total number of encoder ticks since the last reset*/
int32_t get_encoder_ticks(){
	//return -19;
	//return 0;
	return encoder_ticks;
     26e:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <encoder_ticks>
     272:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <encoder_ticks+0x1>
     276:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <encoder_ticks+0x2>
     27a:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <encoder_ticks+0x3>
	//return 255;
}
     27e:	08 95       	ret

00000280 <set_encoder_ticks>:

/*Sets the encoder counter to the specified value*/
void set_encoder_ticks(int32_t ticks){
	encoder_ticks = ticks;
     280:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <encoder_ticks>
     284:	70 93 66 02 	sts	0x0266, r23	; 0x800266 <encoder_ticks+0x1>
     288:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <encoder_ticks+0x2>
     28c:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <encoder_ticks+0x3>
     290:	08 95       	ret

00000292 <ticks_to_angle>:
}

int32_t ticks_to_angle(int32_t ticks){
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	9b 01       	movw	r18, r22
     29c:	ac 01       	movw	r20, r24
	return (ticks * (360L * 1000L)) / ppjr;
     29e:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     2a2:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     2a6:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     2aa:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     2ae:	60 e4       	ldi	r22, 0x40	; 64
     2b0:	7e e7       	ldi	r23, 0x7E	; 126
     2b2:	85 e0       	ldi	r24, 0x05	; 5
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 82 10 	call	0x2104	; 0x2104 <__mulsi3>
     2ba:	a7 01       	movw	r20, r14
     2bc:	96 01       	movw	r18, r12
     2be:	0e 94 ba 10 	call	0x2174	; 0x2174 <__udivmodsi4>
}
     2c2:	ca 01       	movw	r24, r20
     2c4:	b9 01       	movw	r22, r18
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	08 95       	ret

000002d0 <angle_to_ticks>:

int32_t angle_to_ticks(int32_t angle){
     2d0:	9b 01       	movw	r18, r22
     2d2:	ac 01       	movw	r20, r24
	return (angle * ppjr) / (360L * 1000L);
     2d4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2d8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     2e4:	0e 94 82 10 	call	0x2104	; 0x2104 <__mulsi3>
     2e8:	20 e4       	ldi	r18, 0x40	; 64
     2ea:	3e e7       	ldi	r19, 0x7E	; 126
     2ec:	45 e0       	ldi	r20, 0x05	; 5
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	0e 94 ba 10 	call	0x2174	; 0x2174 <__udivmodsi4>
}
     2f4:	ca 01       	movw	r24, r20
     2f6:	b9 01       	movw	r22, r18
     2f8:	08 95       	ret

000002fa <init_encoder>:

/*Initializes the encoder with A on PE6 and B on PE7*/
void init_encoder(){
	EIMSK &= 0x3F; //Disable pin change interrupts
     2fa:	8d b3       	in	r24, 0x1d	; 29
     2fc:	8f 73       	andi	r24, 0x3F	; 63
     2fe:	8d bb       	out	0x1d, r24	; 29
	DDRE &= 0x3F; //Set PE6, PE7 as inputs
     300:	8d b1       	in	r24, 0x0d	; 13
     302:	8f 73       	andi	r24, 0x3F	; 63
     304:	8d b9       	out	0x0d, r24	; 13
	PORTE |= 0xC0; //Enable pullups on PE6, PE7
     306:	8e b1       	in	r24, 0x0e	; 14
     308:	80 6c       	ori	r24, 0xC0	; 192
     30a:	8e b9       	out	0x0e, r24	; 14
	encoder_ticks = 0; //Reset count
     30c:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <encoder_ticks>
     310:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <encoder_ticks+0x1>
     314:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <encoder_ticks+0x2>
     318:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <encoder_ticks+0x3>
	gate_control_top = 24; //Short gate time
     31c:	88 e1       	ldi	r24, 0x18	; 24
     31e:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <gate_control_top>
	EICRB |= 0x50; //Enable pin change interrupt on PE6, PE7
     322:	ea e6       	ldi	r30, 0x6A	; 106
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	80 65       	ori	r24, 0x50	; 80
     32a:	80 83       	st	Z, r24
	EICRA = 0;
     32c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK |= 0xC0;
     330:	8d b3       	in	r24, 0x1d	; 29
     332:	80 6c       	ori	r24, 0xC0	; 192
     334:	8d bb       	out	0x1d, r24	; 29
     336:	08 95       	ret

00000338 <reset_encoder>:
}

/*Resets the encoder count*/
void reset_encoder(){
	EIMSK &= 0x3F; //Disable pin change interrupts
     338:	8d b3       	in	r24, 0x1d	; 29
     33a:	8f 73       	andi	r24, 0x3F	; 63
     33c:	8d bb       	out	0x1d, r24	; 29
	encoder_ticks = 0; //Reset count
     33e:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <encoder_ticks>
     342:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <encoder_ticks+0x1>
     346:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <encoder_ticks+0x2>
     34a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <encoder_ticks+0x3>
	vticks = 0;
     34e:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <vticks+0x1>
     352:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <vticks>
	raw_velocity = 0;
     356:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <raw_velocity+0x1>
     35a:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <raw_velocity>
	gate_control = 0;
     35e:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <gate_control>
	EIMSK |= 0xC0; //Enable pin change interrupt on PE6, PE7
     362:	8d b3       	in	r24, 0x1d	; 29
     364:	80 6c       	ori	r24, 0xC0	; 192
     366:	8d bb       	out	0x1d, r24	; 29
     368:	08 95       	ret

0000036a <get_encoder_velocity>:
}

/*Returns the encoder velocity in ticks/second*/
int16_t get_encoder_velocity(){
	int16_t rv = raw_velocity;
     36a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <raw_velocity>
     36e:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <raw_velocity+0x1>
	int16_t velocity;
	if(gate_control_top == 24){
     372:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <gate_control_top>
     376:	28 31       	cpi	r18, 0x18	; 24
     378:	59 f5       	brne	.+86     	; 0x3d0 <get_encoder_velocity+0x66>
		if(rv < 5 && rv > -5){ //If it's slow, increase the gate time
     37a:	9c 01       	movw	r18, r24
     37c:	2c 5f       	subi	r18, 0xFC	; 252
     37e:	3f 4f       	sbci	r19, 0xFF	; 255
     380:	29 30       	cpi	r18, 0x09	; 9
     382:	31 05       	cpc	r19, r1
     384:	18 f4       	brcc	.+6      	; 0x38c <get_encoder_velocity+0x22>
			gate_control_top = 122;
     386:	2a e7       	ldi	r18, 0x7A	; 122
     388:	20 93 5f 02 	sts	0x025F, r18	; 0x80025f <gate_control_top>
			//tprintf("GCT=122\n");
		}
		velocity = (rv * 60)/4 + old_velocity/4; //Compute velocity and low pass filter
     38c:	4c e3       	ldi	r20, 0x3C	; 60
     38e:	48 9f       	mul	r20, r24
     390:	90 01       	movw	r18, r0
     392:	49 9f       	mul	r20, r25
     394:	30 0d       	add	r19, r0
     396:	11 24       	eor	r1, r1
     398:	33 23       	and	r19, r19
     39a:	14 f4       	brge	.+4      	; 0x3a0 <get_encoder_velocity+0x36>
     39c:	2d 5f       	subi	r18, 0xFD	; 253
     39e:	3f 4f       	sbci	r19, 0xFF	; 255
     3a0:	35 95       	asr	r19
     3a2:	27 95       	ror	r18
     3a4:	35 95       	asr	r19
     3a6:	27 95       	ror	r18
     3a8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <old_velocity>
     3ac:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <old_velocity+0x1>
     3b0:	99 23       	and	r25, r25
     3b2:	0c f4       	brge	.+2      	; 0x3b6 <get_encoder_velocity+0x4c>
     3b4:	03 96       	adiw	r24, 0x03	; 3
     3b6:	95 95       	asr	r25
     3b8:	87 95       	ror	r24
     3ba:	95 95       	asr	r25
     3bc:	87 95       	ror	r24
     3be:	28 0f       	add	r18, r24
     3c0:	39 1f       	adc	r19, r25
		old_velocity = velocity;
     3c2:	30 93 5e 02 	sts	0x025E, r19	; 0x80025e <old_velocity+0x1>
     3c6:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <old_velocity>
		return velocity;
     3ca:	82 2f       	mov	r24, r18
     3cc:	93 2f       	mov	r25, r19
     3ce:	08 95       	ret
	} else if(gate_control_top == 122){ //If it's fast, decrease gate time
     3d0:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <gate_control_top>
     3d4:	2a 37       	cpi	r18, 0x7A	; 122
     3d6:	79 f5       	brne	.+94     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		if(rv > 80 || rv < -80){
     3d8:	9c 01       	movw	r18, r24
     3da:	20 5b       	subi	r18, 0xB0	; 176
     3dc:	3f 4f       	sbci	r19, 0xFF	; 255
     3de:	21 3a       	cpi	r18, 0xA1	; 161
     3e0:	31 05       	cpc	r19, r1
     3e2:	18 f0       	brcs	.+6      	; 0x3ea <get_encoder_velocity+0x80>
			gate_control_top = 24;
     3e4:	28 e1       	ldi	r18, 0x18	; 24
     3e6:	20 93 5f 02 	sts	0x025F, r18	; 0x80025f <gate_control_top>
			//tprintf("GCT=24\n");
		}
		velocity = (rv * 12)/4 + old_velocity/4; //Compute velocity and LPF
     3ea:	9c 01       	movw	r18, r24
     3ec:	22 0f       	add	r18, r18
     3ee:	33 1f       	adc	r19, r19
     3f0:	82 0f       	add	r24, r18
     3f2:	93 1f       	adc	r25, r19
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	9c 01       	movw	r18, r24
     3fe:	99 23       	and	r25, r25
     400:	14 f4       	brge	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     402:	2d 5f       	subi	r18, 0xFD	; 253
     404:	3f 4f       	sbci	r19, 0xFF	; 255
     406:	35 95       	asr	r19
     408:	27 95       	ror	r18
     40a:	35 95       	asr	r19
     40c:	27 95       	ror	r18
     40e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <old_velocity>
     412:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <old_velocity+0x1>
     416:	99 23       	and	r25, r25
     418:	0c f4       	brge	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	03 96       	adiw	r24, 0x03	; 3
     41c:	95 95       	asr	r25
     41e:	87 95       	ror	r24
     420:	95 95       	asr	r25
     422:	87 95       	ror	r24
     424:	28 0f       	add	r18, r24
     426:	39 1f       	adc	r19, r25
		old_velocity = velocity;
     428:	30 93 5e 02 	sts	0x025E, r19	; 0x80025e <old_velocity+0x1>
     42c:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <old_velocity>
		return velocity;
     430:	82 2f       	mov	r24, r18
     432:	93 2f       	mov	r25, r19
     434:	08 95       	ret
	}
	return -1;
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	9f ef       	ldi	r25, 0xFF	; 255
}
     43a:	08 95       	ret

0000043c <__vector_7>:

ISR(INT6_vect){ //PE6, A
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	0f 92       	push	r0
     444:	11 24       	eor	r1, r1
     446:	8f 93       	push	r24
     448:	9f 93       	push	r25
     44a:	af 93       	push	r26
     44c:	bf 93       	push	r27
	#ifdef DEBOUNCE
	uint16_t tc = TCNT1;
	if(tc > lastA && tc - lastA < 400) return;
	lastA = tc;
	#endif
	uint8_t state = PINE;
     44e:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE6)){ //A rising
     450:	86 ff       	sbrs	r24, 6
     452:	3c c0       	rjmp	.+120    	; 0x4cc <__vector_7+0x90>
		if(state & (1<<PE7)){ //B high
     454:	88 23       	and	r24, r24
     456:	ec f4       	brge	.+58     	; 0x492 <__vector_7+0x56>
			encoder_ticks++;
     458:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <encoder_ticks>
     45c:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <encoder_ticks+0x1>
     460:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <encoder_ticks+0x2>
     464:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <encoder_ticks+0x3>
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	a1 1d       	adc	r26, r1
     46c:	b1 1d       	adc	r27, r1
     46e:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <encoder_ticks>
     472:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <encoder_ticks+0x1>
     476:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <encoder_ticks+0x2>
     47a:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <encoder_ticks+0x3>
			vticks++;
     47e:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <vticks>
     482:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <vticks+0x1>
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <vticks+0x1>
     48c:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <vticks>
     490:	58 c0       	rjmp	.+176    	; 0x542 <__vector_7+0x106>
		} else { //B low
			encoder_ticks--;
     492:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <encoder_ticks>
     496:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <encoder_ticks+0x1>
     49a:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <encoder_ticks+0x2>
     49e:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <encoder_ticks+0x3>
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	a1 09       	sbc	r26, r1
     4a6:	b1 09       	sbc	r27, r1
     4a8:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <encoder_ticks>
     4ac:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <encoder_ticks+0x1>
     4b0:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <encoder_ticks+0x2>
     4b4:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <encoder_ticks+0x3>
			vticks--;
     4b8:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <vticks>
     4bc:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <vticks+0x1>
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <vticks+0x1>
     4c6:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <vticks>
     4ca:	3b c0       	rjmp	.+118    	; 0x542 <__vector_7+0x106>
		}
	} else { //A falling
		if(state & (1<<PE7)){ //B high
     4cc:	88 23       	and	r24, r24
     4ce:	ec f4       	brge	.+58     	; 0x50a <__vector_7+0xce>
			encoder_ticks--;
     4d0:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <encoder_ticks>
     4d4:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <encoder_ticks+0x1>
     4d8:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <encoder_ticks+0x2>
     4dc:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <encoder_ticks+0x3>
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	a1 09       	sbc	r26, r1
     4e4:	b1 09       	sbc	r27, r1
     4e6:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <encoder_ticks>
     4ea:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <encoder_ticks+0x1>
     4ee:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <encoder_ticks+0x2>
     4f2:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <encoder_ticks+0x3>
			vticks--;
     4f6:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <vticks>
     4fa:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <vticks+0x1>
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <vticks+0x1>
     504:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <vticks>
     508:	1c c0       	rjmp	.+56     	; 0x542 <__vector_7+0x106>
		} else { //B low
			encoder_ticks++;
     50a:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <encoder_ticks>
     50e:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <encoder_ticks+0x1>
     512:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <encoder_ticks+0x2>
     516:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <encoder_ticks+0x3>
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	a1 1d       	adc	r26, r1
     51e:	b1 1d       	adc	r27, r1
     520:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <encoder_ticks>
     524:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <encoder_ticks+0x1>
     528:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <encoder_ticks+0x2>
     52c:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <encoder_ticks+0x3>
			vticks++;
     530:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <vticks>
     534:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <vticks+0x1>
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <vticks+0x1>
     53e:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <vticks>
		}
	}
}
     542:	bf 91       	pop	r27
     544:	af 91       	pop	r26
     546:	9f 91       	pop	r25
     548:	8f 91       	pop	r24
     54a:	0f 90       	pop	r0
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	0f 90       	pop	r0
     550:	1f 90       	pop	r1
     552:	18 95       	reti

00000554 <__vector_8>:

ISR(INT7_vect){ //PE7, B
     554:	1f 92       	push	r1
     556:	0f 92       	push	r0
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	0f 92       	push	r0
     55c:	11 24       	eor	r1, r1
     55e:	8f 93       	push	r24
     560:	9f 93       	push	r25
     562:	af 93       	push	r26
     564:	bf 93       	push	r27
	#ifdef DEBOUNCE
	uint16_t tc = TCNT1;
	if(tc > lastB && tc - lastB < 400) return;
	lastB = tc;
	#endif
	uint8_t state = PINE;
     566:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE7)){ //B rising
     568:	88 23       	and	r24, r24
     56a:	e4 f5       	brge	.+120    	; 0x5e4 <__vector_8+0x90>
		if(state & (1<<PE6)){ //A high
     56c:	86 ff       	sbrs	r24, 6
     56e:	1d c0       	rjmp	.+58     	; 0x5aa <__vector_8+0x56>
			encoder_ticks--;
     570:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <encoder_ticks>
     574:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <encoder_ticks+0x1>
     578:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <encoder_ticks+0x2>
     57c:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <encoder_ticks+0x3>
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	a1 09       	sbc	r26, r1
     584:	b1 09       	sbc	r27, r1
     586:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <encoder_ticks>
     58a:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <encoder_ticks+0x1>
     58e:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <encoder_ticks+0x2>
     592:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <encoder_ticks+0x3>
			vticks--;
     596:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <vticks>
     59a:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <vticks+0x1>
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <vticks+0x1>
     5a4:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <vticks>
     5a8:	58 c0       	rjmp	.+176    	; 0x65a <__vector_8+0x106>
		} else { //A low
			encoder_ticks++;
     5aa:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <encoder_ticks>
     5ae:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <encoder_ticks+0x1>
     5b2:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <encoder_ticks+0x2>
     5b6:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <encoder_ticks+0x3>
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	a1 1d       	adc	r26, r1
     5be:	b1 1d       	adc	r27, r1
     5c0:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <encoder_ticks>
     5c4:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <encoder_ticks+0x1>
     5c8:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <encoder_ticks+0x2>
     5cc:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <encoder_ticks+0x3>
			vticks++;
     5d0:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <vticks>
     5d4:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <vticks+0x1>
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <vticks+0x1>
     5de:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <vticks>
     5e2:	3b c0       	rjmp	.+118    	; 0x65a <__vector_8+0x106>
		}
	} else { //B falling
		if(state & (1<<PE6)){ //A high
     5e4:	86 ff       	sbrs	r24, 6
     5e6:	1d c0       	rjmp	.+58     	; 0x622 <__vector_8+0xce>
			encoder_ticks++;
     5e8:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <encoder_ticks>
     5ec:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <encoder_ticks+0x1>
     5f0:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <encoder_ticks+0x2>
     5f4:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <encoder_ticks+0x3>
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	a1 1d       	adc	r26, r1
     5fc:	b1 1d       	adc	r27, r1
     5fe:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <encoder_ticks>
     602:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <encoder_ticks+0x1>
     606:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <encoder_ticks+0x2>
     60a:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <encoder_ticks+0x3>
			vticks++;
     60e:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <vticks>
     612:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <vticks+0x1>
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <vticks+0x1>
     61c:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <vticks>
     620:	1c c0       	rjmp	.+56     	; 0x65a <__vector_8+0x106>
		} else { //A low
			encoder_ticks--;
     622:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <encoder_ticks>
     626:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <encoder_ticks+0x1>
     62a:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <encoder_ticks+0x2>
     62e:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <encoder_ticks+0x3>
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	a1 09       	sbc	r26, r1
     636:	b1 09       	sbc	r27, r1
     638:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <encoder_ticks>
     63c:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <encoder_ticks+0x1>
     640:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <encoder_ticks+0x2>
     644:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <encoder_ticks+0x3>
			vticks--;
     648:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <vticks>
     64c:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <vticks+0x1>
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <vticks+0x1>
     656:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <vticks>
		}
	}
     65a:	bf 91       	pop	r27
     65c:	af 91       	pop	r26
     65e:	9f 91       	pop	r25
     660:	8f 91       	pop	r24
     662:	0f 90       	pop	r0
     664:	0f be       	out	0x3f, r0	; 63
     666:	0f 90       	pop	r0
     668:	1f 90       	pop	r1
     66a:	18 95       	reti

0000066c <AssembleTelemetryReportPacket>:
void AssembleTelemetryReportPacket(CANPacket *packetToAssemble, 
    uint8_t targetGroup, 
    uint8_t targetSerial,
    uint8_t telemetryTypeCode,
    int32_t data)
{
     66c:	bf 92       	push	r11
     66e:	cf 92       	push	r12
     670:	df 92       	push	r13
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	ec 01       	movw	r28, r24
     680:	b2 2e       	mov	r11, r18
     682:	67 01       	movw	r12, r14
     684:	78 01       	movw	r14, r16
    packetToAssemble->id = ConstructCANID(PACKET_PRIORITY_NORMAL, targetGroup, targetSerial);
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	0e 94 8d 03 	call	0x71a	; 0x71a <ConstructCANID>
     68c:	99 83       	std	Y+1, r25	; 0x01
     68e:	88 83       	st	Y, r24
    packetToAssemble->dlc = DLC_TELEMETRY_REPORT;
     690:	88 e0       	ldi	r24, 0x08	; 8
     692:	8a 83       	std	Y+2, r24	; 0x02
    int nextByte = WriteSenderSerialAndPacketID(packetToAssemble->data, ID_TELEMETRY_REPORT);
     694:	8e 01       	movw	r16, r28
     696:	0d 5f       	subi	r16, 0xFD	; 253
     698:	1f 4f       	sbci	r17, 0xFF	; 255
     69a:	66 ef       	ldi	r22, 0xF6	; 246
     69c:	c8 01       	movw	r24, r16
     69e:	0e 94 9d 03 	call	0x73a	; 0x73a <WriteSenderSerialAndPacketID>
    packetToAssemble->data[nextByte] = telemetryTypeCode;
     6a2:	c8 0f       	add	r28, r24
     6a4:	d9 1f       	adc	r29, r25
     6a6:	bb 82       	std	Y+3, r11	; 0x03
    PackIntIntoDataMSBFirst(packetToAssemble->data, data, nextByte + 1);
     6a8:	9c 01       	movw	r18, r24
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
     6ae:	b7 01       	movw	r22, r14
     6b0:	a6 01       	movw	r20, r12
     6b2:	c8 01       	movw	r24, r16
     6b4:	0e 94 b0 03 	call	0x760	; 0x760 <PackIntIntoDataMSBFirst>
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	bf 90       	pop	r11
     6ca:	08 95       	ret

000006cc <DecodeTelemetryDataSigned>:

int32_t DecodeTelemetryDataSigned(CANPacket *packet)
{
    return DecodeBytesToIntMSBFirst(packet->data, 4, 8);
     6cc:	48 e0       	ldi	r20, 0x08	; 8
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	64 e0       	ldi	r22, 0x04	; 4
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	03 96       	adiw	r24, 0x03	; 3
     6d6:	0e 94 b8 03 	call	0x770	; 0x770 <DecodeBytesToIntMSBFirst>
}
     6da:	08 95       	ret

000006dc <GetTelemetryTimingFromPacket>:

uint32_t DecodeTelemetryDataUnsigned(CANPacket *packet)
{
    return (uint32_t) DecodeTelemetryDataSigned(packet);
     6dc:	0e 94 66 03 	call	0x6cc	; 0x6cc <DecodeTelemetryDataSigned>
    PackIntIntoDataMSBFirst(packetToAssemble->data, msBetweenReports, nextByte + 1);
}
uint32_t GetTelemetryTimingFromPacket(CANPacket *packetToAssemble)
{
    return DecodeTelemetryDataUnsigned(packetToAssemble);
}
     6e0:	08 95       	ret

000006e2 <GetModeFromPacket>:
{
    packetToAssemble->id = ConstructCANID(PRIO_MOTOR_UNIT_ENC_PPJR_SET, targetDeviceGroup, targetDeviceSerial);
    packetToAssemble->dlc = DLC_MOTOR_UNIT_ENC_PPJR_SET;
    int nextByte = WritePacketIDOnly(packetToAssemble->data, ID_MOTOR_UNIT_ENC_PPJR_SET);
    PackIntIntoDataMSBFirst(packetToAssemble->data, pulses, nextByte);
}
     6e2:	fc 01       	movw	r30, r24
     6e4:	84 81       	ldd	r24, Z+4	; 0x04
     6e6:	08 95       	ret

000006e8 <GetPWMFromPacket>:
     6e8:	42 e0       	ldi	r20, 0x02	; 2
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	03 96       	adiw	r24, 0x03	; 3
     6f2:	0e 94 b8 03 	call	0x770	; 0x770 <DecodeBytesToIntMSBFirst>
     6f6:	08 95       	ret

000006f8 <GetPIDTargetFromPacket>:
     6f8:	45 e0       	ldi	r20, 0x05	; 5
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	03 96       	adiw	r24, 0x03	; 3
     702:	0e 94 b8 03 	call	0x770	; 0x770 <DecodeBytesToIntMSBFirst>
     706:	86 2f       	mov	r24, r22
     708:	08 95       	ret

0000070a <GetEncoderPPJRFromPacket>:

uint32_t GetEncoderPPJRFromPacket(CANPacket *packet)
{
    return DecodeBytesToIntMSBFirst(packet->data, 1, 4);
     70a:	44 e0       	ldi	r20, 0x04	; 4
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	03 96       	adiw	r24, 0x03	; 3
     714:	0e 94 b8 03 	call	0x770	; 0x770 <DecodeBytesToIntMSBFirst>
}
     718:	08 95       	ret

0000071a <ConstructCANID>:
}

void PackShortIntoDataMSBFirst(uint8_t *data, int16_t dataToPack, int startIndex)
{
	data[startIndex + 0] = (dataToPack & 0xFF00) >> 8;
	data[startIndex + 1] = (dataToPack & 0x00FF);
     71a:	6f 70       	andi	r22, 0x0F	; 15
     71c:	90 e4       	ldi	r25, 0x40	; 64
     71e:	69 9f       	mul	r22, r25
     720:	b0 01       	movw	r22, r0
     722:	11 24       	eor	r1, r1
     724:	4f 73       	andi	r20, 0x3F	; 63
     726:	64 2b       	or	r22, r20
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	38 2f       	mov	r19, r24
     72c:	33 0f       	add	r19, r19
     72e:	33 0f       	add	r19, r19
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	cb 01       	movw	r24, r22
     734:	82 2b       	or	r24, r18
     736:	93 2b       	or	r25, r19
     738:	08 95       	ret

0000073a <WriteSenderSerialAndPacketID>:
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
     740:	68 83       	st	Y, r22
     742:	0e 94 61 06 	call	0xcc2	; 0xcc2 <getLocalDeviceGroup>
     746:	89 83       	std	Y+1, r24	; 0x01
     748:	0e 94 5e 06 	call	0xcbc	; 0xcbc <getLocalDeviceSerial>
     74c:	8a 83       	std	Y+2, r24	; 0x02
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <GetPacketID>:
     758:	fc 01       	movw	r30, r24
     75a:	83 81       	ldd	r24, Z+3	; 0x03
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	08 95       	ret

00000760 <PackIntIntoDataMSBFirst>:
     760:	fc 01       	movw	r30, r24
     762:	e2 0f       	add	r30, r18
     764:	f3 1f       	adc	r31, r19
     766:	70 83       	st	Z, r23
     768:	61 83       	std	Z+1, r22	; 0x01
     76a:	52 83       	std	Z+2, r21	; 0x02
     76c:	43 83       	std	Z+3, r20	; 0x03
     76e:	08 95       	ret

00000770 <DecodeBytesToIntMSBFirst>:
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
    int length = 4;
    int32_t decodedData = 0; 

    if (endIndex > 0 && startIndex >= 0) {
     77c:	14 16       	cp	r1, r20
     77e:	15 06       	cpc	r1, r21
     780:	9c f4       	brge	.+38     	; 0x7a8 <DecodeBytesToIntMSBFirst+0x38>
     782:	77 23       	and	r23, r23
     784:	a4 f0       	brlt	.+40     	; 0x7ae <DecodeBytesToIntMSBFirst+0x3e>
        length = endIndex - startIndex + 1;
     786:	ea 01       	movw	r28, r20
     788:	c6 1b       	sub	r28, r22
     78a:	d7 0b       	sbc	r29, r23
     78c:	21 96       	adiw	r28, 0x01	; 1
     78e:	c5 30       	cpi	r28, 0x05	; 5
     790:	d1 05       	cpc	r29, r1
     792:	14 f0       	brlt	.+4      	; 0x798 <DecodeBytesToIntMSBFirst+0x28>
     794:	c4 e0       	ldi	r28, 0x04	; 4
     796:	d0 e0       	ldi	r29, 0x00	; 0
     798:	dd 23       	and	r29, r29
     79a:	14 f4       	brge	.+4      	; 0x7a0 <DecodeBytesToIntMSBFirst+0x30>
     79c:	c0 e0       	ldi	r28, 0x00	; 0
     79e:	d0 e0       	ldi	r29, 0x00	; 0
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     7a0:	1c 16       	cp	r1, r28
     7a2:	1d 06       	cpc	r1, r29
     7a4:	34 f0       	brlt	.+12     	; 0x7b2 <DecodeBytesToIntMSBFirst+0x42>
     7a6:	2d c0       	rjmp	.+90     	; 0x802 <DecodeBytesToIntMSBFirst+0x92>
     7a8:	c4 e0       	ldi	r28, 0x04	; 4
     7aa:	d0 e0       	ldi	r29, 0x00	; 0
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <DecodeBytesToIntMSBFirst+0x42>
     7ae:	c4 e0       	ldi	r28, 0x04	; 4
     7b0:	d0 e0       	ldi	r29, 0x00	; 0
     7b2:	dc 01       	movw	r26, r24
     7b4:	a6 0f       	add	r26, r22
     7b6:	b7 1f       	adc	r27, r23
     7b8:	9e 01       	movw	r18, r28
     7ba:	21 50       	subi	r18, 0x01	; 1
     7bc:	31 09       	sbc	r19, r1
     7be:	22 0f       	add	r18, r18
     7c0:	33 1f       	adc	r19, r19
     7c2:	22 0f       	add	r18, r18
     7c4:	33 1f       	adc	r19, r19
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	e0 e0       	ldi	r30, 0x00	; 0
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	c1 2c       	mov	r12, r1
     7d0:	d1 2c       	mov	r13, r1
     7d2:	76 01       	movw	r14, r12
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
     7d4:	4d 91       	ld	r20, X+
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	02 2e       	mov	r0, r18
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <DecodeBytesToIntMSBFirst+0x70>
     7dc:	44 0f       	add	r20, r20
     7de:	55 1f       	adc	r21, r21
     7e0:	0a 94       	dec	r0
     7e2:	e2 f7       	brpl	.-8      	; 0x7dc <DecodeBytesToIntMSBFirst+0x6c>
     7e4:	05 2e       	mov	r0, r21
     7e6:	00 0c       	add	r0, r0
     7e8:	66 0b       	sbc	r22, r22
     7ea:	77 0b       	sbc	r23, r23
     7ec:	c4 2a       	or	r12, r20
     7ee:	d5 2a       	or	r13, r21
     7f0:	e6 2a       	or	r14, r22
     7f2:	f7 2a       	or	r15, r23
        length = endIndex - startIndex + 1;
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     7f4:	31 96       	adiw	r30, 0x01	; 1
     7f6:	28 50       	subi	r18, 0x08	; 8
     7f8:	31 09       	sbc	r19, r1
     7fa:	ec 17       	cp	r30, r28
     7fc:	fd 07       	cpc	r31, r29
     7fe:	54 f3       	brlt	.-44     	; 0x7d4 <DecodeBytesToIntMSBFirst+0x64>
     800:	03 c0       	rjmp	.+6      	; 0x808 <DecodeBytesToIntMSBFirst+0x98>
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
    int length = 4;
    int32_t decodedData = 0; 
     802:	c1 2c       	mov	r12, r1
     804:	d1 2c       	mov	r13, r1
     806:	76 01       	movw	r14, r12
    for (int i = 0; i < length; i++) 
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
    }
    return decodedData;
}
     808:	c7 01       	movw	r24, r14
     80a:	b6 01       	movw	r22, r12
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	cf 90       	pop	r12
     818:	08 95       	ret

0000081a <disable_mob_interrupt>:
	CANPAGE = ((mob & 0x0F) << 4);
}

/*Disables the interrupt for the specified MOb*/
void disable_mob_interrupt(uint8_t mob){
	if(mob < 8){
     81a:	88 30       	cpi	r24, 0x08	; 8
     81c:	80 f4       	brcc	.+32     	; 0x83e <disable_mob_interrupt+0x24>
		CANIE2 &= ~(1 << mob);
     81e:	ee ed       	ldi	r30, 0xDE	; 222
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	40 81       	ld	r20, Z
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	b9 01       	movw	r22, r18
     82a:	02 c0       	rjmp	.+4      	; 0x830 <disable_mob_interrupt+0x16>
     82c:	66 0f       	add	r22, r22
     82e:	77 1f       	adc	r23, r23
     830:	8a 95       	dec	r24
     832:	e2 f7       	brpl	.-8      	; 0x82c <disable_mob_interrupt+0x12>
     834:	cb 01       	movw	r24, r22
     836:	80 95       	com	r24
     838:	84 23       	and	r24, r20
     83a:	80 83       	st	Z, r24
     83c:	08 95       	ret
		} else {
		CANIE1 &= ~(1 << (mob - 8));
     83e:	ef ed       	ldi	r30, 0xDF	; 223
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	40 81       	ld	r20, Z
     844:	88 50       	subi	r24, 0x08	; 8
     846:	21 e0       	ldi	r18, 0x01	; 1
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	b9 01       	movw	r22, r18
     84c:	02 c0       	rjmp	.+4      	; 0x852 <disable_mob_interrupt+0x38>
     84e:	66 0f       	add	r22, r22
     850:	77 1f       	adc	r23, r23
     852:	8a 95       	dec	r24
     854:	e2 f7       	brpl	.-8      	; 0x84e <disable_mob_interrupt+0x34>
     856:	cb 01       	movw	r24, r22
     858:	80 95       	com	r24
     85a:	84 23       	and	r24, r20
     85c:	80 83       	st	Z, r24
     85e:	08 95       	ret

00000860 <enable_mob_interrupt>:
	}
}

/*Enable the interrupt for the specified MOb*/
void enable_mob_interrupt(uint8_t mob){
	if(mob < 8){
     860:	88 30       	cpi	r24, 0x08	; 8
     862:	78 f4       	brcc	.+30     	; 0x882 <enable_mob_interrupt+0x22>
		CANIE2 |= (1 << mob);
     864:	ee ed       	ldi	r30, 0xDE	; 222
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	40 81       	ld	r20, Z
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	b9 01       	movw	r22, r18
     870:	02 c0       	rjmp	.+4      	; 0x876 <enable_mob_interrupt+0x16>
     872:	66 0f       	add	r22, r22
     874:	77 1f       	adc	r23, r23
     876:	8a 95       	dec	r24
     878:	e2 f7       	brpl	.-8      	; 0x872 <enable_mob_interrupt+0x12>
     87a:	cb 01       	movw	r24, r22
     87c:	84 2b       	or	r24, r20
     87e:	80 83       	st	Z, r24
     880:	08 95       	ret
		} else {
		CANIE1 |= (1 << (mob - 8));
     882:	ef ed       	ldi	r30, 0xDF	; 223
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	40 81       	ld	r20, Z
     888:	88 50       	subi	r24, 0x08	; 8
     88a:	21 e0       	ldi	r18, 0x01	; 1
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	b9 01       	movw	r22, r18
     890:	02 c0       	rjmp	.+4      	; 0x896 <enable_mob_interrupt+0x36>
     892:	66 0f       	add	r22, r22
     894:	77 1f       	adc	r23, r23
     896:	8a 95       	dec	r24
     898:	e2 f7       	brpl	.-8      	; 0x892 <enable_mob_interrupt+0x32>
     89a:	cb 01       	movw	r24, r22
     89c:	84 2b       	or	r24, r20
     89e:	80 83       	st	Z, r24
     8a0:	08 95       	ret

000008a2 <__vector_18>:
	}
}

/*CAN controller interrupt handler*/
ISR(CANIT_vect){
     8a2:	1f 92       	push	r1
     8a4:	0f 92       	push	r0
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	0f 92       	push	r0
     8aa:	11 24       	eor	r1, r1
     8ac:	2f 93       	push	r18
     8ae:	3f 93       	push	r19
     8b0:	4f 93       	push	r20
     8b2:	5f 93       	push	r21
     8b4:	6f 93       	push	r22
     8b6:	7f 93       	push	r23
     8b8:	8f 93       	push	r24
     8ba:	9f 93       	push	r25
     8bc:	af 93       	push	r26
     8be:	bf 93       	push	r27
     8c0:	cf 93       	push	r28
     8c2:	ef 93       	push	r30
     8c4:	ff 93       	push	r31
	uint8_t canpage = CANPAGE; //Save CAN page
     8c6:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	if((CANHPMOB & 0xF0) != 0xF0){ //Message io?
     8ca:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
     8ce:	80 7f       	andi	r24, 0xF0	; 240
     8d0:	80 3f       	cpi	r24, 0xF0	; 240
     8d2:	b1 f1       	breq	.+108    	; 0x940 <__stack+0x41>
		int mob = (CANHPMOB >> 4);
     8d4:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
     8d8:	82 95       	swap	r24
     8da:	8f 70       	andi	r24, 0x0F	; 15

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     8dc:	90 e1       	ldi	r25, 0x10	; 16
     8de:	89 9f       	mul	r24, r25
     8e0:	90 01       	movw	r18, r0
     8e2:	11 24       	eor	r1, r1
     8e4:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
ISR(CANIT_vect){
	uint8_t canpage = CANPAGE; //Save CAN page
	if((CANHPMOB & 0xF0) != 0xF0){ //Message io?
		int mob = (CANHPMOB >> 4);
		select_mob(mob);
		if(CANSTMOB & (1 << TXOK)){ //TX
     8e8:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     8ec:	96 ff       	sbrs	r25, 6
     8ee:	09 c0       	rjmp	.+18     	; 0x902 <__stack+0x3>
			/*Reset the MOb*/
			CANSTMOB &= 0;
     8f0:	ee ee       	ldi	r30, 0xEE	; 238
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	90 81       	ld	r25, Z
     8f6:	10 82       	st	Z, r1
			CANCDMOB = 0;
     8f8:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
			enable_mob_interrupt(mob);
     8fc:	0e 94 30 04 	call	0x860	; 0x860 <enable_mob_interrupt>
     900:	23 c0       	rjmp	.+70     	; 0x948 <__stack+0x49>
		} else { //RX
			msgs_av++; //Increase count of messages
     902:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <msgs_av>
     906:	9f 5f       	subi	r25, 0xFF	; 255
     908:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <msgs_av>
			rxed_mobs[!!(mob & 8)] |= (1 << (mob & 7)); // Mark which MOb has a message
     90c:	e8 2f       	mov	r30, r24
     90e:	e6 95       	lsr	r30
     910:	e6 95       	lsr	r30
     912:	e6 95       	lsr	r30
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	e6 59       	subi	r30, 0x96	; 150
     918:	fd 4f       	sbci	r31, 0xFD	; 253
     91a:	90 81       	ld	r25, Z
     91c:	48 2f       	mov	r20, r24
     91e:	47 70       	andi	r20, 0x07	; 7
     920:	21 e0       	ldi	r18, 0x01	; 1
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	4a 95       	dec	r20
     92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0x27>
     92e:	29 2b       	or	r18, r25
     930:	20 83       	st	Z, r18
			CANSTMOB &= 0; //Reset the MOb
     932:	ee ee       	ldi	r30, 0xEE	; 238
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	90 81       	ld	r25, Z
     938:	10 82       	st	Z, r1
			disable_mob_interrupt(mob);
     93a:	0e 94 0d 04 	call	0x81a	; 0x81a <disable_mob_interrupt>
     93e:	04 c0       	rjmp	.+8      	; 0x948 <__stack+0x49>
		}
	} else {
		CANGIT |= 0; //Error interrupt - Handle these?
     940:	ea ed       	ldi	r30, 0xDA	; 218
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	80 83       	st	Z, r24
	}
	CANPAGE = canpage; //restore CAN page
     948:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
}
     94c:	ff 91       	pop	r31
     94e:	ef 91       	pop	r30
     950:	cf 91       	pop	r28
     952:	bf 91       	pop	r27
     954:	af 91       	pop	r26
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	7f 91       	pop	r23
     95c:	6f 91       	pop	r22
     95e:	5f 91       	pop	r21
     960:	4f 91       	pop	r20
     962:	3f 91       	pop	r19
     964:	2f 91       	pop	r18
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f 90       	pop	r0
     96c:	1f 90       	pop	r1
     96e:	18 95       	reti

00000970 <set_mob_rx_filter>:

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     970:	9c 01       	movw	r18, r24
     972:	33 27       	eor	r19, r19
     974:	22 95       	swap	r18
     976:	32 95       	swap	r19
     978:	30 7f       	andi	r19, 0xF0	; 240
     97a:	32 27       	eor	r19, r18
     97c:	20 7f       	andi	r18, 0xF0	; 240
     97e:	32 27       	eor	r19, r18
     980:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
/*Reset the receive filter for the given MOb*/
void set_mob_rx_filter(int mob){
	select_mob(mob);
	uint16_t RX_mask = 0x3FF; // mask out priority bit, compare on everything else
	uint16_t RX_tag = 0x3F; //0th MOb is for broadcast packets, group = 0, serial = 0x3F
	if(mob > 0 && mob <= 2){ //1st und 2nd MOb is for device group broadcasts, match device group and 0x3F serial
     984:	9c 01       	movw	r18, r24
     986:	21 50       	subi	r18, 0x01	; 1
     988:	31 09       	sbc	r19, r1
     98a:	22 30       	cpi	r18, 0x02	; 2
     98c:	31 05       	cpc	r19, r1
     98e:	40 f4       	brcc	.+16     	; 0x9a0 <set_mob_rx_filter+0x30>
		RX_tag = (devGrp << 6) | 0x3F;
     990:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <devGrp>
     994:	20 e4       	ldi	r18, 0x40	; 64
     996:	82 9f       	mul	r24, r18
     998:	c0 01       	movw	r24, r0
     99a:	11 24       	eor	r1, r1
     99c:	8f 63       	ori	r24, 0x3F	; 63
     99e:	0f c0       	rjmp	.+30     	; 0x9be <set_mob_rx_filter+0x4e>
	} else if(mob > 2 && mob <= 4){ //2nd and 3rd MOb is for the device specific message. Match the whole ID
     9a0:	03 97       	sbiw	r24, 0x03	; 3
     9a2:	02 97       	sbiw	r24, 0x02	; 2
     9a4:	50 f4       	brcc	.+20     	; 0x9ba <set_mob_rx_filter+0x4a>
		RX_tag = (devGrp << 6) | devSer;
     9a6:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <devGrp>
     9aa:	20 e4       	ldi	r18, 0x40	; 64
     9ac:	82 9f       	mul	r24, r18
     9ae:	c0 01       	movw	r24, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <devSer>
     9b6:	82 2b       	or	r24, r18
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <set_mob_rx_filter+0x4e>

/*Reset the receive filter for the given MOb*/
void set_mob_rx_filter(int mob){
	select_mob(mob);
	uint16_t RX_mask = 0x3FF; // mask out priority bit, compare on everything else
	uint16_t RX_tag = 0x3F; //0th MOb is for broadcast packets, group = 0, serial = 0x3F
     9ba:	8f e3       	ldi	r24, 0x3F	; 63
     9bc:	90 e0       	ldi	r25, 0x00	; 0
		RX_tag = (devGrp << 6) | 0x3F;
	} else if(mob > 2 && mob <= 4){ //2nd and 3rd MOb is for the device specific message. Match the whole ID
		RX_tag = (devGrp << 6) | devSer;
	}

	CANIDM4 = 0;
     9be:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__DATA_REGION_ORIGIN__+0x94>
	CANIDM3 = 0;
     9c2:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__DATA_REGION_ORIGIN__+0x95>
	CANIDT4 = 0;
     9c6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
	CANIDT3 = 0;
     9ca:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	CANIDT2 = ((RX_tag & 7) << 5);
     9ce:	28 2f       	mov	r18, r24
     9d0:	22 95       	swap	r18
     9d2:	22 0f       	add	r18, r18
     9d4:	20 7e       	andi	r18, 0xE0	; 224
     9d6:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	CANIDT1 = ((RX_tag & 0x7F8) >> 3);
     9da:	88 7f       	andi	r24, 0xF8	; 248
     9dc:	97 70       	andi	r25, 0x07	; 7
     9de:	96 95       	lsr	r25
     9e0:	87 95       	ror	r24
     9e2:	96 95       	lsr	r25
     9e4:	87 95       	ror	r24
     9e6:	96 95       	lsr	r25
     9e8:	87 95       	ror	r24
     9ea:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
	CANIDM2 = ((RX_mask & 7) << 5);
     9ee:	80 ee       	ldi	r24, 0xE0	; 224
     9f0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
	CANIDM1 = ((RX_mask & 0x7F8) >> 3);
     9f4:	8f e7       	ldi	r24, 0x7F	; 127
     9f6:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
     9fa:	08 95       	ret

000009fc <init_CAN>:
Parameters:
uint32_t rate: the baud rate selection
uint8_t txmobs: how many MOBs to dedicate to transmission
uint8_t mode: The mode to operate the CAN controller in
*/
void init_CAN(uint32_t rate, uint16_t deviceGroup, uint16_t deviceSerial){
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
	CANGCON |= (1<<SWRES); //reset the CAN controller
     a0a:	e8 ed       	ldi	r30, 0xD8	; 216
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	90 81       	ld	r25, Z
     a10:	91 60       	ori	r25, 0x01	; 1
     a12:	90 83       	st	Z, r25
	devGrp = deviceGroup; //Save the device group and serial
     a14:	40 93 6d 02 	sts	0x026D, r20	; 0x80026d <devGrp>
	devSer = deviceSerial;
     a18:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <devSer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a1c:	2f ef       	ldi	r18, 0xFF	; 255
     a1e:	31 ee       	ldi	r19, 0xE1	; 225
     a20:	94 e0       	ldi	r25, 0x04	; 4
     a22:	21 50       	subi	r18, 0x01	; 1
     a24:	30 40       	sbci	r19, 0x00	; 0
     a26:	90 40       	sbci	r25, 0x00	; 0
     a28:	e1 f7       	brne	.-8      	; 0xa22 <init_CAN+0x26>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <init_CAN+0x30>
     a2c:	00 00       	nop
	_delay_ms(100); //The CAN controller is a slow bitch to reset. Twiddle our thumbs while it resets
	/*Set up the rate*/
	CANBT1 = (uint32_t)(rate & 0xFF0000L) >> 16;
     a2e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
	CANBT2 = (uint32_t)(rate & 0x00FF00L) >> 8;
     a32:	70 93 e3 00 	sts	0x00E3, r23	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
	CANBT3 = (uint32_t)(rate & 0x0000FFL);
     a36:	60 93 e4 00 	sts	0x00E4, r22	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	CANGIE = (1 << CANIT) | (1 << ENRX) | (1 << ENTX); //Enable CAN interrupts
     a3a:	80 eb       	ldi	r24, 0xB0	; 176
     a3c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	CANTCON = 255; //Set the can timer to run at 1/2048th of F_CPU
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	rxed_mobs[0] = rxed_mobs[1] = 0;
     a46:	ea e6       	ldi	r30, 0x6A	; 106
     a48:	f2 e0       	ldi	r31, 0x02	; 2
     a4a:	11 82       	std	Z+1, r1	; 0x01
     a4c:	10 82       	st	Z, r1
     a4e:	c0 e0       	ldi	r28, 0x00	; 0
     a50:	d0 e0       	ldi	r29, 0x00	; 0
			CANSTMOB &= 0;
			set_mob_rx_filter(i);
			CANCDMOB = (1 << CONMOB1); //Mark RX mobs
			enable_mob_interrupt(i); // enable the receive interrupt
		} else {
			CANCDMOB = 0; //Mark as TX MOb
     a52:	0f ee       	ldi	r16, 0xEF	; 239
     a54:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
	/*Initialize MOBs*/
	for(i = 0;i < 15;i++){
		if(i <= 4){ /*MObs <= 4 are RX mobs*/
			/*Set up the match registers*/
			CANSTMOB &= 0;
     a56:	0f 2e       	mov	r0, r31
     a58:	fe ee       	ldi	r31, 0xEE	; 238
     a5a:	ef 2e       	mov	r14, r31
     a5c:	f1 2c       	mov	r15, r1
     a5e:	f0 2d       	mov	r31, r0
			set_mob_rx_filter(i);
			CANCDMOB = (1 << CONMOB1); //Mark RX mobs
     a60:	68 94       	set
     a62:	dd 24       	eor	r13, r13
     a64:	d7 f8       	bld	r13, 7
	CANTCON = 255; //Set the can timer to run at 1/2048th of F_CPU
	rxed_mobs[0] = rxed_mobs[1] = 0;
	uint8_t i;
	/*Initialize MOBs*/
	for(i = 0;i < 15;i++){
		if(i <= 4){ /*MObs <= 4 are RX mobs*/
     a66:	c5 30       	cpi	r28, 0x05	; 5
     a68:	60 f4       	brcc	.+24     	; 0xa82 <init_CAN+0x86>
			/*Set up the match registers*/
			CANSTMOB &= 0;
     a6a:	f7 01       	movw	r30, r14
     a6c:	80 81       	ld	r24, Z
     a6e:	10 82       	st	Z, r1
			set_mob_rx_filter(i);
     a70:	ce 01       	movw	r24, r28
     a72:	0e 94 b8 04 	call	0x970	; 0x970 <set_mob_rx_filter>
			CANCDMOB = (1 << CONMOB1); //Mark RX mobs
     a76:	f8 01       	movw	r30, r16
     a78:	d0 82       	st	Z, r13
			enable_mob_interrupt(i); // enable the receive interrupt
     a7a:	8c 2f       	mov	r24, r28
     a7c:	0e 94 30 04 	call	0x860	; 0x860 <enable_mob_interrupt>
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <init_CAN+0x8a>
		} else {
			CANCDMOB = 0; //Mark as TX MOb
     a82:	f8 01       	movw	r30, r16
     a84:	10 82       	st	Z, r1
     a86:	21 96       	adiw	r28, 0x01	; 1
	CANGIE = (1 << CANIT) | (1 << ENRX) | (1 << ENTX); //Enable CAN interrupts
	CANTCON = 255; //Set the can timer to run at 1/2048th of F_CPU
	rxed_mobs[0] = rxed_mobs[1] = 0;
	uint8_t i;
	/*Initialize MOBs*/
	for(i = 0;i < 15;i++){
     a88:	cf 30       	cpi	r28, 0x0F	; 15
     a8a:	d1 05       	cpc	r29, r1
     a8c:	61 f7       	brne	.-40     	; 0xa66 <init_CAN+0x6a>
			enable_mob_interrupt(i); // enable the receive interrupt
		} else {
			CANCDMOB = 0; //Mark as TX MOb
		}
	}
	msgs_av = 0;
     a8e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <msgs_av>
	//Enable the CAN controller
	CANGCON = (1 << ENASTB);
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	08 95       	ret

00000aa8 <find_free_mob>:

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     aa8:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
		select_mob(i);
		status = CANCDMOB;
     aac:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
     ab0:	80 7c       	andi	r24, 0xC0	; 192
     ab2:	99 f0       	breq	.+38     	; 0xada <find_free_mob+0x32>
     ab4:	21 e0       	ldi	r18, 0x01	; 1
     ab6:	30 e0       	ldi	r19, 0x00	; 0

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     ab8:	ad ee       	ldi	r26, 0xED	; 237
     aba:	b0 e0       	ldi	r27, 0x00	; 0
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
		select_mob(i);
		status = CANCDMOB;
     abc:	ef ee       	ldi	r30, 0xEF	; 239
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	82 2f       	mov	r24, r18

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     ac2:	a9 01       	movw	r20, r18
     ac4:	42 95       	swap	r20
     ac6:	52 95       	swap	r21
     ac8:	50 7f       	andi	r21, 0xF0	; 240
     aca:	54 27       	eor	r21, r20
     acc:	40 7f       	andi	r20, 0xF0	; 240
     ace:	54 27       	eor	r21, r20
     ad0:	4c 93       	st	X, r20
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
		select_mob(i);
		status = CANCDMOB;
     ad2:	90 81       	ld	r25, Z
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
     ad4:	90 7c       	andi	r25, 0xC0	; 192
     ad6:	19 f4       	brne	.+6      	; 0xade <find_free_mob+0x36>
     ad8:	08 95       	ret

/*Finds a free MOb or returns -1 if they're all used*/
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
     ada:	80 e0       	ldi	r24, 0x00	; 0
		select_mob(i);
		status = CANCDMOB;
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
			return i;
     adc:	08 95       	ret
     ade:	2f 5f       	subi	r18, 0xFF	; 255
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255

/*Finds a free MOb or returns -1 if they're all used*/
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
     ae2:	2f 30       	cpi	r18, 0x0F	; 15
     ae4:	31 05       	cpc	r19, r1
     ae6:	61 f7       	brne	.-40     	; 0xac0 <find_free_mob+0x18>
		status = CANCDMOB;
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
			return i;
		}
	}
	return -1;
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
}
     aea:	08 95       	ret

00000aec <InitCAN>:


void InitCAN(int deviceGroup, int deviceAddress)
{
     aec:	9b 01       	movw	r18, r22
    init_CAN(CAN_125_BAUD, deviceGroup, deviceAddress);
     aee:	ac 01       	movw	r20, r24
     af0:	63 e1       	ldi	r22, 0x13	; 19
     af2:	74 e0       	ldi	r23, 0x04	; 4
     af4:	8e e1       	ldi	r24, 0x1E	; 30
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 fe 04 	call	0x9fc	; 0x9fc <init_CAN>
     afc:	08 95       	ret

00000afe <SendCANPacket>:
}

int SendCANPacket(CANPacket *packetToSend)
{
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ec 01       	movw	r28, r24
    uint8_t i;
	int8_t mob = find_free_mob();
     b04:	0e 94 54 05 	call	0xaa8	; 0xaa8 <find_free_mob>
	if(mob == -1){
     b08:	8f 3f       	cpi	r24, 0xFF	; 255
     b0a:	f1 f1       	breq	.+124    	; 0xb88 <SendCANPacket+0x8a>

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     b0c:	90 e1       	ldi	r25, 0x10	; 16
     b0e:	89 9f       	mul	r24, r25
     b10:	90 01       	movw	r18, r0
     b12:	11 24       	eor	r1, r1
     b14:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	int8_t mob = find_free_mob();
	if(mob == -1){
		return 0x02; //No MObs available
	}
	select_mob(mob);
	CANSTMOB &= 0;
     b18:	ee ee       	ldi	r30, 0xEE	; 238
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	90 81       	ld	r25, Z
     b1e:	10 82       	st	Z, r1
	CANCDMOB = packetToSend->dlc & 0x0F;
     b20:	9a 81       	ldd	r25, Y+2	; 0x02
     b22:	9f 70       	andi	r25, 0x0F	; 15
     b24:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
	for(i = 0;i < packetToSend->dlc && i < 8;i++){ //Copy the data into the MOb
     b28:	9a 81       	ldd	r25, Y+2	; 0x02
     b2a:	99 23       	and	r25, r25
     b2c:	69 f0       	breq	.+26     	; 0xb48 <SendCANPacket+0x4a>
     b2e:	fe 01       	movw	r30, r28
     b30:	33 96       	adiw	r30, 0x03	; 3
     b32:	90 e0       	ldi	r25, 0x00	; 0
		CANMSG = packetToSend->data[i];
     b34:	aa ef       	ldi	r26, 0xFA	; 250
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	21 91       	ld	r18, Z+
     b3a:	2c 93       	st	X, r18
		return 0x02; //No MObs available
	}
	select_mob(mob);
	CANSTMOB &= 0;
	CANCDMOB = packetToSend->dlc & 0x0F;
	for(i = 0;i < packetToSend->dlc && i < 8;i++){ //Copy the data into the MOb
     b3c:	9f 5f       	subi	r25, 0xFF	; 255
     b3e:	2a 81       	ldd	r18, Y+2	; 0x02
     b40:	92 17       	cp	r25, r18
     b42:	10 f4       	brcc	.+4      	; 0xb48 <SendCANPacket+0x4a>
     b44:	98 30       	cpi	r25, 0x08	; 8
     b46:	c1 f7       	brne	.-16     	; 0xb38 <SendCANPacket+0x3a>
		CANMSG = packetToSend->data[i];
	}
	CANIDT4 = 0; //CAN v2.0 - we don't care
     b48:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
	CANIDT3 = 0;
     b4c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	CANIDT2 = ((packetToSend->id & 7) << 5);
     b50:	98 81       	ld	r25, Y
     b52:	92 95       	swap	r25
     b54:	99 0f       	add	r25, r25
     b56:	90 7e       	andi	r25, 0xE0	; 224
     b58:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	CANIDT1 = ((packetToSend->id & 0x7F8) >> 3);
     b5c:	28 81       	ld	r18, Y
     b5e:	39 81       	ldd	r19, Y+1	; 0x01
     b60:	28 7f       	andi	r18, 0xF8	; 248
     b62:	37 70       	andi	r19, 0x07	; 7
     b64:	36 95       	lsr	r19
     b66:	27 95       	ror	r18
     b68:	36 95       	lsr	r19
     b6a:	27 95       	ror	r18
     b6c:	36 95       	lsr	r19
     b6e:	27 95       	ror	r18
     b70:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
	CANCDMOB |= (1<<CONMOB0);
     b74:	ef ee       	ldi	r30, 0xEF	; 239
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	90 81       	ld	r25, Z
     b7a:	90 64       	ori	r25, 0x40	; 64
     b7c:	90 83       	st	Z, r25
	enable_mob_interrupt(mob); //Enable MOb interrupt
     b7e:	0e 94 30 04 	call	0x860	; 0x860 <enable_mob_interrupt>
	return 0;
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <SendCANPacket+0x8e>
int SendCANPacket(CANPacket *packetToSend)
{
    uint8_t i;
	int8_t mob = find_free_mob();
	if(mob == -1){
		return 0x02; //No MObs available
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	90 e0       	ldi	r25, 0x00	; 0
	CANIDT2 = ((packetToSend->id & 7) << 5);
	CANIDT1 = ((packetToSend->id & 0x7F8) >> 3);
	CANCDMOB |= (1<<CONMOB0);
	enable_mob_interrupt(mob); //Enable MOb interrupt
	return 0;
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <PollAndReceiveCANPacket>:

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
	if(receivedPacket == NULL){
     b98:	00 97       	sbiw	r24, 0x00	; 0
     b9a:	09 f4       	brne	.+2      	; 0xb9e <PollAndReceiveCANPacket+0xc>
     b9c:	83 c0       	rjmp	.+262    	; 0xca4 <PollAndReceiveCANPacket+0x112>
	CANGCON = (1 << ENASTB);
}

/*Returns the number of CAN messages waiting*/
uint8_t inline CAN_msg_available(){
	return msgs_av;
     b9e:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <msgs_av>
	if(receivedPacket == NULL){
		return 0x02;
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
     ba2:	22 23       	and	r18, r18
     ba4:	09 f4       	brne	.+2      	; 0xba8 <PollAndReceiveCANPacket+0x16>
     ba6:	81 c0       	rjmp	.+258    	; 0xcaa <PollAndReceiveCANPacket+0x118>

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     ba8:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     bac:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <rxed_mobs>
     bb0:	20 fd       	sbrc	r18, 0
     bb2:	25 c0       	rjmp	.+74     	; 0xbfe <PollAndReceiveCANPacket+0x6c>
     bb4:	21 e0       	ldi	r18, 0x01	; 1
     bb6:	30 e0       	ldi	r19, 0x00	; 0

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     bb8:	ad ee       	ldi	r26, 0xED	; 237
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	12 2f       	mov	r17, r18
     bbe:	a9 01       	movw	r20, r18
     bc0:	42 95       	swap	r20
     bc2:	52 95       	swap	r21
     bc4:	50 7f       	andi	r21, 0xF0	; 240
     bc6:	54 27       	eor	r21, r20
     bc8:	40 7f       	andi	r20, 0xF0	; 240
     bca:	54 27       	eor	r21, r20
     bcc:	4c 93       	st	X, r20
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     bce:	23 fb       	bst	r18, 3
     bd0:	66 27       	eor	r22, r22
     bd2:	60 f9       	bld	r22, 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	fb 01       	movw	r30, r22
     bd8:	e6 59       	subi	r30, 0x96	; 150
     bda:	fd 4f       	sbci	r31, 0xFD	; 253
     bdc:	40 81       	ld	r20, Z
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	e2 2f       	mov	r30, r18
     be2:	e7 70       	andi	r30, 0x07	; 7
     be4:	02 c0       	rjmp	.+4      	; 0xbea <PollAndReceiveCANPacket+0x58>
     be6:	55 95       	asr	r21
     be8:	47 95       	ror	r20
     bea:	ea 95       	dec	r30
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <PollAndReceiveCANPacket+0x54>
     bee:	40 fd       	sbrc	r20, 0
     bf0:	07 c0       	rjmp	.+14     	; 0xc00 <PollAndReceiveCANPacket+0x6e>
     bf2:	2f 5f       	subi	r18, 0xFF	; 255
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
	if(!CAN_msg_available()){
		return 0x01;
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
     bf6:	2f 30       	cpi	r18, 0x0F	; 15
     bf8:	31 05       	cpc	r19, r1
     bfa:	01 f7       	brne	.-64     	; 0xbbc <PollAndReceiveCANPacket+0x2a>
     bfc:	59 c0       	rjmp	.+178    	; 0xcb0 <PollAndReceiveCANPacket+0x11e>
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     bfe:	10 e0       	ldi	r17, 0x00	; 0
			break;
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
     c00:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
     c04:	2f 70       	andi	r18, 0x0F	; 15
     c06:	fc 01       	movw	r30, r24
     c08:	22 83       	std	Z+2, r18	; 0x02
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
     c0a:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
     c0e:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
     c12:	32 95       	swap	r19
     c14:	36 95       	lsr	r19
     c16:	37 70       	andi	r19, 0x07	; 7
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	44 0f       	add	r20, r20
     c1c:	55 1f       	adc	r21, r21
     c1e:	44 0f       	add	r20, r20
     c20:	55 1f       	adc	r21, r21
     c22:	44 0f       	add	r20, r20
     c24:	55 1f       	adc	r21, r21
     c26:	43 2b       	or	r20, r19
     c28:	51 83       	std	Z+1, r21	; 0x01
     c2a:	40 83       	st	Z, r20
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
     c2c:	22 23       	and	r18, r18
     c2e:	91 f0       	breq	.+36     	; 0xc54 <PollAndReceiveCANPacket+0xc2>
     c30:	33 96       	adiw	r30, 0x03	; 3
     c32:	21 50       	subi	r18, 0x01	; 1
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	2c 5f       	subi	r18, 0xFC	; 252
     c38:	3f 4f       	sbci	r19, 0xFF	; 255
     c3a:	28 0f       	add	r18, r24
     c3c:	39 1f       	adc	r19, r25
     c3e:	0b 96       	adiw	r24, 0x0b	; 11
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
     c40:	aa ef       	ldi	r26, 0xFA	; 250
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	4c 91       	ld	r20, X
     c46:	41 93       	st	Z+, r20
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
     c48:	e2 17       	cp	r30, r18
     c4a:	f3 07       	cpc	r31, r19
     c4c:	19 f0       	breq	.+6      	; 0xc54 <PollAndReceiveCANPacket+0xc2>
     c4e:	8e 17       	cp	r24, r30
     c50:	9f 07       	cpc	r25, r31
     c52:	c1 f7       	brne	.-16     	; 0xc44 <PollAndReceiveCANPacket+0xb2>
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
	}
	//Atomically decrement the number of messages available
	cli();
     c54:	f8 94       	cli
	msgs_av--;
     c56:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <msgs_av>
     c5a:	81 50       	subi	r24, 0x01	; 1
     c5c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <msgs_av>
	sei();
     c60:	78 94       	sei
	/*Reset the MOb*/
	set_mob_rx_filter(mob);
     c62:	81 2f       	mov	r24, r17
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 b8 04 	call	0x970	; 0x970 <set_mob_rx_filter>
	enable_mob_interrupt(mob);
     c6a:	81 2f       	mov	r24, r17
     c6c:	0e 94 30 04 	call	0x860	; 0x860 <enable_mob_interrupt>
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
     c70:	13 fb       	bst	r17, 3
     c72:	ff 27       	eor	r31, r31
     c74:	f0 f9       	bld	r31, 0
     c76:	cf 2f       	mov	r28, r31
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	d8 2f       	mov	r29, r24
     c7c:	c6 59       	subi	r28, 0x96	; 150
     c7e:	dd 4f       	sbci	r29, 0xFD	; 253
     c80:	28 81       	ld	r18, Y
     c82:	17 70       	andi	r17, 0x07	; 7
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <PollAndReceiveCANPacket+0xfc>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	1a 95       	dec	r17
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <PollAndReceiveCANPacket+0xf8>
     c92:	80 95       	com	r24
     c94:	82 23       	and	r24, r18
     c96:	88 83       	st	Y, r24
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
     c98:	80 e8       	ldi	r24, 0x80	; 128
     c9a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
	return 0;
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	08 c0       	rjmp	.+16     	; 0xcb4 <PollAndReceiveCANPacket+0x122>
}

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
	if(receivedPacket == NULL){
		return 0x02;
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <PollAndReceiveCANPacket+0x122>
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
		return 0x01;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <PollAndReceiveCANPacket+0x122>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
	enable_mob_interrupt(mob);
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
	return 0;
    
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	08 95       	ret

00000cbc <getLocalDeviceSerial>:

uint8_t getLocalDeviceSerial()
{
    /*Return the DIP switch value*/
    return devSer;
}
     cbc:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <devSer>
     cc0:	08 95       	ret

00000cc2 <getLocalDeviceGroup>:
uint8_t getLocalDeviceGroup()
{
    //Definitely board specific.
    return devGrp; // example value (also used for testing)
}
     cc2:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <devGrp>
     cc6:	08 95       	ret

00000cc8 <get_dip_switch>:
#include "servo.h"
#include "usart.h"
#include "bss.h"

uint8_t get_dip_switch(){
	return (~PINA) & 0xF;
     cc8:	80 b1       	in	r24, 0x00	; 0
     cca:	80 95       	com	r24
}
     ccc:	8f 70       	andi	r24, 0x0F	; 15
     cce:	08 95       	ret

00000cd0 <dump_packet>:

void dump_packet(CANPacket *p){
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	6c 01       	movw	r12, r24
	tprintf("-CAN MESSAGE-\n");
     ce2:	80 e6       	ldi	r24, 0x60	; 96
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
	tprintf("ID=%X\n", p->id);
     cee:	f6 01       	movw	r30, r12
     cf0:	81 81       	ldd	r24, Z+1	; 0x01
     cf2:	8f 93       	push	r24
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 93       	push	r24
     cf8:	8f e6       	ldi	r24, 0x6F	; 111
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	9f 93       	push	r25
     cfe:	8f 93       	push	r24
     d00:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
	tprintf("DLC=%d\n", p->dlc);
     d04:	f6 01       	movw	r30, r12
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	1f 92       	push	r1
     d0a:	8f 93       	push	r24
     d0c:	86 e7       	ldi	r24, 0x76	; 118
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	9f 93       	push	r25
     d12:	8f 93       	push	r24
     d14:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
	tprintf("Data:");
     d18:	8e e7       	ldi	r24, 0x7E	; 126
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	9f 93       	push	r25
     d1e:	8f 93       	push	r24
     d20:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
	for(int i = 0;i < p->dlc;i++){
     d24:	f6 01       	movw	r30, r12
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	2d b7       	in	r18, 0x3d	; 61
     d2a:	3e b7       	in	r19, 0x3e	; 62
     d2c:	24 5f       	subi	r18, 0xF4	; 244
     d2e:	3f 4f       	sbci	r19, 0xFF	; 255
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	3e bf       	out	0x3e, r19	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	2d bf       	out	0x3d, r18	; 61
     d3a:	88 23       	and	r24, r24
     d3c:	e1 f0       	breq	.+56     	; 0xd76 <dump_packet+0xa6>
     d3e:	76 01       	movw	r14, r12
     d40:	33 e0       	ldi	r19, 0x03	; 3
     d42:	e3 0e       	add	r14, r19
     d44:	f1 1c       	adc	r15, r1
     d46:	c0 e0       	ldi	r28, 0x00	; 0
     d48:	d0 e0       	ldi	r29, 0x00	; 0
		tprintf(" %X", p->data[i]);
     d4a:	04 e8       	ldi	r16, 0x84	; 132
     d4c:	11 e0       	ldi	r17, 0x01	; 1
     d4e:	f7 01       	movw	r30, r14
     d50:	81 91       	ld	r24, Z+
     d52:	7f 01       	movw	r14, r30
     d54:	1f 92       	push	r1
     d56:	8f 93       	push	r24
     d58:	1f 93       	push	r17
     d5a:	0f 93       	push	r16
     d5c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
void dump_packet(CANPacket *p){
	tprintf("-CAN MESSAGE-\n");
	tprintf("ID=%X\n", p->id);
	tprintf("DLC=%d\n", p->dlc);
	tprintf("Data:");
	for(int i = 0;i < p->dlc;i++){
     d60:	21 96       	adiw	r28, 0x01	; 1
     d62:	f6 01       	movw	r30, r12
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	c8 17       	cp	r28, r24
     d72:	d9 07       	cpc	r29, r25
     d74:	64 f3       	brlt	.-40     	; 0xd4e <dump_packet+0x7e>
		tprintf(" %X", p->data[i]);
	}
	tprintf("\n-END CAN MESSAGE-\n");
     d76:	88 e8       	ldi	r24, 0x88	; 136
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
}
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	df 90       	pop	r13
     d94:	cf 90       	pop	r12
     d96:	08 95       	ret

00000d98 <main>:

int main(){
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	2b 97       	sbiw	r28, 0x0b	; 11
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
	CANPacket m;
	DDRA = 0xF0;
     dac:	80 ef       	ldi	r24, 0xF0	; 240
     dae:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xF0;
     db0:	82 b9       	out	0x02, r24	; 2
	setup_timers();
     db2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <setup_timers>
     db6:	2f ef       	ldi	r18, 0xFF	; 255
     db8:	81 ee       	ldi	r24, 0xE1	; 225
     dba:	94 e0       	ldi	r25, 0x04	; 4
     dbc:	21 50       	subi	r18, 0x01	; 1
     dbe:	80 40       	sbci	r24, 0x00	; 0
     dc0:	90 40       	sbci	r25, 0x00	; 0
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <main+0x24>
     dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <main+0x2e>
     dc6:	00 00       	nop
	_delay_ms(100);
	PORTA = 0;
     dc8:	12 b8       	out	0x02, r1	; 2
	set_LED(0, 3);
     dca:	63 e0       	ldi	r22, 0x03	; 3
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
	sei();
     dd2:	78 94       	sei
	usart_init(19200); //Debug serial
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	7b e4       	ldi	r23, 0x4B	; 75
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <usart_init>
	set_LED(1, 3);
     de0:	63 e0       	ldi	r22, 0x03	; 3
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
	delay_mS(666); //Delay so one can connect to debug serial
     de8:	8a e9       	ldi	r24, 0x9A	; 154
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <delay_mS>
	uint16_t my_address = get_dip_switch();
     df0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <get_dip_switch>
     df4:	f8 2e       	mov	r15, r24
	tprintf("adr=%X\n", my_address);
     df6:	c8 2e       	mov	r12, r24
     df8:	d1 2c       	mov	r13, r1
     dfa:	1f 92       	push	r1
     dfc:	8f 93       	push	r24
     dfe:	8c e9       	ldi	r24, 0x9C	; 156
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	9f 93       	push	r25
     e04:	8f 93       	push	r24
     e06:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
	delay_mS(250);
     e0a:	8a ef       	ldi	r24, 0xFA	; 250
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <delay_mS>
	InitCAN(DEVICE_GROUP_MOTOR_CONTROL, my_address);
     e12:	b6 01       	movw	r22, r12
     e14:	84 e0       	ldi	r24, 0x04	; 4
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 76 05 	call	0xaec	; 0xaec <InitCAN>
	set_LED(2, 3);
     e1c:	63 e0       	ldi	r22, 0x03	; 3
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
	init_encoder();
     e24:	0e 94 7d 01 	call	0x2fa	; 0x2fa <init_encoder>
	init_ADC();
     e28:	0e 94 69 00 	call	0xd2	; 0xd2 <init_ADC>
	do_board_specific_setup(my_address);
     e2c:	8f 2d       	mov	r24, r15
     e2e:	0e 94 aa 00 	call	0x154	; 0x154 <do_board_specific_setup>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     e32:	9f e0       	ldi	r25, 0x0F	; 15
     e34:	88 e1       	ldi	r24, 0x18	; 24
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	a8 95       	wdr
     e3c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
	wdt_enable(WDTO_2S);
	init_motor();
     e46:	0e 94 79 09 	call	0x12f2	; 0x12f2 <init_motor>
	//enable_motor();
	delay_mS(500);
     e4a:	84 ef       	ldi	r24, 0xF4	; 244
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <delay_mS>
	set_LED(0, 0);
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
	set_LED(1, 0);
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
	set_LED(3, 0);
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	83 e0       	ldi	r24, 0x03	; 3
     e66:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
	while(1){
		if(PollAndReceiveCANPacket(&m) == 0){
			set_LED(3, 3);
			update_LEDS(get_mS()/40);
     e72:	0f 2e       	mov	r0, r31
     e74:	f8 e2       	ldi	r31, 0x28	; 40
     e76:	cf 2e       	mov	r12, r31
     e78:	d1 2c       	mov	r13, r1
     e7a:	e1 2c       	mov	r14, r1
     e7c:	f1 2c       	mov	r15, r1
     e7e:	f0 2d       	mov	r31, r0
	delay_mS(500);
	set_LED(0, 0);
	set_LED(1, 0);
	set_LED(3, 0);
	while(1){
		if(PollAndReceiveCANPacket(&m) == 0){
     e80:	ce 01       	movw	r24, r28
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	0e 94 c9 05 	call	0xb92	; 0xb92 <PollAndReceiveCANPacket>
     e88:	89 2b       	or	r24, r25
     e8a:	c9 f4       	brne	.+50     	; 0xebe <main+0x126>
			set_LED(3, 3);
     e8c:	63 e0       	ldi	r22, 0x03	; 3
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
			update_LEDS(get_mS()/40);
     e94:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <get_mS>
     e98:	a7 01       	movw	r20, r14
     e9a:	96 01       	movw	r18, r12
     e9c:	0e 94 ba 10 	call	0x2174	; 0x2174 <__udivmodsi4>
     ea0:	c9 01       	movw	r24, r18
     ea2:	0e 94 2e 10 	call	0x205c	; 0x205c <update_LEDS>
			dump_packet(&m);
     ea6:	ce 01       	movw	r24, r28
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	0e 94 68 06 	call	0xcd0	; 0xcd0 <dump_packet>
			handle_CAN_message(&m);
     eae:	ce 01       	movw	r24, r28
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	0e 94 78 07 	call	0xef0	; 0xef0 <handle_CAN_message>
			set_LED(3, 0);
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
		}
		if(get_motor_mode() & MOTOR_MODE_ENABLED){
     ebe:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <get_motor_mode>
     ec2:	80 ff       	sbrs	r24, 0
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <main+0x140>
			set_LED(2, 3);
     ec6:	63 e0       	ldi	r22, 0x03	; 3
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
			set_LED(1, 0);
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
     ed6:	08 c0       	rjmp	.+16     	; 0xee8 <main+0x150>
		} else {
			set_LED(1, 3);
     ed8:	63 e0       	ldi	r22, 0x03	; 3
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
			set_LED(2, 0);
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
		}
		motor_control_tick();
     ee8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <motor_control_tick>
		wdt_reset();
     eec:	a8 95       	wdr
	}
     eee:	c8 cf       	rjmp	.-112    	; 0xe80 <main+0xe8>

00000ef0 <handle_CAN_message>:
#include "CANMotorUnit.h"

volatile uint8_t telem_interval = 5;

/*Handle a received CAN message*/
void handle_CAN_message(CANPacket *m){
     ef0:	cf 92       	push	r12
     ef2:	df 92       	push	r13
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	ec 01       	movw	r28, r24
	tprintf("packet ID=%d\n", GetPacketID(m));
     efe:	0e 94 ac 03 	call	0x758	; 0x758 <GetPacketID>
     f02:	9f 93       	push	r25
     f04:	8f 93       	push	r24
     f06:	84 ea       	ldi	r24, 0xA4	; 164
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	9f 93       	push	r25
     f0c:	8f 93       	push	r24
     f0e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
	switch(GetPacketID(m)){
     f12:	ce 01       	movw	r24, r28
     f14:	0e 94 ac 03 	call	0x758	; 0x758 <GetPacketID>
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	8a 30       	cpi	r24, 0x0A	; 10
     f22:	91 05       	cpc	r25, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <handle_CAN_message+0x38>
     f26:	97 c0       	rjmp	.+302    	; 0x1056 <handle_CAN_message+0x166>
     f28:	64 f4       	brge	.+24     	; 0xf42 <handle_CAN_message+0x52>
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	91 05       	cpc	r25, r1
     f2e:	09 f4       	brne	.+2      	; 0xf32 <handle_CAN_message+0x42>
     f30:	42 c0       	rjmp	.+132    	; 0xfb6 <handle_CAN_message+0xc6>
     f32:	84 30       	cpi	r24, 0x04	; 4
     f34:	91 05       	cpc	r25, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <handle_CAN_message+0x4a>
     f38:	79 c0       	rjmp	.+242    	; 0x102c <handle_CAN_message+0x13c>
     f3a:	89 2b       	or	r24, r25
     f3c:	09 f0       	breq	.+2      	; 0xf40 <handle_CAN_message+0x50>
     f3e:	c3 c0       	rjmp	.+390    	; 0x10c6 <handle_CAN_message+0x1d6>
     f40:	12 c0       	rjmp	.+36     	; 0xf66 <handle_CAN_message+0x76>
     f42:	80 3f       	cpi	r24, 0xF0	; 240
     f44:	91 05       	cpc	r25, r1
     f46:	09 f4       	brne	.+2      	; 0xf4a <handle_CAN_message+0x5a>
     f48:	7d c0       	rjmp	.+250    	; 0x1044 <handle_CAN_message+0x154>
     f4a:	24 f4       	brge	.+8      	; 0xf54 <handle_CAN_message+0x64>
     f4c:	0c 97       	sbiw	r24, 0x0c	; 12
     f4e:	09 f4       	brne	.+2      	; 0xf52 <handle_CAN_message+0x62>
     f50:	7c c0       	rjmp	.+248    	; 0x104a <handle_CAN_message+0x15a>
     f52:	b9 c0       	rjmp	.+370    	; 0x10c6 <handle_CAN_message+0x1d6>
     f54:	84 3f       	cpi	r24, 0xF4	; 244
     f56:	91 05       	cpc	r25, r1
     f58:	09 f4       	brne	.+2      	; 0xf5c <handle_CAN_message+0x6c>
     f5a:	89 c0       	rjmp	.+274    	; 0x106e <handle_CAN_message+0x17e>
     f5c:	8f 3f       	cpi	r24, 0xFF	; 255
     f5e:	91 05       	cpc	r25, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <handle_CAN_message+0x74>
     f62:	95 c0       	rjmp	.+298    	; 0x108e <handle_CAN_message+0x19e>
     f64:	b0 c0       	rjmp	.+352    	; 0x10c6 <handle_CAN_message+0x1d6>
		case ID_MOTOR_UNIT_MODE_SEL:; //Set Mode
			uint8_t mode = GetModeFromPacket(m);
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <GetModeFromPacket>
     f6c:	c8 2f       	mov	r28, r24
			tprintf("mode set %d\n", mode);
     f6e:	1f 92       	push	r1
     f70:	8f 93       	push	r24
     f72:	82 eb       	ldi	r24, 0xB2	; 178
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	9f 93       	push	r25
     f78:	8f 93       	push	r24
     f7a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
			if(mode == MOTOR_UNIT_MODE_PID){
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	c1 30       	cpi	r28, 0x01	; 1
     f88:	61 f4       	brne	.+24     	; 0xfa2 <handle_CAN_message+0xb2>
				set_motor_mode(get_motor_mode() | MOTOR_MODE_PID);
     f8a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <get_motor_mode>
     f8e:	82 60       	ori	r24, 0x02	; 2
     f90:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <set_motor_mode>
				set_target_position(get_encoder_ticks());
     f94:	0e 94 37 01 	call	0x26e	; 0x26e <get_encoder_ticks>
     f98:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <set_target_position>
				enable_motor();
     f9c:	0e 94 c5 09 	call	0x138a	; 0x138a <enable_motor>
     fa0:	b2 c0       	rjmp	.+356    	; 0x1106 <handle_CAN_message+0x216>
			} else if(mode == MOTOR_UNIT_MODE_PWM){
     fa2:	c1 11       	cpse	r28, r1
     fa4:	b0 c0       	rjmp	.+352    	; 0x1106 <handle_CAN_message+0x216>
				set_motor_mode(get_motor_mode() & ~MOTOR_MODE_PID);
     fa6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <get_motor_mode>
     faa:	8d 7f       	andi	r24, 0xFD	; 253
     fac:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <set_motor_mode>
				enable_motor();
     fb0:	0e 94 c5 09 	call	0x138a	; 0x138a <enable_motor>
     fb4:	a8 c0       	rjmp	.+336    	; 0x1106 <handle_CAN_message+0x216>
			}
			break;
		case ID_MOTOR_UNIT_PWM_DIR_SET: //Set PWM/Direction
			tprintf("PWM from packet=%d\n", GetPWMFromPacket(m));
     fb6:	ce 01       	movw	r24, r28
     fb8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <GetPWMFromPacket>
     fbc:	9f 93       	push	r25
     fbe:	8f 93       	push	r24
     fc0:	7f 93       	push	r23
     fc2:	6f 93       	push	r22
     fc4:	8f eb       	ldi	r24, 0xBF	; 191
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	9f 93       	push	r25
     fca:	8f 93       	push	r24
     fcc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
			if(!(get_motor_mode() & MOTOR_MODE_PID)){
     fd0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <get_motor_mode>
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	81 fd       	sbrc	r24, 1
     fe2:	91 c0       	rjmp	.+290    	; 0x1106 <handle_CAN_message+0x216>
				int16_t mp = GetPWMFromPacket(m) / 32;
     fe4:	ce 01       	movw	r24, r28
     fe6:	0e 94 74 03 	call	0x6e8	; 0x6e8 <GetPWMFromPacket>
     fea:	99 23       	and	r25, r25
     fec:	24 f4       	brge	.+8      	; 0xff6 <handle_CAN_message+0x106>
     fee:	61 5e       	subi	r22, 0xE1	; 225
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	8f 4f       	sbci	r24, 0xFF	; 255
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	6b 01       	movw	r12, r22
     ff8:	7c 01       	movw	r14, r24
     ffa:	68 94       	set
     ffc:	14 f8       	bld	r1, 4
     ffe:	f5 94       	asr	r15
    1000:	e7 94       	ror	r14
    1002:	d7 94       	ror	r13
    1004:	c7 94       	ror	r12
    1006:	16 94       	lsr	r1
    1008:	d1 f7       	brne	.-12     	; 0xffe <handle_CAN_message+0x10e>
				tprintf("Setting PWM to %d (scaled)\n", mp);
    100a:	df 92       	push	r13
    100c:	cf 92       	push	r12
    100e:	83 ed       	ldi	r24, 0xD3	; 211
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	9f 93       	push	r25
    1014:	8f 93       	push	r24
    1016:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
				set_motor_power(mp);
    101a:	8c 2d       	mov	r24, r12
    101c:	9d 2d       	mov	r25, r13
    101e:	0e 94 b3 08 	call	0x1166	; 0x1166 <set_motor_power>
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	6d c0       	rjmp	.+218    	; 0x1106 <handle_CAN_message+0x216>
			}
			break;
		case ID_MOTOR_UNIT_PID_POS_TGT_SET: //Set angle + velocity
			set_target_position(angle_to_ticks(GetPIDTargetFromPacket(m)));
    102c:	ce 01       	movw	r24, r28
    102e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <GetPIDTargetFromPacket>
    1032:	68 2f       	mov	r22, r24
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <angle_to_ticks>
    103e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <set_target_position>
			//set_target_velocity(param2);
			break;
    1042:	61 c0       	rjmp	.+194    	; 0x1106 <handle_CAN_message+0x216>
		case ID_ESTOP:
			disable_motor();
    1044:	0e 94 cf 09 	call	0x139e	; 0x139e <disable_motor>
			break;
    1048:	5e c0       	rjmp	.+188    	; 0x1106 <handle_CAN_message+0x216>
		case ID_MOTOR_UNIT_ENC_INIT:
			set_encoder_ticks(0);
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	cb 01       	movw	r24, r22
    1050:	0e 94 40 01 	call	0x280	; 0x280 <set_encoder_ticks>
			break;
    1054:	58 c0       	rjmp	.+176    	; 0x1106 <handle_CAN_message+0x216>
		case ID_MOTOR_UNIT_ENC_PPJR_SET:
			ppjr = GetEncoderPPJRFromPacket(m);
    1056:	ce 01       	movw	r24, r28
    1058:	0e 94 85 03 	call	0x70a	; 0x70a <GetEncoderPPJRFromPacket>
    105c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    1060:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1064:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1068:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
			break;
    106c:	4c c0       	rjmp	.+152    	; 0x1106 <handle_CAN_message+0x216>
		case ID_TELEMETRY_TIMING:
			telem_interval = (GetTelemetryTimingFromPacket(m) + 10) / 20;
    106e:	ce 01       	movw	r24, r28
    1070:	0e 94 6e 03 	call	0x6dc	; 0x6dc <GetTelemetryTimingFromPacket>
    1074:	66 5f       	subi	r22, 0xF6	; 246
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	8f 4f       	sbci	r24, 0xFF	; 255
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	24 e1       	ldi	r18, 0x14	; 20
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	0e 94 ba 10 	call	0x2174	; 0x2174 <__udivmodsi4>
    1088:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <telem_interval>
			break;
    108c:	3c c0       	rjmp	.+120    	; 0x1106 <handle_CAN_message+0x216>
			} else {
				DDRC &= ~2;
			}
			break;*/
		case 0xFF: /*error*/
			tprintf("Error\n");
    108e:	8f ee       	ldi	r24, 0xEF	; 239
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	9f 93       	push	r25
    1094:	8f 93       	push	r24
    1096:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
			set_LED(0, 2);
    109a:	62 e0       	ldi	r22, 0x02	; 2
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
			update_LEDS(get_mS()/40);
    10a2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <get_mS>
    10a6:	28 e2       	ldi	r18, 0x28	; 40
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	0e 94 ba 10 	call	0x2174	; 0x2174 <__udivmodsi4>
    10b2:	c9 01       	movw	r24, r18
    10b4:	0e 94 2e 10 	call	0x205c	; 0x205c <update_LEDS>
			set_LED(0, 0);
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
			break;
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	20 c0       	rjmp	.+64     	; 0x1106 <handle_CAN_message+0x216>
		default:
			tprintf("Unknown CAN code %d\n", m->data[0]);
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	1f 92       	push	r1
    10ca:	8f 93       	push	r24
    10cc:	86 ef       	ldi	r24, 0xF6	; 246
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	9f 93       	push	r25
    10d2:	8f 93       	push	r24
    10d4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
			set_LED(0, 2);
    10d8:	62 e0       	ldi	r22, 0x02	; 2
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
			update_LEDS(get_mS()/40);
    10e0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <get_mS>
    10e4:	28 e2       	ldi	r18, 0x28	; 40
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	0e 94 ba 10 	call	0x2174	; 0x2174 <__udivmodsi4>
    10f0:	c9 01       	movw	r24, r18
    10f2:	0e 94 2e 10 	call	0x205c	; 0x205c <update_LEDS>
			set_LED(0, 0);
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
			break;
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
	}
}
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	08 95       	ret

00001114 <set_motor_power_raw>:
}

/*Gets the motor maximum position*/
uint32_t get_motor_max_position(){
	return motor_max_pos;
}
    1114:	81 15       	cp	r24, r1
    1116:	24 e0       	ldi	r18, 0x04	; 4
    1118:	92 07       	cpc	r25, r18
    111a:	14 f0       	brlt	.+4      	; 0x1120 <set_motor_power_raw+0xc>
    111c:	8f ef       	ldi	r24, 0xFF	; 255
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	bc 01       	movw	r22, r24
    1122:	61 30       	cpi	r22, 0x01	; 1
    1124:	8c ef       	ldi	r24, 0xFC	; 252
    1126:	78 07       	cpc	r23, r24
    1128:	14 f4       	brge	.+4      	; 0x112e <set_motor_power_raw+0x1a>
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	7c ef       	ldi	r23, 0xFC	; 252
    112e:	61 15       	cp	r22, r1
    1130:	71 05       	cpc	r23, r1
    1132:	21 f0       	breq	.+8      	; 0x113c <set_motor_power_raw+0x28>
    1134:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <motor_mode>
    1138:	80 fd       	sbrc	r24, 0
    113a:	07 c0       	rjmp	.+14     	; 0x114a <set_motor_power_raw+0x36>
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	0e 94 ad 0c 	call	0x195a	; 0x195a <write_PWM>
    1146:	73 98       	cbi	0x0e, 3	; 14
    1148:	08 95       	ret
    114a:	77 23       	and	r23, r23
    114c:	34 f4       	brge	.+12     	; 0x115a <set_motor_power_raw+0x46>
    114e:	72 99       	sbic	0x0e, 2	; 14
    1150:	72 98       	cbi	0x0e, 2	; 14
    1152:	71 95       	neg	r23
    1154:	61 95       	neg	r22
    1156:	71 09       	sbc	r23, r1
    1158:	02 c0       	rjmp	.+4      	; 0x115e <set_motor_power_raw+0x4a>
    115a:	72 9b       	sbis	0x0e, 2	; 14
    115c:	72 9a       	sbi	0x0e, 2	; 14
    115e:	83 e0       	ldi	r24, 0x03	; 3
    1160:	0e 94 ad 0c 	call	0x195a	; 0x195a <write_PWM>
    1164:	08 95       	ret

00001166 <set_motor_power>:
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	ec 01       	movw	r28, r24
    116c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <get_mS>
    1170:	60 93 89 02 	sts	0x0289, r22	; 0x800289 <last_set>
    1174:	70 93 8a 02 	sts	0x028A, r23	; 0x80028a <last_set+0x1>
    1178:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <last_set+0x2>
    117c:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <last_set+0x3>
    1180:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <motor_mode>
    1184:	80 fd       	sbrc	r24, 0
    1186:	05 c0       	rjmp	.+10     	; 0x1192 <set_motor_power+0x2c>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 8a 08 	call	0x1114	; 0x1114 <set_motor_power_raw>
    1190:	07 c0       	rjmp	.+14     	; 0x11a0 <set_motor_power+0x3a>
    1192:	d0 93 6f 02 	sts	0x026F, r29	; 0x80026f <motor_power+0x1>
    1196:	c0 93 6e 02 	sts	0x026E, r28	; 0x80026e <motor_power>
    119a:	ce 01       	movw	r24, r28
    119c:	0e 94 8a 08 	call	0x1114	; 0x1114 <set_motor_power_raw>
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <set_Kp>:
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	21 f0       	breq	.+8      	; 0x11b2 <set_Kp+0xc>
    11aa:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <Kp+0x1>
    11ae:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <Kp>
    11b2:	08 95       	ret

000011b4 <set_Ki>:
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	21 f0       	breq	.+8      	; 0x11c0 <set_Ki+0xc>
    11b8:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <Ki+0x1>
    11bc:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <Ki>
    11c0:	08 95       	ret

000011c2 <set_Kd>:
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	21 f0       	breq	.+8      	; 0x11ce <set_Kd+0xc>
    11c6:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <Kd+0x1>
    11ca:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <Kd>
    11ce:	08 95       	ret

000011d0 <set_target_position>:
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	6b 01       	movw	r12, r22
    11da:	7c 01       	movw	r14, r24
    11dc:	ff 92       	push	r15
    11de:	ef 92       	push	r14
    11e0:	df 92       	push	r13
    11e2:	6f 93       	push	r22
    11e4:	8b e0       	ldi	r24, 0x0B	; 11
    11e6:	92 e0       	ldi	r25, 0x02	; 2
    11e8:	9f 93       	push	r25
    11ea:	8f 93       	push	r24
    11ec:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
    11f0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <motor_target_pos>
    11f4:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <motor_target_pos+0x1>
    11f8:	8c 19       	sub	r24, r12
    11fa:	9d 09       	sbc	r25, r13
    11fc:	0e 94 28 10 	call	0x2050	; 0x2050 <int_abs>
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	85 36       	cpi	r24, 0x65	; 101
    120e:	91 05       	cpc	r25, r1
    1210:	40 f0       	brcs	.+16     	; 0x1222 <set_target_position+0x52>
    1212:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <pos_i>
    1216:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <pos_i+0x1>
    121a:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <pos_i+0x2>
    121e:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <pos_i+0x3>
    1222:	c0 92 78 02 	sts	0x0278, r12	; 0x800278 <motor_target_pos>
    1226:	d0 92 79 02 	sts	0x0279, r13	; 0x800279 <motor_target_pos+0x1>
    122a:	e0 92 7a 02 	sts	0x027A, r14	; 0x80027a <motor_target_pos+0x2>
    122e:	f0 92 7b 02 	sts	0x027B, r15	; 0x80027b <motor_target_pos+0x3>
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	df 90       	pop	r13
    1238:	cf 90       	pop	r12
    123a:	08 95       	ret

0000123c <set_target_velocity>:
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	ec 01       	movw	r28, r24
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	83 e2       	ldi	r24, 0x23	; 35
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	9f 93       	push	r25
    124c:	8f 93       	push	r24
    124e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
    1252:	d0 93 7d 02 	sts	0x027D, r29	; 0x80027d <motor_target_vel+0x1>
    1256:	c0 93 7c 02 	sts	0x027C, r28	; 0x80027c <motor_target_vel>
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cd 37       	cpi	r28, 0x7D	; 125
    1264:	d1 05       	cpc	r29, r1
    1266:	c8 f4       	brcc	.+50     	; 0x129a <set_target_velocity+0x5e>
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <slow>
    126e:	8d e7       	ldi	r24, 0x7D	; 125
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	be 01       	movw	r22, r28
    1274:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodhi4>
    1278:	41 e0       	ldi	r20, 0x01	; 1
    127a:	9e 01       	movw	r18, r28
    127c:	36 95       	lsr	r19
    127e:	27 95       	ror	r18
    1280:	28 17       	cp	r18, r24
    1282:	39 07       	cpc	r19, r25
    1284:	08 f0       	brcs	.+2      	; 0x1288 <set_target_velocity+0x4c>
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	8d e7       	ldi	r24, 0x7D	; 125
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	be 01       	movw	r22, r28
    128e:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodhi4>
    1292:	64 0f       	add	r22, r20
    1294:	60 93 8f 02 	sts	0x028F, r22	; 0x80028f <tgt_inc>
    1298:	15 c0       	rjmp	.+42     	; 0x12c4 <set_target_velocity+0x88>
    129a:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <slow>
    129e:	9e 01       	movw	r18, r28
    12a0:	af ea       	ldi	r26, 0xAF	; 175
    12a2:	b7 e4       	ldi	r27, 0x47	; 71
    12a4:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__umulhisi3>
    12a8:	c8 1b       	sub	r28, r24
    12aa:	d9 0b       	sbc	r29, r25
    12ac:	d6 95       	lsr	r29
    12ae:	c7 95       	ror	r28
    12b0:	8c 0f       	add	r24, r28
    12b2:	9d 1f       	adc	r25, r29
    12b4:	92 95       	swap	r25
    12b6:	82 95       	swap	r24
    12b8:	8f 70       	andi	r24, 0x0F	; 15
    12ba:	89 27       	eor	r24, r25
    12bc:	9f 70       	andi	r25, 0x0F	; 15
    12be:	89 27       	eor	r24, r25
    12c0:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <tgt_inc>
    12c4:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <tgt_inc>
    12c8:	1f 92       	push	r1
    12ca:	8f 93       	push	r24
    12cc:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <slow>
    12d0:	1f 92       	push	r1
    12d2:	8f 93       	push	r24
    12d4:	8b e3       	ldi	r24, 0x3B	; 59
    12d6:	92 e0       	ldi	r25, 0x02	; 2
    12d8:	9f 93       	push	r25
    12da:	8f 93       	push	r24
    12dc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <init_motor>:
    12f2:	73 98       	cbi	0x0e, 3	; 14
    12f4:	6b 9a       	sbi	0x0d, 3	; 13
    12f6:	6a 9a       	sbi	0x0d, 2	; 13
    12f8:	72 9a       	sbi	0x0e, 2	; 14
    12fa:	80 98       	cbi	0x10, 0	; 16
    12fc:	74 9a       	sbi	0x0e, 4	; 14
    12fe:	6d 9a       	sbi	0x0d, 5	; 13
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	8b b9       	out	0x0b, r24	; 11
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	94 e0       	ldi	r25, 0x04	; 4
    1308:	a0 e0       	ldi	r26, 0x00	; 0
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <motor_max_pos>
    1310:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <motor_max_pos+0x1>
    1314:	a0 93 80 02 	sts	0x0280, r26	; 0x800280 <motor_max_pos+0x2>
    1318:	b0 93 81 02 	sts	0x0281, r27	; 0x800281 <motor_max_pos+0x3>
    131c:	88 e8       	ldi	r24, 0x88	; 136
    131e:	93 e1       	ldi	r25, 0x13	; 19
    1320:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <motor_max_current+0x1>
    1324:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <motor_max_current>
    1328:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <motor_target_pos>
    132c:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <motor_target_pos+0x1>
    1330:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <motor_target_pos+0x2>
    1334:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <motor_target_pos+0x3>
    1338:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <pid_runs+0x1>
    133c:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <pid_runs>
    1340:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <motor_power+0x1>
    1344:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <motor_power>
    1348:	8c e8       	ldi	r24, 0x8C	; 140
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <Kp+0x1>
    1350:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <Kp>
    1354:	84 e1       	ldi	r24, 0x14	; 20
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <Ki+0x1>
    135c:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <Ki>
    1360:	84 e6       	ldi	r24, 0x64	; 100
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <Kd+0x1>
    1368:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <Kd>
    136c:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <pid_target>
    1370:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <pid_target+0x1>
    1374:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <pid_target+0x2>
    1378:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <pid_target+0x3>
    137c:	8a ef       	ldi	r24, 0xFA	; 250
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 1e 09 	call	0x123c	; 0x123c <set_target_velocity>
    1384:	0e 94 7d 01 	call	0x2fa	; 0x2fa <init_encoder>
    1388:	08 95       	ret

0000138a <enable_motor>:
    138a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <motor_mode>
    138e:	81 60       	ori	r24, 0x01	; 1
    1390:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <motor_mode>
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
    139c:	08 95       	ret

0000139e <disable_motor>:
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 8a 08 	call	0x1114	; 0x1114 <set_motor_power_raw>
    13a6:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <motor_mode>
    13aa:	8e 7f       	andi	r24, 0xFE	; 254
    13ac:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <motor_mode>
    13b0:	08 95       	ret

000013b2 <set_motor_mode>:
    13b2:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <motor_mode>
    13b6:	08 95       	ret

000013b8 <get_motor_mode>:
    13b8:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <motor_mode>
    13bc:	08 95       	ret

000013be <get_motor_limit_switch_state>:
    13be:	29 b1       	in	r18, 0x09	; 9
    13c0:	86 b1       	in	r24, 0x06	; 6
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	80 95       	com	r24
    13c6:	90 95       	com	r25
    13c8:	86 95       	lsr	r24
    13ca:	81 70       	andi	r24, 0x01	; 1
    13cc:	92 2f       	mov	r25, r18
    13ce:	90 95       	com	r25
    13d0:	92 70       	andi	r25, 0x02	; 2
    13d2:	89 2b       	or	r24, r25
    13d4:	08 95       	ret

000013d6 <motor_control_tick>:
    13d6:	4f 92       	push	r4
    13d8:	5f 92       	push	r5
    13da:	6f 92       	push	r6
    13dc:	7f 92       	push	r7
    13de:	8f 92       	push	r8
    13e0:	9f 92       	push	r9
    13e2:	af 92       	push	r10
    13e4:	bf 92       	push	r11
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	2f 97       	sbiw	r28, 0x0f	; 15
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <motor_mode>
    140a:	81 fd       	sbrc	r24, 1
    140c:	1b c0       	rjmp	.+54     	; 0x1444 <motor_control_tick+0x6e>
    140e:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <PID_due>
    1412:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <get_mS>
    1416:	00 91 89 02 	lds	r16, 0x0289	; 0x800289 <last_set>
    141a:	10 91 8a 02 	lds	r17, 0x028A	; 0x80028a <last_set+0x1>
    141e:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <last_set+0x2>
    1422:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <last_set+0x3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	80 1b       	sub	r24, r16
    142c:	91 0b       	sbc	r25, r17
    142e:	a2 0b       	sbc	r26, r18
    1430:	b3 0b       	sbc	r27, r19
    1432:	83 3e       	cpi	r24, 0xE3	; 227
    1434:	94 40       	sbci	r25, 0x04	; 4
    1436:	a1 05       	cpc	r26, r1
    1438:	b1 05       	cpc	r27, r1
    143a:	20 f0       	brcs	.+8      	; 0x1444 <motor_control_tick+0x6e>
    143c:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <motor_power+0x1>
    1440:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <motor_power>
    1444:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <telem_timer>
    1448:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <telem_interval>
    144c:	98 17       	cp	r25, r24
    144e:	98 f0       	brcs	.+38     	; 0x1476 <motor_control_tick+0xa0>
    1450:	0e 94 37 01 	call	0x26e	; 0x26e <get_encoder_ticks>
    1454:	0e 94 49 01 	call	0x292	; 0x292 <ticks_to_angle>
    1458:	7b 01       	movw	r14, r22
    145a:	8c 01       	movw	r16, r24
    145c:	24 e0       	ldi	r18, 0x04	; 4
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	ce 01       	movw	r24, r28
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	0e 94 36 03 	call	0x66c	; 0x66c <AssembleTelemetryReportPacket>
    146a:	ce 01       	movw	r24, r28
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	0e 94 7f 05 	call	0xafe	; 0xafe <SendCANPacket>
    1472:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <telem_timer>
    1476:	64 99       	sbic	0x0c, 4	; 12
    1478:	0a c0       	rjmp	.+20     	; 0x148e <motor_control_tick+0xb8>
    147a:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <motor_power+0x1>
    147e:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <motor_power>
    1482:	0e 94 cf 09 	call	0x139e	; 0x139e <disable_motor>
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	0e 94 06 10 	call	0x200c	; 0x200c <set_LED>
    148e:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <motor_mode>
    1492:	81 ff       	sbrs	r24, 1
    1494:	f9 c1       	rjmp	.+1010   	; 0x1888 <motor_control_tick+0x4b2>
    1496:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <PID_due>
    149a:	88 23       	and	r24, r24
    149c:	09 f4       	brne	.+2      	; 0x14a0 <motor_control_tick+0xca>
    149e:	f4 c1       	rjmp	.+1000   	; 0x1888 <motor_control_tick+0x4b2>
    14a0:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <slow>
    14a4:	88 23       	and	r24, r24
    14a6:	09 f4       	brne	.+2      	; 0x14aa <motor_control_tick+0xd4>
    14a8:	6f c0       	rjmp	.+222    	; 0x1588 <motor_control_tick+0x1b2>
    14aa:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <tgt_inc>
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <pid_runs>
    14b4:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <pid_runs+0x1>
    14b8:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodhi4>
    14bc:	89 2b       	or	r24, r25
    14be:	09 f0       	breq	.+2      	; 0x14c2 <motor_control_tick+0xec>
    14c0:	c6 c0       	rjmp	.+396    	; 0x164e <motor_control_tick+0x278>
    14c2:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <motor_target_pos>
    14c6:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <motor_target_pos+0x1>
    14ca:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <motor_target_pos+0x2>
    14ce:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <motor_target_pos+0x3>
    14d2:	40 91 84 02 	lds	r20, 0x0284	; 0x800284 <pid_target>
    14d6:	50 91 85 02 	lds	r21, 0x0285	; 0x800285 <pid_target+0x1>
    14da:	60 91 86 02 	lds	r22, 0x0286	; 0x800286 <pid_target+0x2>
    14de:	70 91 87 02 	lds	r23, 0x0287	; 0x800287 <pid_target+0x3>
    14e2:	48 17       	cp	r20, r24
    14e4:	59 07       	cpc	r21, r25
    14e6:	6a 07       	cpc	r22, r26
    14e8:	7b 07       	cpc	r23, r27
    14ea:	2c f5       	brge	.+74     	; 0x1536 <motor_control_tick+0x160>
    14ec:	6c 01       	movw	r12, r24
    14ee:	7d 01       	movw	r14, r26
    14f0:	c4 1a       	sub	r12, r20
    14f2:	d5 0a       	sbc	r13, r21
    14f4:	e6 0a       	sbc	r14, r22
    14f6:	f7 0a       	sbc	r15, r23
    14f8:	a7 01       	movw	r20, r14
    14fa:	96 01       	movw	r18, r12
    14fc:	65 e0       	ldi	r22, 0x05	; 5
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <min>
    1508:	00 91 84 02 	lds	r16, 0x0284	; 0x800284 <pid_target>
    150c:	10 91 85 02 	lds	r17, 0x0285	; 0x800285 <pid_target+0x1>
    1510:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <pid_target+0x2>
    1514:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <pid_target+0x3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	80 0f       	add	r24, r16
    151e:	91 1f       	adc	r25, r17
    1520:	a2 1f       	adc	r26, r18
    1522:	b3 1f       	adc	r27, r19
    1524:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <pid_target>
    1528:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <pid_target+0x1>
    152c:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <pid_target+0x2>
    1530:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <pid_target+0x3>
    1534:	8c c0       	rjmp	.+280    	; 0x164e <motor_control_tick+0x278>
    1536:	84 17       	cp	r24, r20
    1538:	95 07       	cpc	r25, r21
    153a:	a6 07       	cpc	r26, r22
    153c:	b7 07       	cpc	r27, r23
    153e:	0c f0       	brlt	.+2      	; 0x1542 <motor_control_tick+0x16c>
    1540:	86 c0       	rjmp	.+268    	; 0x164e <motor_control_tick+0x278>
    1542:	9a 01       	movw	r18, r20
    1544:	ab 01       	movw	r20, r22
    1546:	28 1b       	sub	r18, r24
    1548:	39 0b       	sbc	r19, r25
    154a:	4a 0b       	sbc	r20, r26
    154c:	5b 0b       	sbc	r21, r27
    154e:	65 e0       	ldi	r22, 0x05	; 5
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <min>
    155a:	00 91 84 02 	lds	r16, 0x0284	; 0x800284 <pid_target>
    155e:	10 91 85 02 	lds	r17, 0x0285	; 0x800285 <pid_target+0x1>
    1562:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <pid_target+0x2>
    1566:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <pid_target+0x3>
    156a:	68 01       	movw	r12, r16
    156c:	79 01       	movw	r14, r18
    156e:	c6 1a       	sub	r12, r22
    1570:	d7 0a       	sbc	r13, r23
    1572:	e8 0a       	sbc	r14, r24
    1574:	f9 0a       	sbc	r15, r25
    1576:	c0 92 84 02 	sts	0x0284, r12	; 0x800284 <pid_target>
    157a:	d0 92 85 02 	sts	0x0285, r13	; 0x800285 <pid_target+0x1>
    157e:	e0 92 86 02 	sts	0x0286, r14	; 0x800286 <pid_target+0x2>
    1582:	f0 92 87 02 	sts	0x0287, r15	; 0x800287 <pid_target+0x3>
    1586:	63 c0       	rjmp	.+198    	; 0x164e <motor_control_tick+0x278>
    1588:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <motor_target_pos>
    158c:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <motor_target_pos+0x1>
    1590:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <motor_target_pos+0x2>
    1594:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <motor_target_pos+0x3>
    1598:	40 91 84 02 	lds	r20, 0x0284	; 0x800284 <pid_target>
    159c:	50 91 85 02 	lds	r21, 0x0285	; 0x800285 <pid_target+0x1>
    15a0:	60 91 86 02 	lds	r22, 0x0286	; 0x800286 <pid_target+0x2>
    15a4:	70 91 87 02 	lds	r23, 0x0287	; 0x800287 <pid_target+0x3>
    15a8:	48 17       	cp	r20, r24
    15aa:	59 07       	cpc	r21, r25
    15ac:	6a 07       	cpc	r22, r26
    15ae:	7b 07       	cpc	r23, r27
    15b0:	34 f5       	brge	.+76     	; 0x15fe <motor_control_tick+0x228>
    15b2:	7c 01       	movw	r14, r24
    15b4:	8d 01       	movw	r16, r26
    15b6:	e4 1a       	sub	r14, r20
    15b8:	f5 0a       	sbc	r15, r21
    15ba:	06 0b       	sbc	r16, r22
    15bc:	17 0b       	sbc	r17, r23
    15be:	a8 01       	movw	r20, r16
    15c0:	97 01       	movw	r18, r14
    15c2:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <tgt_inc>
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <min>
    15d0:	00 91 84 02 	lds	r16, 0x0284	; 0x800284 <pid_target>
    15d4:	10 91 85 02 	lds	r17, 0x0285	; 0x800285 <pid_target+0x1>
    15d8:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <pid_target+0x2>
    15dc:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <pid_target+0x3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	80 0f       	add	r24, r16
    15e6:	91 1f       	adc	r25, r17
    15e8:	a2 1f       	adc	r26, r18
    15ea:	b3 1f       	adc	r27, r19
    15ec:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <pid_target>
    15f0:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <pid_target+0x1>
    15f4:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <pid_target+0x2>
    15f8:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <pid_target+0x3>
    15fc:	28 c0       	rjmp	.+80     	; 0x164e <motor_control_tick+0x278>
    15fe:	84 17       	cp	r24, r20
    1600:	95 07       	cpc	r25, r21
    1602:	a6 07       	cpc	r26, r22
    1604:	b7 07       	cpc	r27, r23
    1606:	1c f5       	brge	.+70     	; 0x164e <motor_control_tick+0x278>
    1608:	9a 01       	movw	r18, r20
    160a:	ab 01       	movw	r20, r22
    160c:	28 1b       	sub	r18, r24
    160e:	39 0b       	sbc	r19, r25
    1610:	4a 0b       	sbc	r20, r26
    1612:	5b 0b       	sbc	r21, r27
    1614:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <tgt_inc>
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <min>
    1622:	00 91 84 02 	lds	r16, 0x0284	; 0x800284 <pid_target>
    1626:	10 91 85 02 	lds	r17, 0x0285	; 0x800285 <pid_target+0x1>
    162a:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <pid_target+0x2>
    162e:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <pid_target+0x3>
    1632:	68 01       	movw	r12, r16
    1634:	79 01       	movw	r14, r18
    1636:	c6 1a       	sub	r12, r22
    1638:	d7 0a       	sbc	r13, r23
    163a:	e8 0a       	sbc	r14, r24
    163c:	f9 0a       	sbc	r15, r25
    163e:	c0 92 84 02 	sts	0x0284, r12	; 0x800284 <pid_target>
    1642:	d0 92 85 02 	sts	0x0285, r13	; 0x800285 <pid_target+0x1>
    1646:	e0 92 86 02 	sts	0x0286, r14	; 0x800286 <pid_target+0x2>
    164a:	f0 92 87 02 	sts	0x0287, r15	; 0x800287 <pid_target+0x3>
    164e:	0e 94 37 01 	call	0x26e	; 0x26e <get_encoder_ticks>
    1652:	4b 01       	movw	r8, r22
    1654:	5c 01       	movw	r10, r24
    1656:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <pid_target>
    165a:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <pid_target+0x1>
    165e:	a0 91 86 02 	lds	r26, 0x0286	; 0x800286 <pid_target+0x2>
    1662:	b0 91 87 02 	lds	r27, 0x0287	; 0x800287 <pid_target+0x3>
    1666:	75 01       	movw	r14, r10
    1668:	64 01       	movw	r12, r8
    166a:	c8 1a       	sub	r12, r24
    166c:	d9 0a       	sbc	r13, r25
    166e:	ea 0a       	sbc	r14, r26
    1670:	fb 0a       	sbc	r15, r27
    1672:	00 91 98 02 	lds	r16, 0x0298	; 0x800298 <last_pos_err>
    1676:	10 91 99 02 	lds	r17, 0x0299	; 0x800299 <last_pos_err+0x1>
    167a:	20 91 9a 02 	lds	r18, 0x029A	; 0x80029a <last_pos_err+0x2>
    167e:	30 91 9b 02 	lds	r19, 0x029B	; 0x80029b <last_pos_err+0x3>
    1682:	0c 87       	std	Y+12, r16	; 0x0c
    1684:	1d 87       	std	Y+13, r17	; 0x0d
    1686:	2e 87       	std	Y+14, r18	; 0x0e
    1688:	3f 87       	std	Y+15, r19	; 0x0f
    168a:	c0 92 98 02 	sts	0x0298, r12	; 0x800298 <last_pos_err>
    168e:	d0 92 99 02 	sts	0x0299, r13	; 0x800299 <last_pos_err+0x1>
    1692:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <last_pos_err+0x2>
    1696:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <last_pos_err+0x3>
    169a:	c6 01       	movw	r24, r12
    169c:	0e 94 28 10 	call	0x2050	; 0x2050 <int_abs>
    16a0:	05 97       	sbiw	r24, 0x05	; 5
    16a2:	a0 f0       	brcs	.+40     	; 0x16cc <motor_control_tick+0x2f6>
    16a4:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <pos_i>
    16a8:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <pos_i+0x1>
    16ac:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <pos_i+0x2>
    16b0:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <pos_i+0x3>
    16b4:	8c 0d       	add	r24, r12
    16b6:	9d 1d       	adc	r25, r13
    16b8:	ae 1d       	adc	r26, r14
    16ba:	bf 1d       	adc	r27, r15
    16bc:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <pos_i>
    16c0:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <pos_i+0x1>
    16c4:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <pos_i+0x2>
    16c8:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <pos_i+0x3>
    16cc:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <motor_target_pos>
    16d0:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <motor_target_pos+0x1>
    16d4:	94 01       	movw	r18, r8
    16d6:	28 1b       	sub	r18, r24
    16d8:	39 0b       	sbc	r19, r25
    16da:	c9 01       	movw	r24, r18
    16dc:	0e 94 28 10 	call	0x2050	; 0x2050 <int_abs>
    16e0:	04 97       	sbiw	r24, 0x04	; 4
    16e2:	28 f4       	brcc	.+10     	; 0x16ee <motor_control_tick+0x318>
    16e4:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <motor_power+0x1>
    16e8:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <motor_power>
    16ec:	90 c0       	rjmp	.+288    	; 0x180e <motor_control_tick+0x438>
    16ee:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <pos_i>
    16f2:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <pos_i+0x1>
    16f6:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <pos_i+0x2>
    16fa:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <pos_i+0x3>
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	33 e0       	ldi	r19, 0x03	; 3
    1702:	93 07       	cpc	r25, r19
    1704:	a1 05       	cpc	r26, r1
    1706:	b1 05       	cpc	r27, r1
    1708:	6c f0       	brlt	.+26     	; 0x1724 <motor_control_tick+0x34e>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	93 e0       	ldi	r25, 0x03	; 3
    170e:	a0 e0       	ldi	r26, 0x00	; 0
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <pos_i>
    1716:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <pos_i+0x1>
    171a:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <pos_i+0x2>
    171e:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <pos_i+0x3>
    1722:	11 c0       	rjmp	.+34     	; 0x1746 <motor_control_tick+0x370>
    1724:	81 15       	cp	r24, r1
    1726:	9d 4f       	sbci	r25, 0xFD	; 253
    1728:	af 4f       	sbci	r26, 0xFF	; 255
    172a:	bf 4f       	sbci	r27, 0xFF	; 255
    172c:	64 f4       	brge	.+24     	; 0x1746 <motor_control_tick+0x370>
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	9d ef       	ldi	r25, 0xFD	; 253
    1732:	af ef       	ldi	r26, 0xFF	; 255
    1734:	bf ef       	ldi	r27, 0xFF	; 255
    1736:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <pos_i>
    173a:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <pos_i+0x1>
    173e:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <pos_i+0x2>
    1742:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <pos_i+0x3>
    1746:	a0 91 72 02 	lds	r26, 0x0272	; 0x800272 <Ki>
    174a:	b0 91 73 02 	lds	r27, 0x0273	; 0x800273 <Ki+0x1>
    174e:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <pos_i>
    1752:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <pos_i+0x1>
    1756:	40 91 76 02 	lds	r20, 0x0276	; 0x800276 <pos_i+0x2>
    175a:	50 91 77 02 	lds	r21, 0x0277	; 0x800277 <pos_i+0x3>
    175e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__muluhisi3>
    1762:	24 e1       	ldi	r18, 0x14	; 20
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__divmodsi4>
    176e:	29 01       	movw	r4, r18
    1770:	3a 01       	movw	r6, r20
    1772:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <Kp>
    1776:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <Kp+0x1>
    177a:	a7 01       	movw	r20, r14
    177c:	96 01       	movw	r18, r12
    177e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__muluhisi3>
    1782:	24 e1       	ldi	r18, 0x14	; 20
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__divmodsi4>
    178e:	42 0e       	add	r4, r18
    1790:	53 1e       	adc	r5, r19
    1792:	64 1e       	adc	r6, r20
    1794:	75 1e       	adc	r7, r21
    1796:	a7 01       	movw	r20, r14
    1798:	96 01       	movw	r18, r12
    179a:	8c 85       	ldd	r24, Y+12	; 0x0c
    179c:	9d 85       	ldd	r25, Y+13	; 0x0d
    179e:	ae 85       	ldd	r26, Y+14	; 0x0e
    17a0:	bf 85       	ldd	r27, Y+15	; 0x0f
    17a2:	28 1b       	sub	r18, r24
    17a4:	39 0b       	sbc	r19, r25
    17a6:	4a 0b       	sbc	r20, r26
    17a8:	5b 0b       	sbc	r21, r27
    17aa:	a0 91 90 02 	lds	r26, 0x0290	; 0x800290 <Kd>
    17ae:	b0 91 91 02 	lds	r27, 0x0291	; 0x800291 <Kd+0x1>
    17b2:	0e 94 0a 11 	call	0x2214	; 0x2214 <__muluhisi3>
    17b6:	24 e1       	ldi	r18, 0x14	; 20
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__divmodsi4>
    17c2:	42 0e       	add	r4, r18
    17c4:	53 1e       	adc	r5, r19
    17c6:	64 1e       	adc	r6, r20
    17c8:	75 1e       	adc	r7, r21
    17ca:	91 e8       	ldi	r25, 0x81	; 129
    17cc:	49 16       	cp	r4, r25
    17ce:	91 e0       	ldi	r25, 0x01	; 1
    17d0:	59 06       	cpc	r5, r25
    17d2:	61 04       	cpc	r6, r1
    17d4:	71 04       	cpc	r7, r1
    17d6:	34 f0       	brlt	.+12     	; 0x17e4 <motor_control_tick+0x40e>
    17d8:	41 2c       	mov	r4, r1
    17da:	51 2c       	mov	r5, r1
    17dc:	32 01       	movw	r6, r4
    17de:	68 94       	set
    17e0:	47 f8       	bld	r4, 7
    17e2:	53 94       	inc	r5
    17e4:	a0 e8       	ldi	r26, 0x80	; 128
    17e6:	4a 16       	cp	r4, r26
    17e8:	ae ef       	ldi	r26, 0xFE	; 254
    17ea:	5a 06       	cpc	r5, r26
    17ec:	af ef       	ldi	r26, 0xFF	; 255
    17ee:	6a 06       	cpc	r6, r26
    17f0:	7a 06       	cpc	r7, r26
    17f2:	4c f4       	brge	.+18     	; 0x1806 <motor_control_tick+0x430>
    17f4:	0f 2e       	mov	r0, r31
    17f6:	f0 e8       	ldi	r31, 0x80	; 128
    17f8:	4f 2e       	mov	r4, r31
    17fa:	fe ef       	ldi	r31, 0xFE	; 254
    17fc:	5f 2e       	mov	r5, r31
    17fe:	66 24       	eor	r6, r6
    1800:	6a 94       	dec	r6
    1802:	76 2c       	mov	r7, r6
    1804:	f0 2d       	mov	r31, r0
    1806:	50 92 6f 02 	sts	0x026F, r5	; 0x80026f <motor_power+0x1>
    180a:	40 92 6e 02 	sts	0x026E, r4	; 0x80026e <motor_power>
    180e:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <av>
    1812:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <av+0x1>
    1816:	9c 01       	movw	r18, r24
    1818:	22 0f       	add	r18, r18
    181a:	33 1f       	adc	r19, r19
    181c:	22 0f       	add	r18, r18
    181e:	33 1f       	adc	r19, r19
    1820:	22 0f       	add	r18, r18
    1822:	33 1f       	adc	r19, r19
    1824:	82 0f       	add	r24, r18
    1826:	93 1f       	adc	r25, r19
    1828:	0a e0       	ldi	r16, 0x0A	; 10
    182a:	10 e0       	ldi	r17, 0x00	; 0
    182c:	b8 01       	movw	r22, r16
    182e:	0e 94 a6 10 	call	0x214c	; 0x214c <__divmodhi4>
    1832:	7b 01       	movw	r14, r22
    1834:	0e 94 b5 01 	call	0x36a	; 0x36a <get_encoder_velocity>
    1838:	b8 01       	movw	r22, r16
    183a:	0e 94 a6 10 	call	0x214c	; 0x214c <__divmodhi4>
    183e:	e6 0e       	add	r14, r22
    1840:	f7 1e       	adc	r15, r23
    1842:	f0 92 83 02 	sts	0x0283, r15	; 0x800283 <av+0x1>
    1846:	e0 92 82 02 	sts	0x0282, r14	; 0x800282 <av>
    184a:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <motor_power+0x1>
    184e:	8f 93       	push	r24
    1850:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <motor_power>
    1854:	8f 93       	push	r24
    1856:	9f 92       	push	r9
    1858:	8f 92       	push	r8
    185a:	84 e5       	ldi	r24, 0x54	; 84
    185c:	92 e0       	ldi	r25, 0x02	; 2
    185e:	9f 93       	push	r25
    1860:	8f 93       	push	r24
    1862:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <tprintf>
    1866:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <pid_runs>
    186a:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <pid_runs+0x1>
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <pid_runs+0x1>
    1874:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <pid_runs>
    1878:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <PID_due>
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0e 94 df 09 	call	0x13be	; 0x13be <get_motor_limit_switch_state>
    188c:	f8 2e       	mov	r15, r24
    188e:	80 ff       	sbrs	r24, 0
    1890:	27 c0       	rjmp	.+78     	; 0x18e0 <motor_control_tick+0x50a>
    1892:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <motor_mode>
    1896:	82 ff       	sbrs	r24, 2
    1898:	03 c0       	rjmp	.+6      	; 0x18a0 <motor_control_tick+0x4ca>
    189a:	8b 7f       	andi	r24, 0xFB	; 251
    189c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <motor_mode>
    18a0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <motor_target_pos>
    18a4:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <motor_target_pos+0x1>
    18a8:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <motor_target_pos+0x2>
    18ac:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <motor_target_pos+0x3>
    18b0:	bb 23       	and	r27, r27
    18b2:	44 f4       	brge	.+16     	; 0x18c4 <motor_control_tick+0x4ee>
    18b4:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <motor_target_pos>
    18b8:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <motor_target_pos+0x1>
    18bc:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <motor_target_pos+0x2>
    18c0:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <motor_target_pos+0x3>
    18c4:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <motor_power>
    18c8:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <motor_power+0x1>
    18cc:	99 23       	and	r25, r25
    18ce:	44 f4       	brge	.+16     	; 0x18e0 <motor_control_tick+0x50a>
    18d0:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <motor_power+0x1>
    18d4:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <motor_power>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 8a 08 	call	0x1114	; 0x1114 <set_motor_power_raw>
    18e0:	f1 fe       	sbrs	r15, 1
    18e2:	18 c0       	rjmp	.+48     	; 0x1914 <motor_control_tick+0x53e>
    18e4:	0e 94 9c 01 	call	0x338	; 0x338 <reset_encoder>
    18e8:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <motor_mode>
    18ec:	82 ff       	sbrs	r24, 2
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <motor_control_tick+0x520>
    18f0:	8b 7f       	andi	r24, 0xFB	; 251
    18f2:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <motor_mode>
    18f6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <motor_power>
    18fa:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <motor_power+0x1>
    18fe:	18 16       	cp	r1, r24
    1900:	19 06       	cpc	r1, r25
    1902:	44 f4       	brge	.+16     	; 0x1914 <motor_control_tick+0x53e>
    1904:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <motor_power+0x1>
    1908:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <motor_power>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 8a 08 	call	0x1114	; 0x1114 <set_motor_power_raw>
    1914:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <motor_power>
    1918:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <motor_power+0x1>
    191c:	91 95       	neg	r25
    191e:	81 95       	neg	r24
    1920:	91 09       	sbc	r25, r1
    1922:	0e 94 8a 08 	call	0x1114	; 0x1114 <set_motor_power_raw>
    1926:	2f 96       	adiw	r28, 0x0f	; 15
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	bf 90       	pop	r11
    1944:	af 90       	pop	r10
    1946:	9f 90       	pop	r9
    1948:	8f 90       	pop	r8
    194a:	7f 90       	pop	r7
    194c:	6f 90       	pop	r6
    194e:	5f 90       	pop	r5
    1950:	4f 90       	pop	r4
    1952:	08 95       	ret

00001954 <set_motor_reverse>:

void set_motor_reverse(uint8_t r){
	reverse = r;
    1954:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <__data_end>
    1958:	08 95       	ret

0000195a <write_PWM>:
  uint8_t pin: The pin to set the PWM on (PE3, PE4, PE5)
  uint16_t pwm: 10-bit PWM value
*/
//void write_PWM(uint8_t port, uint8_t pin, uint16_t pwm){
void write_PWM(uint8_t pin, uint16_t pwm){
	pwm &= 1023;
    195a:	73 70       	andi	r23, 0x03	; 3
	switch(pin){
    195c:	84 30       	cpi	r24, 0x04	; 4
    195e:	71 f0       	breq	.+28     	; 0x197c <write_PWM+0x22>
    1960:	85 30       	cpi	r24, 0x05	; 5
    1962:	b1 f0       	breq	.+44     	; 0x1990 <write_PWM+0x36>
    1964:	83 30       	cpi	r24, 0x03	; 3
    1966:	e9 f4       	brne	.+58     	; 0x19a2 <write_PWM+0x48>
		case PE3:
			TCCR3A |= (1 << COM3A1);
    1968:	e0 e9       	ldi	r30, 0x90	; 144
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	80 68       	ori	r24, 0x80	; 128
    1970:	80 83       	st	Z, r24
			OCR3A = pwm;
    1972:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__DATA_REGION_ORIGIN__+0x39>
    1976:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__DATA_REGION_ORIGIN__+0x38>
			break;
    197a:	08 95       	ret
		case PE4:
			TCCR3A |= (1 << COM3B1);
    197c:	e0 e9       	ldi	r30, 0x90	; 144
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	80 62       	ori	r24, 0x20	; 32
    1984:	80 83       	st	Z, r24
			OCR3B = pwm;
    1986:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__DATA_REGION_ORIGIN__+0x3b>
    198a:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__DATA_REGION_ORIGIN__+0x3a>
			break;
    198e:	08 95       	ret
		case PE5:
			TCCR3A |= (1 << COM3C1);
    1990:	e0 e9       	ldi	r30, 0x90	; 144
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	88 60       	ori	r24, 0x08	; 8
    1998:	80 83       	st	Z, r24
			OCR3C = pwm;
    199a:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__DATA_REGION_ORIGIN__+0x3d>
    199e:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
    19a2:	08 95       	ret

000019a4 <__vector_13>:
ISR(TIMER1_COMPB_vect){
	PORTC &= ~(1<<4);
}

void inline servo_high(){
	PORTC |= 1<<4;
    19a4:	1f 92       	push	r1
    19a6:	0f 92       	push	r0
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	0f 92       	push	r0
    19ac:	11 24       	eor	r1, r1
    19ae:	44 98       	cbi	0x08, 4	; 8
    19b0:	0f 90       	pop	r0
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	0f 90       	pop	r0
    19b6:	1f 90       	pop	r1
    19b8:	18 95       	reti

000019ba <init_servo>:
}

void init_servo(){
	 TIMSK1 |= (1 << OCIE1B);
    19ba:	ef e6       	ldi	r30, 0x6F	; 111
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	84 60       	ori	r24, 0x04	; 4
    19c2:	80 83       	st	Z, r24
	 DDRC |= 1<<4;
    19c4:	3c 9a       	sbi	0x07, 4	; 7
	 OCR1B = 375;
    19c6:	87 e7       	ldi	r24, 0x77	; 119
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    19ce:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
    19d2:	08 95       	ret

000019d4 <set_servo_position>:
}

void set_servo_position(int degrees){
	if(degrees > 180) return;
    19d4:	85 3b       	cpi	r24, 0xB5	; 181
    19d6:	91 05       	cpc	r25, r1
    19d8:	ac f4       	brge	.+42     	; 0x1a04 <set_servo_position+0x30>
	if(degrees < 2) degrees = 2;
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	91 05       	cpc	r25, r1
    19de:	14 f4       	brge	.+4      	; 0x19e4 <set_servo_position+0x10>
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	90 e0       	ldi	r25, 0x00	; 0
	OCR1B = degrees * 2 + degrees / 2;
    19e4:	ac 01       	movw	r20, r24
    19e6:	44 0f       	add	r20, r20
    19e8:	55 1f       	adc	r21, r21
    19ea:	9c 01       	movw	r18, r24
    19ec:	99 23       	and	r25, r25
    19ee:	14 f4       	brge	.+4      	; 0x19f4 <set_servo_position+0x20>
    19f0:	2f 5f       	subi	r18, 0xFF	; 255
    19f2:	3f 4f       	sbci	r19, 0xFF	; 255
    19f4:	35 95       	asr	r19
    19f6:	27 95       	ror	r18
    19f8:	24 0f       	add	r18, r20
    19fa:	35 1f       	adc	r19, r21
    19fc:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    1a00:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
    1a04:	08 95       	ret

00001a06 <__vector_15>:

/*Returns the number of microseconds since system initialization*/
uint32_t get_uS(){
	uint16_t timer_ticks = TCNT1;
	return (TOF_Cnt * 20000) + (timer_ticks << 2);
}
    1a06:	1f 92       	push	r1
    1a08:	0f 92       	push	r0
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	0f 92       	push	r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	2f 93       	push	r18
    1a12:	3f 93       	push	r19
    1a14:	4f 93       	push	r20
    1a16:	5f 93       	push	r21
    1a18:	6f 93       	push	r22
    1a1a:	7f 93       	push	r23
    1a1c:	8f 93       	push	r24
    1a1e:	9f 93       	push	r25
    1a20:	af 93       	push	r26
    1a22:	bf 93       	push	r27
    1a24:	ef 93       	push	r30
    1a26:	ff 93       	push	r31
    1a28:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <TOF_Cnt>
    1a2c:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <TOF_Cnt+0x1>
    1a30:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <TOF_Cnt+0x2>
    1a34:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <TOF_Cnt+0x3>
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	a1 1d       	adc	r26, r1
    1a3c:	b1 1d       	adc	r27, r1
    1a3e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <TOF_Cnt>
    1a42:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <TOF_Cnt+0x1>
    1a46:	a0 93 a1 02 	sts	0x02A1, r26	; 0x8002a1 <TOF_Cnt+0x2>
    1a4a:	b0 93 a2 02 	sts	0x02A2, r27	; 0x8002a2 <TOF_Cnt+0x3>
    1a4e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <telem_timer>
    1a52:	8f 5f       	subi	r24, 0xFF	; 255
    1a54:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <telem_timer>
    1a58:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <TOF_Cnt>
    1a5c:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <TOF_Cnt+0x1>
    1a60:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <TOF_Cnt+0x2>
    1a64:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <TOF_Cnt+0x3>
    1a68:	87 70       	andi	r24, 0x07	; 7
    1a6a:	99 27       	eor	r25, r25
    1a6c:	aa 27       	eor	r26, r26
    1a6e:	bb 27       	eor	r27, r27
    1a70:	89 2b       	or	r24, r25
    1a72:	8a 2b       	or	r24, r26
    1a74:	8b 2b       	or	r24, r27
    1a76:	51 f4       	brne	.+20     	; 0x1a8c <__vector_15+0x86>
    1a78:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <TOF_Cnt>
    1a7c:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <TOF_Cnt+0x1>
    1a80:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <TOF_Cnt+0x2>
    1a84:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <TOF_Cnt+0x3>
    1a88:	0e 94 2e 10 	call	0x205c	; 0x205c <update_LEDS>
    1a8c:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <TOF_Cnt>
    1a90:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <TOF_Cnt+0x1>
    1a94:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <TOF_Cnt+0x2>
    1a98:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <TOF_Cnt+0x3>
    1a9c:	80 fd       	sbrc	r24, 0
    1a9e:	03 c0       	rjmp	.+6      	; 0x1aa6 <__vector_15+0xa0>
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <PID_due>
    1aa6:	ff 91       	pop	r31
    1aa8:	ef 91       	pop	r30
    1aaa:	bf 91       	pop	r27
    1aac:	af 91       	pop	r26
    1aae:	9f 91       	pop	r25
    1ab0:	8f 91       	pop	r24
    1ab2:	7f 91       	pop	r23
    1ab4:	6f 91       	pop	r22
    1ab6:	5f 91       	pop	r21
    1ab8:	4f 91       	pop	r20
    1aba:	3f 91       	pop	r19
    1abc:	2f 91       	pop	r18
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	0f 90       	pop	r0
    1ac4:	1f 90       	pop	r1
    1ac6:	18 95       	reti

00001ac8 <setup_timers>:
    1ac8:	83 e4       	ldi	r24, 0x43	; 67
    1aca:	84 bd       	out	0x24, r24	; 36
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1ad2:	9b e1       	ldi	r25, 0x1B	; 27
    1ad4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1ad8:	93 e0       	ldi	r25, 0x03	; 3
    1ada:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1ade:	28 e8       	ldi	r18, 0x88	; 136
    1ae0:	33 e1       	ldi	r19, 0x13	; 19
    1ae2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1ae6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1aea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1aee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1af2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1af6:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    1afa:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
    1afe:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <TOF_Cnt>
    1b02:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <TOF_Cnt+0x1>
    1b06:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <TOF_Cnt+0x2>
    1b0a:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <TOF_Cnt+0x3>
    1b0e:	08 95       	ret

00001b10 <get_mS>:
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <TOF_Cnt>
    1b18:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <TOF_Cnt+0x1>
    1b1c:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <TOF_Cnt+0x2>
    1b20:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <TOF_Cnt+0x3>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	aa 1f       	adc	r26, r26
    1b2a:	bb 1f       	adc	r27, r27
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	aa 1f       	adc	r26, r26
    1b32:	bb 1f       	adc	r27, r27
    1b34:	ac 01       	movw	r20, r24
    1b36:	bd 01       	movw	r22, r26
    1b38:	44 0f       	add	r20, r20
    1b3a:	55 1f       	adc	r21, r21
    1b3c:	66 1f       	adc	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	44 0f       	add	r20, r20
    1b42:	55 1f       	adc	r21, r21
    1b44:	66 1f       	adc	r22, r22
    1b46:	77 1f       	adc	r23, r23
    1b48:	8c 01       	movw	r16, r24
    1b4a:	9d 01       	movw	r18, r26
    1b4c:	04 0f       	add	r16, r20
    1b4e:	15 1f       	adc	r17, r21
    1b50:	26 1f       	adc	r18, r22
    1b52:	37 1f       	adc	r19, r23
    1b54:	c9 01       	movw	r24, r18
    1b56:	b8 01       	movw	r22, r16
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	08 95       	ret

00001b5e <delay_mS>:

/*delay for the specified number of milliseconds*/
void delay_mS(uint16_t mS){
    1b5e:	cf 92       	push	r12
    1b60:	df 92       	push	r13
    1b62:	ef 92       	push	r14
    1b64:	ff 92       	push	r15
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
	TOF_Cnt = 0; //Clear the overflow counter
}

/*Returns the number of milliseconds since timer initialization*/
uint32_t get_mS(){
	return (TOF_Cnt * 20);
    1b6a:	c0 90 9f 02 	lds	r12, 0x029F	; 0x80029f <TOF_Cnt>
    1b6e:	d0 90 a0 02 	lds	r13, 0x02A0	; 0x8002a0 <TOF_Cnt+0x1>
    1b72:	e0 90 a1 02 	lds	r14, 0x02A1	; 0x8002a1 <TOF_Cnt+0x2>
    1b76:	f0 90 a2 02 	lds	r15, 0x02A2	; 0x8002a2 <TOF_Cnt+0x3>
    1b7a:	cc 0c       	add	r12, r12
    1b7c:	dd 1c       	adc	r13, r13
    1b7e:	ee 1c       	adc	r14, r14
    1b80:	ff 1c       	adc	r15, r15
    1b82:	cc 0c       	add	r12, r12
    1b84:	dd 1c       	adc	r13, r13
    1b86:	ee 1c       	adc	r14, r14
    1b88:	ff 1c       	adc	r15, r15
    1b8a:	b7 01       	movw	r22, r14
    1b8c:	a6 01       	movw	r20, r12
    1b8e:	44 0f       	add	r20, r20
    1b90:	55 1f       	adc	r21, r21
    1b92:	66 1f       	adc	r22, r22
    1b94:	77 1f       	adc	r23, r23
    1b96:	44 0f       	add	r20, r20
    1b98:	55 1f       	adc	r21, r21
    1b9a:	66 1f       	adc	r22, r22
    1b9c:	77 1f       	adc	r23, r23
    1b9e:	c4 0e       	add	r12, r20
    1ba0:	d5 1e       	adc	r13, r21
    1ba2:	e6 1e       	adc	r14, r22
    1ba4:	f7 1e       	adc	r15, r23
}

/*delay for the specified number of milliseconds*/
void delay_mS(uint16_t mS){
	uint32_t start = get_mS();
	while(get_mS() - start < mS);
    1ba6:	a0 e0       	ldi	r26, 0x00	; 0
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
	TOF_Cnt = 0; //Clear the overflow counter
}

/*Returns the number of milliseconds since timer initialization*/
uint32_t get_mS(){
	return (TOF_Cnt * 20);
    1baa:	40 91 9f 02 	lds	r20, 0x029F	; 0x80029f <TOF_Cnt>
    1bae:	50 91 a0 02 	lds	r21, 0x02A0	; 0x8002a0 <TOF_Cnt+0x1>
    1bb2:	60 91 a1 02 	lds	r22, 0x02A1	; 0x8002a1 <TOF_Cnt+0x2>
    1bb6:	70 91 a2 02 	lds	r23, 0x02A2	; 0x8002a2 <TOF_Cnt+0x3>
}

/*delay for the specified number of milliseconds*/
void delay_mS(uint16_t mS){
	uint32_t start = get_mS();
	while(get_mS() - start < mS);
    1bba:	44 0f       	add	r20, r20
    1bbc:	55 1f       	adc	r21, r21
    1bbe:	66 1f       	adc	r22, r22
    1bc0:	77 1f       	adc	r23, r23
    1bc2:	44 0f       	add	r20, r20
    1bc4:	55 1f       	adc	r21, r21
    1bc6:	66 1f       	adc	r22, r22
    1bc8:	77 1f       	adc	r23, r23
    1bca:	8a 01       	movw	r16, r20
    1bcc:	9b 01       	movw	r18, r22
    1bce:	00 0f       	add	r16, r16
    1bd0:	11 1f       	adc	r17, r17
    1bd2:	22 1f       	adc	r18, r18
    1bd4:	33 1f       	adc	r19, r19
    1bd6:	00 0f       	add	r16, r16
    1bd8:	11 1f       	adc	r17, r17
    1bda:	22 1f       	adc	r18, r18
    1bdc:	33 1f       	adc	r19, r19
    1bde:	40 0f       	add	r20, r16
    1be0:	51 1f       	adc	r21, r17
    1be2:	62 1f       	adc	r22, r18
    1be4:	73 1f       	adc	r23, r19
    1be6:	4c 19       	sub	r20, r12
    1be8:	5d 09       	sbc	r21, r13
    1bea:	6e 09       	sbc	r22, r14
    1bec:	7f 09       	sbc	r23, r15
    1bee:	48 17       	cp	r20, r24
    1bf0:	59 07       	cpc	r21, r25
    1bf2:	6a 07       	cpc	r22, r26
    1bf4:	7b 07       	cpc	r23, r27
    1bf6:	c8 f2       	brcs	.-78     	; 0x1baa <delay_mS+0x4c>
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	df 90       	pop	r13
    1c02:	cf 90       	pop	r12
    1c04:	08 95       	ret

00001c06 <__vector_32>:
}

/*Returns the number of bytes waiting in the USART receive buffer*/
int usart_available(){
	return rxbp;
}
    1c06:	1f 92       	push	r1
    1c08:	0f 92       	push	r0
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	0f 92       	push	r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	8f 93       	push	r24
    1c12:	ef 93       	push	r30
    1c14:	ff 93       	push	r31
    1c16:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <rxbp>
    1c1a:	81 31       	cpi	r24, 0x11	; 17
    1c1c:	20 f0       	brcs	.+8      	; 0x1c26 <__vector_32+0x20>
    1c1e:	80 e1       	ldi	r24, 0x10	; 16
    1c20:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <rxbp>
    1c24:	0c c0       	rjmp	.+24     	; 0x1c3e <__vector_32+0x38>
    1c26:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <rxbp>
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	8e 0f       	add	r24, r30
    1c2e:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <rxbp>
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
    1c38:	eb 54       	subi	r30, 0x4B	; 75
    1c3a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c3c:	80 83       	st	Z, r24
    1c3e:	ff 91       	pop	r31
    1c40:	ef 91       	pop	r30
    1c42:	8f 91       	pop	r24
    1c44:	0f 90       	pop	r0
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	0f 90       	pop	r0
    1c4a:	1f 90       	pop	r1
    1c4c:	18 95       	reti

00001c4e <__vector_33>:
    1c4e:	1f 92       	push	r1
    1c50:	0f 92       	push	r0
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	0f 92       	push	r0
    1c56:	11 24       	eor	r1, r1
    1c58:	8f 93       	push	r24
    1c5a:	9f 93       	push	r25
    1c5c:	ef 93       	push	r30
    1c5e:	ff 93       	push	r31
    1c60:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <txbp>
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	8e 0f       	add	r24, r30
    1c68:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <txbp>
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	ed 55       	subi	r30, 0x5D	; 93
    1c70:	fd 4f       	sbci	r31, 0xFD	; 253
    1c72:	80 81       	ld	r24, Z
    1c74:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
    1c78:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <txbp>
    1c7c:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <txend>
    1c80:	98 17       	cp	r25, r24
    1c82:	20 f4       	brcc	.+8      	; 0x1c8c <__vector_33+0x3e>
    1c84:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <txbp>
    1c88:	81 31       	cpi	r24, 0x11	; 17
    1c8a:	48 f0       	brcs	.+18     	; 0x1c9e <__vector_33+0x50>
    1c8c:	e9 ec       	ldi	r30, 0xC9	; 201
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	8f 7d       	andi	r24, 0xDF	; 223
    1c94:	80 83       	st	Z, r24
    1c96:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <txend>
    1c9a:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <txbp>
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	9f 91       	pop	r25
    1ca4:	8f 91       	pop	r24
    1ca6:	0f 90       	pop	r0
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	0f 90       	pop	r0
    1cac:	1f 90       	pop	r1
    1cae:	18 95       	reti

00001cb0 <usart_write>:
    1cb0:	af 92       	push	r10
    1cb2:	bf 92       	push	r11
    1cb4:	cf 92       	push	r12
    1cb6:	df 92       	push	r13
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	1f 92       	push	r1
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	5c 01       	movw	r10, r24
    1cca:	16 2f       	mov	r17, r22
    1ccc:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <txend>
    1cd0:	88 23       	and	r24, r24
    1cd2:	29 f0       	breq	.+10     	; 0x1cde <usart_write+0x2e>
    1cd4:	e9 ec       	ldi	r30, 0xC9	; 201
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 62       	ori	r24, 0x20	; 32
    1cdc:	80 83       	st	Z, r24
    1cde:	11 23       	and	r17, r17
    1ce0:	a9 f1       	breq	.+106    	; 0x1d4c <usart_write+0x9c>
    1ce2:	68 94       	set
    1ce4:	cc 24       	eor	r12, r12
    1ce6:	c4 f8       	bld	r12, 4
    1ce8:	d1 2c       	mov	r13, r1
    1cea:	0f 2e       	mov	r0, r31
    1cec:	f9 ec       	ldi	r31, 0xC9	; 201
    1cee:	ef 2e       	mov	r14, r31
    1cf0:	f1 2c       	mov	r15, r1
    1cf2:	f0 2d       	mov	r31, r0
    1cf4:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <txend>
    1cf8:	8f 30       	cpi	r24, 0x0F	; 15
    1cfa:	e0 f7       	brcc	.-8      	; 0x1cf4 <usart_write+0x44>
    1cfc:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <txend>
    1d00:	21 2f       	mov	r18, r17
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e0       	ldi	r20, 0x00	; 0
    1d06:	50 e0       	ldi	r21, 0x00	; 0
    1d08:	b6 01       	movw	r22, r12
    1d0a:	68 1b       	sub	r22, r24
    1d0c:	71 09       	sbc	r23, r1
    1d0e:	07 2e       	mov	r0, r23
    1d10:	00 0c       	add	r0, r0
    1d12:	88 0b       	sbc	r24, r24
    1d14:	99 0b       	sbc	r25, r25
    1d16:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <min>
    1d1a:	69 83       	std	Y+1, r22	; 0x01
    1d1c:	49 81       	ldd	r20, Y+1	; 0x01
    1d1e:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <txend>
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	b5 01       	movw	r22, r10
    1d28:	8d 55       	subi	r24, 0x5D	; 93
    1d2a:	9d 4f       	sbci	r25, 0xFD	; 253
    1d2c:	0e 94 15 11 	call	0x222a	; 0x222a <memcpy>
    1d30:	99 81       	ldd	r25, Y+1	; 0x01
    1d32:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <txend>
    1d36:	89 0f       	add	r24, r25
    1d38:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <txend>
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	18 1b       	sub	r17, r24
    1d40:	f7 01       	movw	r30, r14
    1d42:	80 81       	ld	r24, Z
    1d44:	80 62       	ori	r24, 0x20	; 32
    1d46:	80 83       	st	Z, r24
    1d48:	11 11       	cpse	r17, r1
    1d4a:	d4 cf       	rjmp	.-88     	; 0x1cf4 <usart_write+0x44>
    1d4c:	0f 90       	pop	r0
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	df 90       	pop	r13
    1d5a:	cf 90       	pop	r12
    1d5c:	bf 90       	pop	r11
    1d5e:	af 90       	pop	r10
    1d60:	08 95       	ret

00001d62 <usart_init>:
    1d62:	9b 01       	movw	r18, r22
    1d64:	ac 01       	movw	r20, r24
    1d66:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <rxbp>
    1d6a:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <txend>
    1d6e:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <txbp>
    1d72:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
    1d76:	60 e4       	ldi	r22, 0x40	; 64
    1d78:	72 e4       	ldi	r23, 0x42	; 66
    1d7a:	8f e0       	ldi	r24, 0x0F	; 15
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	0e 94 ba 10 	call	0x2174	; 0x2174 <__udivmodsi4>
    1d82:	21 50       	subi	r18, 0x01	; 1
    1d84:	31 09       	sbc	r19, r1
    1d86:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
    1d8a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
    1d8e:	86 e0       	ldi	r24, 0x06	; 6
    1d90:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
    1d94:	88 e9       	ldi	r24, 0x98	; 152
    1d96:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
    1d9a:	08 95       	ret

00001d9c <usart_write_char>:
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	1f 92       	push	r1
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	8a 30       	cpi	r24, 0x0A	; 10
    1daa:	19 f4       	brne	.+6      	; 0x1db2 <usart_write_char+0x16>
    1dac:	8d e0       	ldi	r24, 0x0D	; 13
    1dae:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <usart_write_char>
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	ce 01       	movw	r24, r28
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <usart_write>
    1dbc:	0f 90       	pop	r0
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	08 95       	ret

00001dc4 <usart_write_string>:
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	00 20       	and	r0, r0
    1dca:	e9 f7       	brne	.-6      	; 0x1dc6 <usart_write_string+0x2>
    1dcc:	31 97       	sbiw	r30, 0x01	; 1
    1dce:	bf 01       	movw	r22, r30
    1dd0:	68 1b       	sub	r22, r24
    1dd2:	79 0b       	sbc	r23, r25
    1dd4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <usart_write>
    1dd8:	08 95       	ret

00001dda <tprintf>:

/*Tiny implementation of prinf()*/
void tprintf(const char *fmt, ...){
    1dda:	2f 92       	push	r2
    1ddc:	3f 92       	push	r3
    1dde:	4f 92       	push	r4
    1de0:	5f 92       	push	r5
    1de2:	6f 92       	push	r6
    1de4:	7f 92       	push	r7
    1de6:	8f 92       	push	r8
    1de8:	9f 92       	push	r9
    1dea:	af 92       	push	r10
    1dec:	bf 92       	push	r11
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	2b 97       	sbiw	r28, 0x0b	; 11
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	fe 01       	movw	r30, r28
    1e10:	b0 96       	adiw	r30, 0x20	; 32
    1e12:	e1 90       	ld	r14, Z+
    1e14:	f1 90       	ld	r15, Z+
	va_list va;
	va_start(va, fmt);
    1e16:	6f 01       	movw	r12, r30
	int i = 0;
	int32_t l;
	char buf[9],c;
	for(i = 0;c=fmt[i];i++){
    1e18:	f7 01       	movw	r30, r14
    1e1a:	b0 80       	ld	r11, Z
    1e1c:	bb 20       	and	r11, r11
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <tprintf+0x48>
    1e20:	d2 c0       	rjmp	.+420    	; 0x1fc6 <tprintf+0x1ec>
    1e22:	00 e0       	ldi	r16, 0x00	; 0
    1e24:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1e26:	0f 2e       	mov	r0, r31
    1e28:	f0 e1       	ldi	r31, 0x10	; 16
    1e2a:	4f 2e       	mov	r4, r31
    1e2c:	f7 e2       	ldi	r31, 0x27	; 39
    1e2e:	5f 2e       	mov	r5, r31
    1e30:	61 2c       	mov	r6, r1
    1e32:	71 2c       	mov	r7, r1
    1e34:	f0 2d       	mov	r31, r0
		if(c != '%'){
    1e36:	f5 e2       	ldi	r31, 0x25	; 37
    1e38:	bf 16       	cp	r11, r31
    1e3a:	d1 f0       	breq	.+52     	; 0x1e70 <tprintf+0x96>
			usart_write_char(c);
    1e3c:	8b 2d       	mov	r24, r11
    1e3e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <usart_write_char>
		}
	if(c == '\\'){
    1e42:	2c e5       	ldi	r18, 0x5C	; 92
    1e44:	b2 12       	cpse	r11, r18
    1e46:	b7 c0       	rjmp	.+366    	; 0x1fb6 <tprintf+0x1dc>
		c = fmt[++i];
    1e48:	0f 5f       	subi	r16, 0xFF	; 255
    1e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4c:	f7 01       	movw	r30, r14
    1e4e:	e0 0f       	add	r30, r16
    1e50:	f1 1f       	adc	r31, r17
    1e52:	80 81       	ld	r24, Z
		switch(c){
    1e54:	8a 30       	cpi	r24, 0x0A	; 10
    1e56:	29 f0       	breq	.+10     	; 0x1e62 <tprintf+0x88>
    1e58:	8c 35       	cpi	r24, 0x5C	; 92
    1e5a:	39 f4       	brne	.+14     	; 0x1e6a <tprintf+0x90>
			case '\\':
				usart_write_char('\\');
    1e5c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <usart_write_char>
				break;
    1e60:	aa c0       	rjmp	.+340    	; 0x1fb6 <tprintf+0x1dc>
			case '\n':
				usart_write_char('\n');
    1e62:	8a e0       	ldi	r24, 0x0A	; 10
    1e64:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <usart_write_char>
				break;
    1e68:	a6 c0       	rjmp	.+332    	; 0x1fb6 <tprintf+0x1dc>
		}
	}
	if(c == '%'){
    1e6a:	85 32       	cpi	r24, 0x25	; 37
    1e6c:	09 f0       	breq	.+2      	; 0x1e70 <tprintf+0x96>
    1e6e:	a3 c0       	rjmp	.+326    	; 0x1fb6 <tprintf+0x1dc>
		c=fmt[++i];
    1e70:	0f 5f       	subi	r16, 0xFF	; 255
    1e72:	1f 4f       	sbci	r17, 0xFF	; 255
    1e74:	f7 01       	movw	r30, r14
    1e76:	e0 0f       	add	r30, r16
    1e78:	f1 1f       	adc	r31, r17
		switch(c){
    1e7a:	80 81       	ld	r24, Z
    1e7c:	84 36       	cpi	r24, 0x64	; 100
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <tprintf+0xa8>
    1e80:	75 c0       	rjmp	.+234    	; 0x1f6c <tprintf+0x192>
    1e82:	38 f4       	brcc	.+14     	; 0x1e92 <tprintf+0xb8>
    1e84:	88 35       	cpi	r24, 0x58	; 88
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <tprintf+0xb0>
    1e88:	5e c0       	rjmp	.+188    	; 0x1f46 <tprintf+0x16c>
    1e8a:	83 36       	cpi	r24, 0x63	; 99
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <tprintf+0xb6>
    1e8e:	88 c0       	rjmp	.+272    	; 0x1fa0 <tprintf+0x1c6>
    1e90:	8f c0       	rjmp	.+286    	; 0x1fb0 <tprintf+0x1d6>
    1e92:	8c 36       	cpi	r24, 0x6C	; 108
    1e94:	21 f0       	breq	.+8      	; 0x1e9e <tprintf+0xc4>
    1e96:	83 37       	cpi	r24, 0x73	; 115
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <tprintf+0xc2>
    1e9a:	79 c0       	rjmp	.+242    	; 0x1f8e <tprintf+0x1b4>
    1e9c:	89 c0       	rjmp	.+274    	; 0x1fb0 <tprintf+0x1d6>
			case 'l':
				l = va_arg(va, int32_t);
    1e9e:	c6 01       	movw	r24, r12
    1ea0:	04 96       	adiw	r24, 0x04	; 4
    1ea2:	9b 87       	std	Y+11, r25	; 0x0b
    1ea4:	8a 87       	std	Y+10, r24	; 0x0a
    1ea6:	f6 01       	movw	r30, r12
    1ea8:	80 80       	ld	r8, Z
    1eaa:	91 80       	ldd	r9, Z+1	; 0x01
    1eac:	a2 80       	ldd	r10, Z+2	; 0x02
    1eae:	b3 80       	ldd	r11, Z+3	; 0x03
				if(l > 32767){
    1eb0:	81 14       	cp	r8, r1
    1eb2:	f0 e8       	ldi	r31, 0x80	; 128
    1eb4:	9f 06       	cpc	r9, r31
    1eb6:	a1 04       	cpc	r10, r1
    1eb8:	b1 04       	cpc	r11, r1
    1eba:	bc f1       	brlt	.+110    	; 0x1f2a <tprintf+0x150>
    1ebc:	c5 01       	movw	r24, r10
    1ebe:	b4 01       	movw	r22, r8
    1ec0:	a3 01       	movw	r20, r6
    1ec2:	92 01       	movw	r18, r4
    1ec4:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__divmodsi4>
    1ec8:	49 01       	movw	r8, r18
    1eca:	5a 01       	movw	r10, r20
    1ecc:	c6 2e       	mov	r12, r22
    1ece:	d7 2e       	mov	r13, r23
    1ed0:	28 2e       	mov	r2, r24
    1ed2:	39 2e       	mov	r3, r25
    1ed4:	4a e0       	ldi	r20, 0x0A	; 10
    1ed6:	be 01       	movw	r22, r28
    1ed8:	6f 5f       	subi	r22, 0xFF	; 255
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	c4 01       	movw	r24, r8
    1ede:	0e 94 1e 11 	call	0x223c	; 0x223c <__itoa_ncheck>
					itoa(l/10000, buf, 10);
					usart_write_string(buf);
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	01 96       	adiw	r24, 0x01	; 1
    1ee6:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <usart_write_string>
					l %= 10000;
    1eea:	8c 2c       	mov	r8, r12
    1eec:	9d 2c       	mov	r9, r13
    1eee:	a2 2c       	mov	r10, r2
    1ef0:	b3 2c       	mov	r11, r3
					if(l < 1000){
    1ef2:	28 ee       	ldi	r18, 0xE8	; 232
    1ef4:	82 16       	cp	r8, r18
    1ef6:	23 e0       	ldi	r18, 0x03	; 3
    1ef8:	92 06       	cpc	r9, r18
    1efa:	a1 04       	cpc	r10, r1
    1efc:	b1 04       	cpc	r11, r1
    1efe:	1c f4       	brge	.+6      	; 0x1f06 <tprintf+0x12c>
						usart_write_char('0');
    1f00:	80 e3       	ldi	r24, 0x30	; 48
    1f02:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <usart_write_char>
					}
					if(l < 100){
    1f06:	84 e6       	ldi	r24, 0x64	; 100
    1f08:	88 16       	cp	r8, r24
    1f0a:	91 04       	cpc	r9, r1
    1f0c:	a1 04       	cpc	r10, r1
    1f0e:	b1 04       	cpc	r11, r1
    1f10:	1c f4       	brge	.+6      	; 0x1f18 <tprintf+0x13e>
						usart_write_char('0');
    1f12:	80 e3       	ldi	r24, 0x30	; 48
    1f14:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <usart_write_char>
					}
					if(l < 10){
    1f18:	9a e0       	ldi	r25, 0x0A	; 10
    1f1a:	89 16       	cp	r8, r25
    1f1c:	91 04       	cpc	r9, r1
    1f1e:	a1 04       	cpc	r10, r1
    1f20:	b1 04       	cpc	r11, r1
    1f22:	1c f4       	brge	.+6      	; 0x1f2a <tprintf+0x150>
						usart_write_char('0');
    1f24:	80 e3       	ldi	r24, 0x30	; 48
    1f26:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <usart_write_char>
    1f2a:	4a e0       	ldi	r20, 0x0A	; 10
    1f2c:	be 01       	movw	r22, r28
    1f2e:	6f 5f       	subi	r22, 0xFF	; 255
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	c4 01       	movw	r24, r8
    1f34:	0e 94 1e 11 	call	0x223c	; 0x223c <__itoa_ncheck>
					}
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
    1f38:	ce 01       	movw	r24, r28
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <usart_write_string>
	}
	if(c == '%'){
		c=fmt[++i];
		switch(c){
			case 'l':
				l = va_arg(va, int32_t);
    1f40:	ca 84       	ldd	r12, Y+10	; 0x0a
    1f42:	db 84       	ldd	r13, Y+11	; 0x0b
						usart_write_char('0');
					}
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
				break;
    1f44:	38 c0       	rjmp	.+112    	; 0x1fb6 <tprintf+0x1dc>
			case 'X':
				itoa(va_arg(va, int32_t), buf, 16);
    1f46:	56 01       	movw	r10, r12
    1f48:	e4 e0       	ldi	r30, 0x04	; 4
    1f4a:	ae 0e       	add	r10, r30
    1f4c:	b1 1c       	adc	r11, r1
    1f4e:	40 e1       	ldi	r20, 0x10	; 16
    1f50:	be 01       	movw	r22, r28
    1f52:	6f 5f       	subi	r22, 0xFF	; 255
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	f6 01       	movw	r30, r12
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	0e 94 1e 11 	call	0x223c	; 0x223c <__itoa_ncheck>
				usart_write_string(buf);
    1f60:	ce 01       	movw	r24, r28
    1f62:	01 96       	adiw	r24, 0x01	; 1
    1f64:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <usart_write_string>
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
				break;
			case 'X':
				itoa(va_arg(va, int32_t), buf, 16);
    1f68:	65 01       	movw	r12, r10
				usart_write_string(buf);
				break;
    1f6a:	25 c0       	rjmp	.+74     	; 0x1fb6 <tprintf+0x1dc>
			case 'd':
				itoa(va_arg(va, int), buf, 10);
    1f6c:	f6 01       	movw	r30, r12
    1f6e:	4a e0       	ldi	r20, 0x0A	; 10
    1f70:	be 01       	movw	r22, r28
    1f72:	6f 5f       	subi	r22, 0xFF	; 255
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	80 81       	ld	r24, Z
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	f2 e0       	ldi	r31, 0x02	; 2
    1f7c:	cf 0e       	add	r12, r31
    1f7e:	d1 1c       	adc	r13, r1
    1f80:	0e 94 1e 11 	call	0x223c	; 0x223c <__itoa_ncheck>
				usart_write_string(buf);
    1f84:	ce 01       	movw	r24, r28
    1f86:	01 96       	adiw	r24, 0x01	; 1
    1f88:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <usart_write_string>
				break;
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <tprintf+0x1dc>
			case 's':
				usart_write_string(va_arg(va, char*));
    1f8e:	f6 01       	movw	r30, r12
    1f90:	80 81       	ld	r24, Z
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	22 e0       	ldi	r18, 0x02	; 2
    1f96:	c2 0e       	add	r12, r18
    1f98:	d1 1c       	adc	r13, r1
    1f9a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <usart_write_string>
				break;
    1f9e:	0b c0       	rjmp	.+22     	; 0x1fb6 <tprintf+0x1dc>
			case 'c':
				usart_write_char(va_arg(va, int));
    1fa0:	f6 01       	movw	r30, r12
    1fa2:	80 81       	ld	r24, Z
    1fa4:	92 e0       	ldi	r25, 0x02	; 2
    1fa6:	c9 0e       	add	r12, r25
    1fa8:	d1 1c       	adc	r13, r1
    1faa:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <usart_write_char>
				break;
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <tprintf+0x1dc>
			default:
				usart_write_char('?');
    1fb0:	8f e3       	ldi	r24, 0x3F	; 63
    1fb2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <usart_write_char>
	va_list va;
	va_start(va, fmt);
	int i = 0;
	int32_t l;
	char buf[9],c;
	for(i = 0;c=fmt[i];i++){
    1fb6:	0f 5f       	subi	r16, 0xFF	; 255
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	f7 01       	movw	r30, r14
    1fbc:	e0 0f       	add	r30, r16
    1fbe:	f1 1f       	adc	r31, r17
    1fc0:	b0 80       	ld	r11, Z
    1fc2:	b1 10       	cpse	r11, r1
    1fc4:	38 cf       	rjmp	.-400    	; 0x1e36 <tprintf+0x5c>
				usart_write_char('?');
				break;
			}
		}
	}
    1fc6:	2b 96       	adiw	r28, 0x0b	; 11
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	ff 90       	pop	r15
    1fdc:	ef 90       	pop	r14
    1fde:	df 90       	pop	r13
    1fe0:	cf 90       	pop	r12
    1fe2:	bf 90       	pop	r11
    1fe4:	af 90       	pop	r10
    1fe6:	9f 90       	pop	r9
    1fe8:	8f 90       	pop	r8
    1fea:	7f 90       	pop	r7
    1fec:	6f 90       	pop	r6
    1fee:	5f 90       	pop	r5
    1ff0:	4f 90       	pop	r4
    1ff2:	3f 90       	pop	r3
    1ff4:	2f 90       	pop	r2
    1ff6:	08 95       	ret

00001ff8 <min>:
Returns:
the number of encoder ticks
*/
int16_t deg_to_ticks(int16_t d){
	return ((int32_t)d * (int32_t)ticks_per_degree_x10) / 10L;
}
    1ff8:	62 17       	cp	r22, r18
    1ffa:	73 07       	cpc	r23, r19
    1ffc:	84 07       	cpc	r24, r20
    1ffe:	95 07       	cpc	r25, r21
    2000:	14 f4       	brge	.+4      	; 0x2006 <min+0xe>
    2002:	9b 01       	movw	r18, r22
    2004:	ac 01       	movw	r20, r24
    2006:	ca 01       	movw	r24, r20
    2008:	b9 01       	movw	r22, r18
    200a:	08 95       	ret

0000200c <set_LED>:
    200c:	84 30       	cpi	r24, 0x04	; 4
    200e:	f8 f4       	brcc	.+62     	; 0x204e <set_LED+0x42>
    2010:	64 30       	cpi	r22, 0x04	; 4
    2012:	e8 f4       	brcc	.+58     	; 0x204e <set_LED+0x42>
    2014:	9f ef       	ldi	r25, 0xFF	; 255
    2016:	96 0f       	add	r25, r22
    2018:	92 30       	cpi	r25, 0x02	; 2
    201a:	18 f4       	brcc	.+6      	; 0x2022 <set_LED+0x16>
    201c:	93 e0       	ldi	r25, 0x03	; 3
    201e:	96 1b       	sub	r25, r22
    2020:	69 2f       	mov	r22, r25
    2022:	88 0f       	add	r24, r24
    2024:	23 e0       	ldi	r18, 0x03	; 3
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	08 2e       	mov	r0, r24
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <set_LED+0x24>
    202c:	22 0f       	add	r18, r18
    202e:	33 1f       	adc	r19, r19
    2030:	0a 94       	dec	r0
    2032:	e2 f7       	brpl	.-8      	; 0x202c <set_LED+0x20>
    2034:	20 95       	com	r18
    2036:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <LED_states>
    203a:	29 23       	and	r18, r25
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <set_LED+0x38>
    2040:	66 0f       	add	r22, r22
    2042:	77 1f       	adc	r23, r23
    2044:	8a 95       	dec	r24
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <set_LED+0x34>
    2048:	62 2b       	or	r22, r18
    204a:	60 93 c6 02 	sts	0x02C6, r22	; 0x8002c6 <LED_states>
    204e:	08 95       	ret

00002050 <int_abs>:
    2050:	99 23       	and	r25, r25
    2052:	1c f4       	brge	.+6      	; 0x205a <int_abs+0xa>
    2054:	91 95       	neg	r25
    2056:	81 95       	neg	r24
    2058:	91 09       	sbc	r25, r1
    205a:	08 95       	ret

0000205c <update_LEDS>:
    205c:	ef 92       	push	r14
    205e:	ff 92       	push	r15
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	7c 01       	movw	r14, r24
    206a:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <LED_states>
    206e:	81 11       	cpse	r24, r1
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <update_LEDS+0x1a>
    2072:	12 b8       	out	0x02, r1	; 2
    2074:	3b c0       	rjmp	.+118    	; 0x20ec <update_LEDS+0x90>
    2076:	e4 e0       	ldi	r30, 0x04	; 4
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	c0 e0       	ldi	r28, 0x00	; 0
    207c:	d0 e0       	ldi	r29, 0x00	; 0
    207e:	01 e0       	ldi	r16, 0x01	; 1
    2080:	10 e0       	ldi	r17, 0x00	; 0
    2082:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <LED_states>
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0c 2e       	mov	r0, r28
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <update_LEDS+0x34>
    208c:	95 95       	asr	r25
    208e:	87 95       	ror	r24
    2090:	0a 94       	dec	r0
    2092:	e2 f7       	brpl	.-8      	; 0x208c <update_LEDS+0x30>
    2094:	28 2f       	mov	r18, r24
    2096:	23 70       	andi	r18, 0x03	; 3
    2098:	69 f0       	breq	.+26     	; 0x20b4 <update_LEDS+0x58>
    209a:	62 2f       	mov	r22, r18
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	66 0f       	add	r22, r22
    20a0:	77 1f       	adc	r23, r23
    20a2:	6f 5f       	subi	r22, 0xFF	; 255
    20a4:	7f 4f       	sbci	r23, 0xFF	; 255
    20a6:	c7 01       	movw	r24, r14
    20a8:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodhi4>
    20ac:	89 2b       	or	r24, r25
    20ae:	79 f0       	breq	.+30     	; 0x20ce <update_LEDS+0x72>
    20b0:	23 30       	cpi	r18, 0x03	; 3
    20b2:	69 f0       	breq	.+26     	; 0x20ce <update_LEDS+0x72>
    20b4:	92 b1       	in	r25, 0x02	; 2
    20b6:	98 01       	movw	r18, r16
    20b8:	0e 2e       	mov	r0, r30
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <update_LEDS+0x64>
    20bc:	22 0f       	add	r18, r18
    20be:	33 1f       	adc	r19, r19
    20c0:	0a 94       	dec	r0
    20c2:	e2 f7       	brpl	.-8      	; 0x20bc <update_LEDS+0x60>
    20c4:	82 2f       	mov	r24, r18
    20c6:	80 95       	com	r24
    20c8:	89 23       	and	r24, r25
    20ca:	82 b9       	out	0x02, r24	; 2
    20cc:	0a c0       	rjmp	.+20     	; 0x20e2 <update_LEDS+0x86>
    20ce:	22 b1       	in	r18, 0x02	; 2
    20d0:	c8 01       	movw	r24, r16
    20d2:	0e 2e       	mov	r0, r30
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <update_LEDS+0x7e>
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	0a 94       	dec	r0
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <update_LEDS+0x7a>
    20de:	82 2b       	or	r24, r18
    20e0:	82 b9       	out	0x02, r24	; 2
    20e2:	22 96       	adiw	r28, 0x02	; 2
    20e4:	31 96       	adiw	r30, 0x01	; 1
    20e6:	e8 30       	cpi	r30, 0x08	; 8
    20e8:	f1 05       	cpc	r31, r1
    20ea:	59 f6       	brne	.-106    	; 0x2082 <update_LEDS+0x26>
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	ef 90       	pop	r14
    20f8:	08 95       	ret

000020fa <set_ticks_per_10degrees>:
/*Sets a new ratio of ticks to degrees.
Parameters:
uint16_t tpd: the number of encoder ticks in 10 degrees of rotation
*/
void set_ticks_per_10degrees(uint16_t tpd){
	ticks_per_degree_x10 = tpd;
    20fa:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ticks_per_degree_x10+0x1>
    20fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ticks_per_degree_x10>
    2102:	08 95       	ret

00002104 <__mulsi3>:
    2104:	db 01       	movw	r26, r22
    2106:	8f 93       	push	r24
    2108:	9f 93       	push	r25
    210a:	0e 94 0a 11 	call	0x2214	; 0x2214 <__muluhisi3>
    210e:	bf 91       	pop	r27
    2110:	af 91       	pop	r26
    2112:	a2 9f       	mul	r26, r18
    2114:	80 0d       	add	r24, r0
    2116:	91 1d       	adc	r25, r1
    2118:	a3 9f       	mul	r26, r19
    211a:	90 0d       	add	r25, r0
    211c:	b2 9f       	mul	r27, r18
    211e:	90 0d       	add	r25, r0
    2120:	11 24       	eor	r1, r1
    2122:	08 95       	ret

00002124 <__udivmodhi4>:
    2124:	aa 1b       	sub	r26, r26
    2126:	bb 1b       	sub	r27, r27
    2128:	51 e1       	ldi	r21, 0x11	; 17
    212a:	07 c0       	rjmp	.+14     	; 0x213a <__udivmodhi4_ep>

0000212c <__udivmodhi4_loop>:
    212c:	aa 1f       	adc	r26, r26
    212e:	bb 1f       	adc	r27, r27
    2130:	a6 17       	cp	r26, r22
    2132:	b7 07       	cpc	r27, r23
    2134:	10 f0       	brcs	.+4      	; 0x213a <__udivmodhi4_ep>
    2136:	a6 1b       	sub	r26, r22
    2138:	b7 0b       	sbc	r27, r23

0000213a <__udivmodhi4_ep>:
    213a:	88 1f       	adc	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	5a 95       	dec	r21
    2140:	a9 f7       	brne	.-22     	; 0x212c <__udivmodhi4_loop>
    2142:	80 95       	com	r24
    2144:	90 95       	com	r25
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	08 95       	ret

0000214c <__divmodhi4>:
    214c:	97 fb       	bst	r25, 7
    214e:	07 2e       	mov	r0, r23
    2150:	16 f4       	brtc	.+4      	; 0x2156 <__divmodhi4+0xa>
    2152:	00 94       	com	r0
    2154:	07 d0       	rcall	.+14     	; 0x2164 <__divmodhi4_neg1>
    2156:	77 fd       	sbrc	r23, 7
    2158:	09 d0       	rcall	.+18     	; 0x216c <__divmodhi4_neg2>
    215a:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodhi4>
    215e:	07 fc       	sbrc	r0, 7
    2160:	05 d0       	rcall	.+10     	; 0x216c <__divmodhi4_neg2>
    2162:	3e f4       	brtc	.+14     	; 0x2172 <__divmodhi4_exit>

00002164 <__divmodhi4_neg1>:
    2164:	90 95       	com	r25
    2166:	81 95       	neg	r24
    2168:	9f 4f       	sbci	r25, 0xFF	; 255
    216a:	08 95       	ret

0000216c <__divmodhi4_neg2>:
    216c:	70 95       	com	r23
    216e:	61 95       	neg	r22
    2170:	7f 4f       	sbci	r23, 0xFF	; 255

00002172 <__divmodhi4_exit>:
    2172:	08 95       	ret

00002174 <__udivmodsi4>:
    2174:	a1 e2       	ldi	r26, 0x21	; 33
    2176:	1a 2e       	mov	r1, r26
    2178:	aa 1b       	sub	r26, r26
    217a:	bb 1b       	sub	r27, r27
    217c:	fd 01       	movw	r30, r26
    217e:	0d c0       	rjmp	.+26     	; 0x219a <__udivmodsi4_ep>

00002180 <__udivmodsi4_loop>:
    2180:	aa 1f       	adc	r26, r26
    2182:	bb 1f       	adc	r27, r27
    2184:	ee 1f       	adc	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	a2 17       	cp	r26, r18
    218a:	b3 07       	cpc	r27, r19
    218c:	e4 07       	cpc	r30, r20
    218e:	f5 07       	cpc	r31, r21
    2190:	20 f0       	brcs	.+8      	; 0x219a <__udivmodsi4_ep>
    2192:	a2 1b       	sub	r26, r18
    2194:	b3 0b       	sbc	r27, r19
    2196:	e4 0b       	sbc	r30, r20
    2198:	f5 0b       	sbc	r31, r21

0000219a <__udivmodsi4_ep>:
    219a:	66 1f       	adc	r22, r22
    219c:	77 1f       	adc	r23, r23
    219e:	88 1f       	adc	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	1a 94       	dec	r1
    21a4:	69 f7       	brne	.-38     	; 0x2180 <__udivmodsi4_loop>
    21a6:	60 95       	com	r22
    21a8:	70 95       	com	r23
    21aa:	80 95       	com	r24
    21ac:	90 95       	com	r25
    21ae:	9b 01       	movw	r18, r22
    21b0:	ac 01       	movw	r20, r24
    21b2:	bd 01       	movw	r22, r26
    21b4:	cf 01       	movw	r24, r30
    21b6:	08 95       	ret

000021b8 <__divmodsi4>:
    21b8:	05 2e       	mov	r0, r21
    21ba:	97 fb       	bst	r25, 7
    21bc:	1e f4       	brtc	.+6      	; 0x21c4 <__divmodsi4+0xc>
    21be:	00 94       	com	r0
    21c0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__negsi2>
    21c4:	57 fd       	sbrc	r21, 7
    21c6:	07 d0       	rcall	.+14     	; 0x21d6 <__divmodsi4_neg2>
    21c8:	0e 94 ba 10 	call	0x2174	; 0x2174 <__udivmodsi4>
    21cc:	07 fc       	sbrc	r0, 7
    21ce:	03 d0       	rcall	.+6      	; 0x21d6 <__divmodsi4_neg2>
    21d0:	4e f4       	brtc	.+18     	; 0x21e4 <__divmodsi4_exit>
    21d2:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__negsi2>

000021d6 <__divmodsi4_neg2>:
    21d6:	50 95       	com	r21
    21d8:	40 95       	com	r20
    21da:	30 95       	com	r19
    21dc:	21 95       	neg	r18
    21de:	3f 4f       	sbci	r19, 0xFF	; 255
    21e0:	4f 4f       	sbci	r20, 0xFF	; 255
    21e2:	5f 4f       	sbci	r21, 0xFF	; 255

000021e4 <__divmodsi4_exit>:
    21e4:	08 95       	ret

000021e6 <__negsi2>:
    21e6:	90 95       	com	r25
    21e8:	80 95       	com	r24
    21ea:	70 95       	com	r23
    21ec:	61 95       	neg	r22
    21ee:	7f 4f       	sbci	r23, 0xFF	; 255
    21f0:	8f 4f       	sbci	r24, 0xFF	; 255
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	08 95       	ret

000021f6 <__umulhisi3>:
    21f6:	a2 9f       	mul	r26, r18
    21f8:	b0 01       	movw	r22, r0
    21fa:	b3 9f       	mul	r27, r19
    21fc:	c0 01       	movw	r24, r0
    21fe:	a3 9f       	mul	r26, r19
    2200:	70 0d       	add	r23, r0
    2202:	81 1d       	adc	r24, r1
    2204:	11 24       	eor	r1, r1
    2206:	91 1d       	adc	r25, r1
    2208:	b2 9f       	mul	r27, r18
    220a:	70 0d       	add	r23, r0
    220c:	81 1d       	adc	r24, r1
    220e:	11 24       	eor	r1, r1
    2210:	91 1d       	adc	r25, r1
    2212:	08 95       	ret

00002214 <__muluhisi3>:
    2214:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__umulhisi3>
    2218:	a5 9f       	mul	r26, r21
    221a:	90 0d       	add	r25, r0
    221c:	b4 9f       	mul	r27, r20
    221e:	90 0d       	add	r25, r0
    2220:	a4 9f       	mul	r26, r20
    2222:	80 0d       	add	r24, r0
    2224:	91 1d       	adc	r25, r1
    2226:	11 24       	eor	r1, r1
    2228:	08 95       	ret

0000222a <memcpy>:
    222a:	fb 01       	movw	r30, r22
    222c:	dc 01       	movw	r26, r24
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <memcpy+0xa>
    2230:	01 90       	ld	r0, Z+
    2232:	0d 92       	st	X+, r0
    2234:	41 50       	subi	r20, 0x01	; 1
    2236:	50 40       	sbci	r21, 0x00	; 0
    2238:	d8 f7       	brcc	.-10     	; 0x2230 <memcpy+0x6>
    223a:	08 95       	ret

0000223c <__itoa_ncheck>:
    223c:	bb 27       	eor	r27, r27
    223e:	4a 30       	cpi	r20, 0x0A	; 10
    2240:	31 f4       	brne	.+12     	; 0x224e <__itoa_ncheck+0x12>
    2242:	99 23       	and	r25, r25
    2244:	22 f4       	brpl	.+8      	; 0x224e <__itoa_ncheck+0x12>
    2246:	bd e2       	ldi	r27, 0x2D	; 45
    2248:	90 95       	com	r25
    224a:	81 95       	neg	r24
    224c:	9f 4f       	sbci	r25, 0xFF	; 255
    224e:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__utoa_common>

00002252 <__utoa_ncheck>:
    2252:	bb 27       	eor	r27, r27

00002254 <__utoa_common>:
    2254:	fb 01       	movw	r30, r22
    2256:	55 27       	eor	r21, r21
    2258:	aa 27       	eor	r26, r26
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	aa 1f       	adc	r26, r26
    2260:	a4 17       	cp	r26, r20
    2262:	10 f0       	brcs	.+4      	; 0x2268 <__utoa_common+0x14>
    2264:	a4 1b       	sub	r26, r20
    2266:	83 95       	inc	r24
    2268:	50 51       	subi	r21, 0x10	; 16
    226a:	b9 f7       	brne	.-18     	; 0x225a <__utoa_common+0x6>
    226c:	a0 5d       	subi	r26, 0xD0	; 208
    226e:	aa 33       	cpi	r26, 0x3A	; 58
    2270:	08 f0       	brcs	.+2      	; 0x2274 <__utoa_common+0x20>
    2272:	a9 5d       	subi	r26, 0xD9	; 217
    2274:	a1 93       	st	Z+, r26
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	79 f7       	brne	.-34     	; 0x2258 <__utoa_common+0x4>
    227a:	b1 11       	cpse	r27, r1
    227c:	b1 93       	st	Z+, r27
    227e:	11 92       	st	Z+, r1
    2280:	cb 01       	movw	r24, r22
    2282:	0c 94 43 11 	jmp	0x2286	; 0x2286 <strrev>

00002286 <strrev>:
    2286:	dc 01       	movw	r26, r24
    2288:	fc 01       	movw	r30, r24
    228a:	67 2f       	mov	r22, r23
    228c:	71 91       	ld	r23, Z+
    228e:	77 23       	and	r23, r23
    2290:	e1 f7       	brne	.-8      	; 0x228a <strrev+0x4>
    2292:	32 97       	sbiw	r30, 0x02	; 2
    2294:	04 c0       	rjmp	.+8      	; 0x229e <strrev+0x18>
    2296:	7c 91       	ld	r23, X
    2298:	6d 93       	st	X+, r22
    229a:	70 83       	st	Z, r23
    229c:	62 91       	ld	r22, -Z
    229e:	ae 17       	cp	r26, r30
    22a0:	bf 07       	cpc	r27, r31
    22a2:	c8 f3       	brcs	.-14     	; 0x2296 <strrev+0x10>
    22a4:	08 95       	ret

000022a6 <_exit>:
    22a6:	f8 94       	cli

000022a8 <__stop_program>:
    22a8:	ff cf       	rjmp	.-2      	; 0x22a8 <__stop_program>
