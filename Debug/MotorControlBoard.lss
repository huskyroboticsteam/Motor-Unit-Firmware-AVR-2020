
MotorControlBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  00001e76  00001f0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  008001d0  008001d0  00001fda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000200c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000518  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047cc  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cb7  00000000  00000000  00006d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026ac  00000000  00000000  000089e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e3c  00000000  00000000  0000b090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001167  00000000  00000000  0000becc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003627  00000000  00000000  0000d033  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  0001065a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_7>
      20:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_8>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__vector_15>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_17>
      48:	0c 94 25 09 	jmp	0x124a	; 0x124a <__vector_18>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      80:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_32>
      84:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_33>
      88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 e7       	ldi	r30, 0x76	; 118
      a8:	fe e1       	ldi	r31, 0x1E	; 30
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a0 3d       	cpi	r26, 0xD0	; 208
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	22 e0       	ldi	r18, 0x02	; 2
      b8:	a0 ed       	ldi	r26, 0xD0	; 208
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	ae 33       	cpi	r26, 0x3E	; 62
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <main>
      ca:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <init_ADC>:
#include "adc.h"
#include "timers.h"

/*Initialize the ADC and prepare it for reading*/
void init_ADC(){
	ADMUX = (1<<6); //5V VREF
      d2:	80 e4       	ldi	r24, 0x40	; 64
      d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	#if F_CPU < 10000000
	ADCSRA = (1<<ADPS2) | (1<<ADPS0); //Up to 10MHz, prescale by 32
	#else
	ADCSRA = (1<<ADPS2) | (1<<ADPS1); //For faster clocks, prescale by 64
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	86 e0       	ldi	r24, 0x06	; 6
      de:	80 83       	st	Z, r24
	#endif
	ADCSRA |= (1<<ADEN); //Enable the ADC
      e0:	80 81       	ld	r24, Z
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	80 83       	st	Z, r24
      e6:	08 95       	ret

000000e8 <read_ADC>:
  Return value:
  The 10-bit ADC result
*/
uint16_t read_ADC(uint8_t pin){
	uint8_t l,h;
	ADMUX = (ADMUX & 0xC0) | (pin & 7); //Setup ADC, preserve REFS0
      e8:	ec e7       	ldi	r30, 0x7C	; 124
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	90 81       	ld	r25, Z
      ee:	90 7c       	andi	r25, 0xC0	; 192
      f0:	87 70       	andi	r24, 0x07	; 7
      f2:	89 2b       	or	r24, r25
      f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start the conversion
      f6:	ea e7       	ldi	r30, 0x7A	; 122
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //Wait for conversion
     100:	80 81       	ld	r24, Z
     102:	86 fd       	sbrc	r24, 6
     104:	fd cf       	rjmp	.-6      	; 0x100 <read_ADC+0x18>
	l = ADCL;  //Read and return 10 bit result
     106:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	h = ADCH;
     10a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return (h << 8)|l; 
     10e:	90 e0       	ldi	r25, 0x00	; 0
}
     110:	92 2b       	or	r25, r18
     112:	08 95       	ret

00000114 <internalAREF>:

/*Switches to the internal (2.56V) Vref*/
void internalAREF(){
	if((ADMUX & 0xC0) != 0xC0){
     114:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     118:	80 7c       	andi	r24, 0xC0	; 192
     11a:	80 3c       	cpi	r24, 0xC0	; 192
     11c:	61 f0       	breq	.+24     	; 0x136 <internalAREF+0x22>
		ADMUX |= 0xC0;
     11e:	ec e7       	ldi	r30, 0x7C	; 124
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	80 6c       	ori	r24, 0xC0	; 192
     126:	80 83       	st	Z, r24
		delay_mS(5);
     128:	85 e0       	ldi	r24, 0x05	; 5
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_mS>
		read_ADC(0); //As per the datasheet, discard the first reading after changing AREF
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 74 00 	call	0xe8	; 0xe8 <read_ADC>
     136:	08 95       	ret

00000138 <detect_board>:
/*Tries to detect the board revision
Return:
1 if it is likely a revision 1 board or 2 if it is a rev. 2 board
*/
uint8_t detect_board(){
	internalAREF();
     138:	0e 94 8a 00 	call	0x114	; 0x114 <internalAREF>
	uint16_t a = read_ADC(0);
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 74 00 	call	0xe8	; 0xe8 <read_ADC>
	if(a > 384 && a < 640){
     142:	81 58       	subi	r24, 0x81	; 129
     144:	91 40       	sbci	r25, 0x01	; 1
     146:	8f 3f       	cpi	r24, 0xFF	; 255
     148:	91 05       	cpc	r25, r1
     14a:	10 f0       	brcs	.+4      	; 0x150 <detect_board+0x18>
		return 2;
	}
	return 1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	08 95       	ret
*/
uint8_t detect_board(){
	internalAREF();
	uint16_t a = read_ADC(0);
	if(a > 384 && a < 640){
		return 2;
     150:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 1;
}
     152:	08 95       	ret

00000154 <do_board_specific_setup>:

/*Does setup specific to the board
  Parameters:
  the CAN address of the board
*/
void do_board_specific_setup(uint8_t addr){
     154:	cf 93       	push	r28
     156:	c8 2f       	mov	r28, r24
		set_LED(3, 3);
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
		set_Kp(120, 0);
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	88 e7       	ldi	r24, 0x78	; 120
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 b6 04 	call	0x96c	; 0x96c <set_Kp>
		set_Ki(20, 0);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	84 e1       	ldi	r24, 0x14	; 20
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 bd 04 	call	0x97a	; 0x97a <set_Ki>
		set_Kd(170, 0);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	8a ea       	ldi	r24, 0xAA	; 170
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 c4 04 	call	0x988	; 0x988 <set_Kd>
		switch(addr){
     184:	c2 30       	cpi	r28, 0x02	; 2
     186:	71 f0       	breq	.+28     	; 0x1a4 <do_board_specific_setup+0x50>
     188:	18 f4       	brcc	.+6      	; 0x190 <do_board_specific_setup+0x3c>
     18a:	cc 23       	and	r28, r28
     18c:	31 f0       	breq	.+12     	; 0x19a <do_board_specific_setup+0x46>
     18e:	1d c0       	rjmp	.+58     	; 0x1ca <do_board_specific_setup+0x76>
     190:	c3 30       	cpi	r28, 0x03	; 3
     192:	81 f0       	breq	.+32     	; 0x1b4 <do_board_specific_setup+0x60>
     194:	c6 30       	cpi	r28, 0x06	; 6
     196:	99 f0       	breq	.+38     	; 0x1be <do_board_specific_setup+0x6a>
     198:	18 c0       	rjmp	.+48     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x0: //Base rotation:
				set_ticks_per_10degrees(172);
     19a:	8c ea       	ldi	r24, 0xAC	; 172
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <set_ticks_per_10degrees>
				break;
     1a2:	13 c0       	rjmp	.+38     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x2: //Elbow
				set_motor_reverse(1);
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 de 08 	call	0x11bc	; 0x11bc <set_motor_reverse>
				set_ticks_per_10degrees(85);
     1aa:	85 e5       	ldi	r24, 0x55	; 85
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <set_ticks_per_10degrees>
				break;
     1b2:	0b c0       	rjmp	.+22     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x3: //Forearm rotation
				set_ticks_per_10degrees(68);
     1b4:	84 e4       	ldi	r24, 0x44	; 68
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <set_ticks_per_10degrees>
				break;
     1bc:	06 c0       	rjmp	.+12     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x6: //Hand
				init_servo();
     1be:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <init_servo>
				set_servo_position(0);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <set_servo_position>
				break;
		}
		#ifdef REV_2
		tprintf("REV. 2 firmware\n");
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	9f 93       	push	r25
     1d0:	8f 93       	push	r24
     1d2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <tprintf>
		#endif
		uint8_t rev = detect_board();
     1d6:	0e 94 9c 00 	call	0x138	; 0x138 <detect_board>
     1da:	c8 2f       	mov	r28, r24
		tprintf("Detecting board rev: %d\n", rev);
     1dc:	1f 92       	push	r1
     1de:	8f 93       	push	r24
     1e0:	83 e1       	ldi	r24, 0x13	; 19
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	9f 93       	push	r25
     1e6:	8f 93       	push	r24
     1e8:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <tprintf>
		#ifdef REV_2
		if(rev != 2){
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	c2 30       	cpi	r28, 0x02	; 2
     1fa:	81 f0       	breq	.+32     	; 0x21c <do_board_specific_setup+0xc8>
			tprintf("***WARNING*** Rev. 2 firmware on Rev. 1 board\n");
     1fc:	8c e2       	ldi	r24, 0x2C	; 44
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	9f 93       	push	r25
     202:	8f 93       	push	r24
     204:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <tprintf>
			set_LED(0, 3);
     208:	63 e0       	ldi	r22, 0x03	; 3
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
			delay_mS(1000);
     210:	88 ee       	ldi	r24, 0xE8	; 232
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_mS>
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
			tprintf("***WARNING*** Rev. 1 firmware on Rev. 2 board\n")
			set_LED(0, 3);
			delay_mS(1000);
		}
		#endif
}
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <GetModeFromPacket>:
{
    packetToAssemble->id = ConstructCANID(PRIO_MOTOR_UNIT_PWM_DIR_SET, targetDeviceGroup, targetDeviceSerial);
    packetToAssemble->dlc = DLC_MOTOR_UNIT_PWM_DIR_SET;
    int nextByte = WritePacketIDOnly(packetToAssemble->data, DLC_MOTOR_UNIT_PWM_DIR_SET);
    PackShortIntoDataMSBFirst(packetToAssemble->data, PWMSet, nextByte);
}
     220:	fc 01       	movw	r30, r24
     222:	84 81       	ldd	r24, Z+4	; 0x04
     224:	08 95       	ret

00000226 <GetPWMFromPacket>:

int32_t GetPWMFromPacket(CANPacket *packet)
{
    return DecodeBytesToIntMSBFirst(packet->data, 1, 2);
     226:	42 e0       	ldi	r20, 0x02	; 2
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	03 96       	adiw	r24, 0x03	; 3
     230:	0e 94 1f 01 	call	0x23e	; 0x23e <DecodeBytesToIntMSBFirst>
}
     234:	08 95       	ret

00000236 <GetPacketID>:
}

void PackShortIntoDataMSBFirst(uint8_t *data, int16_t dataToPack, int startIndex)
{
	data[startIndex + 0] = (dataToPack & 0xFF00) >> 8;
	data[startIndex + 1] = (dataToPack & 0x00FF);
     236:	fc 01       	movw	r30, r24
     238:	83 81       	ldd	r24, Z+3	; 0x03
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	08 95       	ret

0000023e <DecodeBytesToIntMSBFirst>:
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
    int length = 4;
    int32_t decodedData = 0; 

    if (endIndex > 0 && startIndex >= 0) {
     24a:	14 16       	cp	r1, r20
     24c:	15 06       	cpc	r1, r21
     24e:	9c f4       	brge	.+38     	; 0x276 <DecodeBytesToIntMSBFirst+0x38>
     250:	77 23       	and	r23, r23
     252:	a4 f0       	brlt	.+40     	; 0x27c <DecodeBytesToIntMSBFirst+0x3e>
        length = endIndex - startIndex + 1;
     254:	ea 01       	movw	r28, r20
     256:	c6 1b       	sub	r28, r22
     258:	d7 0b       	sbc	r29, r23
     25a:	21 96       	adiw	r28, 0x01	; 1
     25c:	c5 30       	cpi	r28, 0x05	; 5
     25e:	d1 05       	cpc	r29, r1
     260:	14 f0       	brlt	.+4      	; 0x266 <DecodeBytesToIntMSBFirst+0x28>
     262:	c4 e0       	ldi	r28, 0x04	; 4
     264:	d0 e0       	ldi	r29, 0x00	; 0
     266:	dd 23       	and	r29, r29
     268:	14 f4       	brge	.+4      	; 0x26e <DecodeBytesToIntMSBFirst+0x30>
     26a:	c0 e0       	ldi	r28, 0x00	; 0
     26c:	d0 e0       	ldi	r29, 0x00	; 0
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     26e:	1c 16       	cp	r1, r28
     270:	1d 06       	cpc	r1, r29
     272:	34 f0       	brlt	.+12     	; 0x280 <DecodeBytesToIntMSBFirst+0x42>
     274:	2d c0       	rjmp	.+90     	; 0x2d0 <DecodeBytesToIntMSBFirst+0x92>
     276:	c4 e0       	ldi	r28, 0x04	; 4
     278:	d0 e0       	ldi	r29, 0x00	; 0
     27a:	02 c0       	rjmp	.+4      	; 0x280 <DecodeBytesToIntMSBFirst+0x42>
     27c:	c4 e0       	ldi	r28, 0x04	; 4
     27e:	d0 e0       	ldi	r29, 0x00	; 0
     280:	dc 01       	movw	r26, r24
     282:	a6 0f       	add	r26, r22
     284:	b7 1f       	adc	r27, r23
     286:	9e 01       	movw	r18, r28
     288:	21 50       	subi	r18, 0x01	; 1
     28a:	31 09       	sbc	r19, r1
     28c:	22 0f       	add	r18, r18
     28e:	33 1f       	adc	r19, r19
     290:	22 0f       	add	r18, r18
     292:	33 1f       	adc	r19, r19
     294:	22 0f       	add	r18, r18
     296:	33 1f       	adc	r19, r19
     298:	e0 e0       	ldi	r30, 0x00	; 0
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	c1 2c       	mov	r12, r1
     29e:	d1 2c       	mov	r13, r1
     2a0:	76 01       	movw	r14, r12
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
     2a2:	4d 91       	ld	r20, X+
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	02 2e       	mov	r0, r18
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DecodeBytesToIntMSBFirst+0x70>
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	0a 94       	dec	r0
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DecodeBytesToIntMSBFirst+0x6c>
     2b2:	05 2e       	mov	r0, r21
     2b4:	00 0c       	add	r0, r0
     2b6:	66 0b       	sbc	r22, r22
     2b8:	77 0b       	sbc	r23, r23
     2ba:	c4 2a       	or	r12, r20
     2bc:	d5 2a       	or	r13, r21
     2be:	e6 2a       	or	r14, r22
     2c0:	f7 2a       	or	r15, r23
        length = endIndex - startIndex + 1;
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     2c2:	31 96       	adiw	r30, 0x01	; 1
     2c4:	28 50       	subi	r18, 0x08	; 8
     2c6:	31 09       	sbc	r19, r1
     2c8:	ec 17       	cp	r30, r28
     2ca:	fd 07       	cpc	r31, r29
     2cc:	54 f3       	brlt	.-44     	; 0x2a2 <DecodeBytesToIntMSBFirst+0x64>
     2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <DecodeBytesToIntMSBFirst+0x98>
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
    int length = 4;
    int32_t decodedData = 0; 
     2d0:	c1 2c       	mov	r12, r1
     2d2:	d1 2c       	mov	r13, r1
     2d4:	76 01       	movw	r14, r12
    for (int i = 0; i < length; i++) 
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
    }
    return decodedData;
}
     2d6:	c7 01       	movw	r24, r14
     2d8:	b6 01       	movw	r22, r12
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	df 90       	pop	r13
     2e4:	cf 90       	pop	r12
     2e6:	08 95       	ret

000002e8 <__vector_17>:
	//return 255;
}

/*Sets the encoder counter to the specified value*/
void set_encoder_ticks(int32_t ticks){
	encoder_ticks = ticks;
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	8f 93       	push	r24
     2f4:	9f 93       	push	r25
     2f6:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <gate_control>
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <gate_control>
     300:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <gate_control>
     304:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <gate_control_top>
     308:	98 13       	cpse	r25, r24
     30a:	0e c0       	rjmp	.+28     	; 0x328 <__vector_17+0x40>
     30c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <vticks>
     310:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <vticks+0x1>
     314:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <raw_velocity+0x1>
     318:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <raw_velocity>
     31c:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <gate_control>
     320:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <vticks+0x1>
     324:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <vticks>
     328:	9f 91       	pop	r25
     32a:	8f 91       	pop	r24
     32c:	0f 90       	pop	r0
     32e:	0f be       	out	0x3f, r0	; 63
     330:	0f 90       	pop	r0
     332:	1f 90       	pop	r1
     334:	18 95       	reti

00000336 <get_encoder_ticks>:
     336:	60 91 dd 01 	lds	r22, 0x01DD	; 0x8001dd <encoder_ticks>
     33a:	70 91 de 01 	lds	r23, 0x01DE	; 0x8001de <encoder_ticks+0x1>
     33e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <encoder_ticks+0x2>
     342:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <encoder_ticks+0x3>
     346:	08 95       	ret

00000348 <init_encoder>:
}

/*Initializes the encoder with A on PE6 and B on PE7*/
void init_encoder(){
	EIMSK &= 0x3F; //Disable pin change interrupts
     348:	8d b3       	in	r24, 0x1d	; 29
     34a:	8f 73       	andi	r24, 0x3F	; 63
     34c:	8d bb       	out	0x1d, r24	; 29
	DDRE &= 0x3F; //Set PE6, PE7 as inputs
     34e:	8d b1       	in	r24, 0x0d	; 13
     350:	8f 73       	andi	r24, 0x3F	; 63
     352:	8d b9       	out	0x0d, r24	; 13
	PORTE |= 0xC0; //Enable pullups on PE6, PE7
     354:	8e b1       	in	r24, 0x0e	; 14
     356:	80 6c       	ori	r24, 0xC0	; 192
     358:	8e b9       	out	0x0e, r24	; 14
	encoder_ticks = 0; //Reset count
     35a:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <encoder_ticks>
     35e:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <encoder_ticks+0x1>
     362:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <encoder_ticks+0x2>
     366:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <encoder_ticks+0x3>
	gate_control_top = 24; //Short gate time
     36a:	88 e1       	ldi	r24, 0x18	; 24
     36c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <gate_control_top>
	EICRB |= 0x50; //Enable pin change interrupt on PE6, PE7
     370:	ea e6       	ldi	r30, 0x6A	; 106
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	80 65       	ori	r24, 0x50	; 80
     378:	80 83       	st	Z, r24
	EICRA = 0;
     37a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK |= 0xC0;
     37e:	8d b3       	in	r24, 0x1d	; 29
     380:	80 6c       	ori	r24, 0xC0	; 192
     382:	8d bb       	out	0x1d, r24	; 29
     384:	08 95       	ret

00000386 <reset_encoder>:
}

/*Resets the encoder count*/
void reset_encoder(){
	EIMSK &= 0x3F; //Disable pin change interrupts
     386:	8d b3       	in	r24, 0x1d	; 29
     388:	8f 73       	andi	r24, 0x3F	; 63
     38a:	8d bb       	out	0x1d, r24	; 29
	encoder_ticks = 0; //Reset count
     38c:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <encoder_ticks>
     390:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <encoder_ticks+0x1>
     394:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <encoder_ticks+0x2>
     398:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <encoder_ticks+0x3>
	vticks = 0;
     39c:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <vticks+0x1>
     3a0:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <vticks>
	raw_velocity = 0;
     3a4:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <raw_velocity+0x1>
     3a8:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <raw_velocity>
	gate_control = 0;
     3ac:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <gate_control>
	EIMSK |= 0xC0; //Enable pin change interrupt on PE6, PE7
     3b0:	8d b3       	in	r24, 0x1d	; 29
     3b2:	80 6c       	ori	r24, 0xC0	; 192
     3b4:	8d bb       	out	0x1d, r24	; 29
     3b6:	08 95       	ret

000003b8 <get_encoder_velocity>:
}

/*Returns the encoder velocity in ticks/second*/
int16_t get_encoder_velocity(){
	int16_t rv = raw_velocity;
     3b8:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <raw_velocity>
     3bc:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <raw_velocity+0x1>
	int16_t velocity;
	if(gate_control_top == 24){
     3c0:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <gate_control_top>
     3c4:	28 31       	cpi	r18, 0x18	; 24
     3c6:	59 f5       	brne	.+86     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		if(rv < 5 && rv > -5){ //If it's slow, increase the gate time
     3c8:	9c 01       	movw	r18, r24
     3ca:	2c 5f       	subi	r18, 0xFC	; 252
     3cc:	3f 4f       	sbci	r19, 0xFF	; 255
     3ce:	29 30       	cpi	r18, 0x09	; 9
     3d0:	31 05       	cpc	r19, r1
     3d2:	18 f4       	brcc	.+6      	; 0x3da <get_encoder_velocity+0x22>
			gate_control_top = 122;
     3d4:	2a e7       	ldi	r18, 0x7A	; 122
     3d6:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <gate_control_top>
			//tprintf("GCT=122\n");
		}
		velocity = (rv * 60)/4 + old_velocity/4; //Compute velocity and low pass filter
     3da:	4c e3       	ldi	r20, 0x3C	; 60
     3dc:	48 9f       	mul	r20, r24
     3de:	90 01       	movw	r18, r0
     3e0:	49 9f       	mul	r20, r25
     3e2:	30 0d       	add	r19, r0
     3e4:	11 24       	eor	r1, r1
     3e6:	33 23       	and	r19, r19
     3e8:	14 f4       	brge	.+4      	; 0x3ee <get_encoder_velocity+0x36>
     3ea:	2d 5f       	subi	r18, 0xFD	; 253
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	35 95       	asr	r19
     3f0:	27 95       	ror	r18
     3f2:	35 95       	asr	r19
     3f4:	27 95       	ror	r18
     3f6:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <old_velocity>
     3fa:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <old_velocity+0x1>
     3fe:	99 23       	and	r25, r25
     400:	0c f4       	brge	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     402:	03 96       	adiw	r24, 0x03	; 3
     404:	95 95       	asr	r25
     406:	87 95       	ror	r24
     408:	95 95       	asr	r25
     40a:	87 95       	ror	r24
     40c:	28 0f       	add	r18, r24
     40e:	39 1f       	adc	r19, r25
		old_velocity = velocity;
     410:	30 93 d6 01 	sts	0x01D6, r19	; 0x8001d6 <old_velocity+0x1>
     414:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <old_velocity>
		return velocity;
     418:	82 2f       	mov	r24, r18
     41a:	93 2f       	mov	r25, r19
     41c:	08 95       	ret
	} else if(gate_control_top == 122){ //If it's fast, decrease gate time
     41e:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <gate_control_top>
     422:	2a 37       	cpi	r18, 0x7A	; 122
     424:	79 f5       	brne	.+94     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		if(rv > 80 || rv < -80){
     426:	9c 01       	movw	r18, r24
     428:	20 5b       	subi	r18, 0xB0	; 176
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	21 3a       	cpi	r18, 0xA1	; 161
     42e:	31 05       	cpc	r19, r1
     430:	18 f0       	brcs	.+6      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			gate_control_top = 24;
     432:	28 e1       	ldi	r18, 0x18	; 24
     434:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <gate_control_top>
			//tprintf("GCT=24\n");
		}
		velocity = (rv * 12)/4 + old_velocity/4; //Compute velocity and LPF
     438:	9c 01       	movw	r18, r24
     43a:	22 0f       	add	r18, r18
     43c:	33 1f       	adc	r19, r19
     43e:	82 0f       	add	r24, r18
     440:	93 1f       	adc	r25, r19
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	9c 01       	movw	r18, r24
     44c:	99 23       	and	r25, r25
     44e:	14 f4       	brge	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     450:	2d 5f       	subi	r18, 0xFD	; 253
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	35 95       	asr	r19
     456:	27 95       	ror	r18
     458:	35 95       	asr	r19
     45a:	27 95       	ror	r18
     45c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <old_velocity>
     460:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <old_velocity+0x1>
     464:	99 23       	and	r25, r25
     466:	0c f4       	brge	.+2      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     468:	03 96       	adiw	r24, 0x03	; 3
     46a:	95 95       	asr	r25
     46c:	87 95       	ror	r24
     46e:	95 95       	asr	r25
     470:	87 95       	ror	r24
     472:	28 0f       	add	r18, r24
     474:	39 1f       	adc	r19, r25
		old_velocity = velocity;
     476:	30 93 d6 01 	sts	0x01D6, r19	; 0x8001d6 <old_velocity+0x1>
     47a:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <old_velocity>
		return velocity;
     47e:	82 2f       	mov	r24, r18
     480:	93 2f       	mov	r25, r19
     482:	08 95       	ret
	}
	return -1;
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	9f ef       	ldi	r25, 0xFF	; 255
}
     488:	08 95       	ret

0000048a <__vector_7>:

ISR(INT6_vect){ //PE6, A
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
	#ifdef DEBOUNCE
	uint16_t tc = TCNT1;
	if(tc > lastA && tc - lastA < 400) return;
	lastA = tc;
	#endif
	uint8_t state = PINE;
     49c:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE6)){ //A rising
     49e:	86 ff       	sbrs	r24, 6
     4a0:	3c c0       	rjmp	.+120    	; 0x51a <__vector_7+0x90>
		if(state & (1<<PE7)){ //B high
     4a2:	88 23       	and	r24, r24
     4a4:	ec f4       	brge	.+58     	; 0x4e0 <__vector_7+0x56>
			encoder_ticks++;
     4a6:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <encoder_ticks>
     4aa:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <encoder_ticks+0x1>
     4ae:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <encoder_ticks+0x2>
     4b2:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <encoder_ticks+0x3>
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	a1 1d       	adc	r26, r1
     4ba:	b1 1d       	adc	r27, r1
     4bc:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <encoder_ticks>
     4c0:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <encoder_ticks+0x1>
     4c4:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <encoder_ticks+0x2>
     4c8:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <encoder_ticks+0x3>
			vticks++;
     4cc:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <vticks>
     4d0:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <vticks+0x1>
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <vticks+0x1>
     4da:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <vticks>
     4de:	58 c0       	rjmp	.+176    	; 0x590 <__vector_7+0x106>
		} else { //B low
			encoder_ticks--;
     4e0:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <encoder_ticks>
     4e4:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <encoder_ticks+0x1>
     4e8:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <encoder_ticks+0x2>
     4ec:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <encoder_ticks+0x3>
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	a1 09       	sbc	r26, r1
     4f4:	b1 09       	sbc	r27, r1
     4f6:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <encoder_ticks>
     4fa:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <encoder_ticks+0x1>
     4fe:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <encoder_ticks+0x2>
     502:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <encoder_ticks+0x3>
			vticks--;
     506:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <vticks>
     50a:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <vticks+0x1>
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <vticks+0x1>
     514:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <vticks>
     518:	3b c0       	rjmp	.+118    	; 0x590 <__vector_7+0x106>
		}
	} else { //A falling
		if(state & (1<<PE7)){ //B high
     51a:	88 23       	and	r24, r24
     51c:	ec f4       	brge	.+58     	; 0x558 <__vector_7+0xce>
			encoder_ticks--;
     51e:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <encoder_ticks>
     522:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <encoder_ticks+0x1>
     526:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <encoder_ticks+0x2>
     52a:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <encoder_ticks+0x3>
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	a1 09       	sbc	r26, r1
     532:	b1 09       	sbc	r27, r1
     534:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <encoder_ticks>
     538:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <encoder_ticks+0x1>
     53c:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <encoder_ticks+0x2>
     540:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <encoder_ticks+0x3>
			vticks--;
     544:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <vticks>
     548:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <vticks+0x1>
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <vticks+0x1>
     552:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <vticks>
     556:	1c c0       	rjmp	.+56     	; 0x590 <__vector_7+0x106>
		} else { //B low
			encoder_ticks++;
     558:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <encoder_ticks>
     55c:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <encoder_ticks+0x1>
     560:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <encoder_ticks+0x2>
     564:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <encoder_ticks+0x3>
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	a1 1d       	adc	r26, r1
     56c:	b1 1d       	adc	r27, r1
     56e:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <encoder_ticks>
     572:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <encoder_ticks+0x1>
     576:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <encoder_ticks+0x2>
     57a:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <encoder_ticks+0x3>
			vticks++;
     57e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <vticks>
     582:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <vticks+0x1>
     586:	01 96       	adiw	r24, 0x01	; 1
     588:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <vticks+0x1>
     58c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <vticks>
		}
	}
}
     590:	bf 91       	pop	r27
     592:	af 91       	pop	r26
     594:	9f 91       	pop	r25
     596:	8f 91       	pop	r24
     598:	0f 90       	pop	r0
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	0f 90       	pop	r0
     59e:	1f 90       	pop	r1
     5a0:	18 95       	reti

000005a2 <__vector_8>:

ISR(INT7_vect){ //PE7, B
     5a2:	1f 92       	push	r1
     5a4:	0f 92       	push	r0
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	0f 92       	push	r0
     5aa:	11 24       	eor	r1, r1
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
	#ifdef DEBOUNCE
	uint16_t tc = TCNT1;
	if(tc > lastB && tc - lastB < 400) return;
	lastB = tc;
	#endif
	uint8_t state = PINE;
     5b4:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE7)){ //B rising
     5b6:	88 23       	and	r24, r24
     5b8:	e4 f5       	brge	.+120    	; 0x632 <__vector_8+0x90>
		if(state & (1<<PE6)){ //A high
     5ba:	86 ff       	sbrs	r24, 6
     5bc:	1d c0       	rjmp	.+58     	; 0x5f8 <__vector_8+0x56>
			encoder_ticks--;
     5be:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <encoder_ticks>
     5c2:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <encoder_ticks+0x1>
     5c6:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <encoder_ticks+0x2>
     5ca:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <encoder_ticks+0x3>
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	a1 09       	sbc	r26, r1
     5d2:	b1 09       	sbc	r27, r1
     5d4:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <encoder_ticks>
     5d8:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <encoder_ticks+0x1>
     5dc:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <encoder_ticks+0x2>
     5e0:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <encoder_ticks+0x3>
			vticks--;
     5e4:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <vticks>
     5e8:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <vticks+0x1>
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <vticks+0x1>
     5f2:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <vticks>
     5f6:	58 c0       	rjmp	.+176    	; 0x6a8 <__vector_8+0x106>
		} else { //A low
			encoder_ticks++;
     5f8:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <encoder_ticks>
     5fc:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <encoder_ticks+0x1>
     600:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <encoder_ticks+0x2>
     604:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <encoder_ticks+0x3>
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	a1 1d       	adc	r26, r1
     60c:	b1 1d       	adc	r27, r1
     60e:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <encoder_ticks>
     612:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <encoder_ticks+0x1>
     616:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <encoder_ticks+0x2>
     61a:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <encoder_ticks+0x3>
			vticks++;
     61e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <vticks>
     622:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <vticks+0x1>
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <vticks+0x1>
     62c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <vticks>
     630:	3b c0       	rjmp	.+118    	; 0x6a8 <__vector_8+0x106>
		}
	} else { //B falling
		if(state & (1<<PE6)){ //A high
     632:	86 ff       	sbrs	r24, 6
     634:	1d c0       	rjmp	.+58     	; 0x670 <__vector_8+0xce>
			encoder_ticks++;
     636:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <encoder_ticks>
     63a:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <encoder_ticks+0x1>
     63e:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <encoder_ticks+0x2>
     642:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <encoder_ticks+0x3>
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	a1 1d       	adc	r26, r1
     64a:	b1 1d       	adc	r27, r1
     64c:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <encoder_ticks>
     650:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <encoder_ticks+0x1>
     654:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <encoder_ticks+0x2>
     658:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <encoder_ticks+0x3>
			vticks++;
     65c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <vticks>
     660:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <vticks+0x1>
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <vticks+0x1>
     66a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <vticks>
     66e:	1c c0       	rjmp	.+56     	; 0x6a8 <__vector_8+0x106>
		} else { //A low
			encoder_ticks--;
     670:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <encoder_ticks>
     674:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <encoder_ticks+0x1>
     678:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <encoder_ticks+0x2>
     67c:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <encoder_ticks+0x3>
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	a1 09       	sbc	r26, r1
     684:	b1 09       	sbc	r27, r1
     686:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <encoder_ticks>
     68a:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <encoder_ticks+0x1>
     68e:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <encoder_ticks+0x2>
     692:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <encoder_ticks+0x3>
			vticks--;
     696:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <vticks>
     69a:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <vticks+0x1>
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <vticks+0x1>
     6a4:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <vticks>
		}
	}
     6a8:	bf 91       	pop	r27
     6aa:	af 91       	pop	r26
     6ac:	9f 91       	pop	r25
     6ae:	8f 91       	pop	r24
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	0f 90       	pop	r0
     6b6:	1f 90       	pop	r1
     6b8:	18 95       	reti

000006ba <main>:
#include "servo.h"
#include "usart.h"
#include "bss.h"


int main(){
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	2b 97       	sbiw	r28, 0x0b	; 11
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
	CANPacket m;
	DDRA = 0xF0;
     6ce:	80 ef       	ldi	r24, 0xF0	; 240
     6d0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xF0;
     6d2:	82 b9       	out	0x02, r24	; 2
	setup_timers();
     6d4:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <setup_timers>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d8:	2f ef       	ldi	r18, 0xFF	; 255
     6da:	81 ee       	ldi	r24, 0xE1	; 225
     6dc:	94 e0       	ldi	r25, 0x04	; 4
     6de:	21 50       	subi	r18, 0x01	; 1
     6e0:	80 40       	sbci	r24, 0x00	; 0
     6e2:	90 40       	sbci	r25, 0x00	; 0
     6e4:	e1 f7       	brne	.-8      	; 0x6de <main+0x24>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <main+0x2e>
     6e8:	00 00       	nop
	_delay_ms(100);
	PORTA = 0;
     6ea:	12 b8       	out	0x02, r1	; 2
	set_LED(0, 3);
     6ec:	63 e0       	ldi	r22, 0x03	; 3
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
	sei();
     6f4:	78 94       	sei
	usart_init(19200); //Debug serial
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	7b e4       	ldi	r23, 0x4B	; 75
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 a5 0c 	call	0x194a	; 0x194a <usart_init>
	set_LED(1, 3);
     702:	63 e0       	ldi	r22, 0x03	; 3
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
	delay_mS(666); //Delay so one can connect to debug serial
     70a:	8a e9       	ldi	r24, 0x9A	; 154
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_mS>
	uint16_t my_address = getLocalDeviceSerial();
     712:	0e 94 c5 0a 	call	0x158a	; 0x158a <getLocalDeviceSerial>
     716:	f8 2e       	mov	r15, r24
	tprintf("adr=%X\n", my_address);
     718:	c8 2e       	mov	r12, r24
     71a:	d1 2c       	mov	r13, r1
     71c:	1f 92       	push	r1
     71e:	8f 93       	push	r24
     720:	8b e5       	ldi	r24, 0x5B	; 91
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <tprintf>
	delay_mS(250);
     72c:	8a ef       	ldi	r24, 0xFA	; 250
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_mS>
	InitCAN(DEVICE_GROUP_MOTOR_CONTROL, my_address);
     734:	b6 01       	movw	r22, r12
     736:	84 e0       	ldi	r24, 0x04	; 4
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 27 0a 	call	0x144e	; 0x144e <InitCAN>
	set_LED(2, 3);
     73e:	63 e0       	ldi	r22, 0x03	; 3
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
	init_encoder();
     746:	0e 94 a4 01 	call	0x348	; 0x348 <init_encoder>
	init_ADC();
     74a:	0e 94 69 00 	call	0xd2	; 0xd2 <init_ADC>
	do_board_specific_setup(my_address);
     74e:	8f 2d       	mov	r24, r15
     750:	0e 94 aa 00 	call	0x154	; 0x154 <do_board_specific_setup>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     754:	9f e0       	ldi	r25, 0x0F	; 15
     756:	88 e1       	ldi	r24, 0x18	; 24
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	a8 95       	wdr
     75e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     762:	0f be       	out	0x3f, r0	; 63
     764:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	wdt_enable(WDTO_2S);
	init_motor();
     768:	0e 94 5c 05 	call	0xab8	; 0xab8 <init_motor>
	//enable_motor();
	delay_mS(500);
     76c:	84 ef       	ldi	r24, 0xF4	; 244
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_mS>
	set_LED(0, 0);
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
	set_LED(1, 0);
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
	set_LED(3, 0);
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	83 e0       	ldi	r24, 0x03	; 3
     788:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
	while(1){
		if(PollAndReceiveCANPacket(&m) == 0){
			set_LED(3, 3);
			update_LEDS(get_mS()/40);
     794:	0f 2e       	mov	r0, r31
     796:	f8 e2       	ldi	r31, 0x28	; 40
     798:	cf 2e       	mov	r12, r31
     79a:	d1 2c       	mov	r13, r1
     79c:	e1 2c       	mov	r14, r1
     79e:	f1 2c       	mov	r15, r1
     7a0:	f0 2d       	mov	r31, r0
	delay_mS(500);
	set_LED(0, 0);
	set_LED(1, 0);
	set_LED(3, 0);
	while(1){
		if(PollAndReceiveCANPacket(&m) == 0){
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	0e 94 30 0a 	call	0x1460	; 0x1460 <PollAndReceiveCANPacket>
     7aa:	89 2b       	or	r24, r25
     7ac:	a9 f4       	brne	.+42     	; 0x7d8 <main+0x11e>
			set_LED(3, 3);
     7ae:	63 e0       	ldi	r22, 0x03	; 3
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
			update_LEDS(get_mS()/40);
     7b6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <get_mS>
     7ba:	a7 01       	movw	r20, r14
     7bc:	96 01       	movw	r18, r12
     7be:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__udivmodsi4>
     7c2:	c9 01       	movw	r24, r18
     7c4:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <update_LEDS>
			handle_CAN_message(&m);
     7c8:	ce 01       	movw	r24, r28
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	0e 94 05 04 	call	0x80a	; 0x80a <handle_CAN_message>
			set_LED(3, 0);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
		}
		if(get_motor_mode() & MOTOR_MODE_ENABLED){
     7d8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_motor_mode>
     7dc:	80 ff       	sbrs	r24, 0
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <main+0x138>
			set_LED(2, 3);
     7e0:	63 e0       	ldi	r22, 0x03	; 3
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
			set_LED(1, 0);
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
     7f0:	08 c0       	rjmp	.+16     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		} else {
			set_LED(1, 3);
     7f2:	63 e0       	ldi	r22, 0x03	; 3
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
			set_LED(2, 0);
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
		}
		motor_control_tick();
     802:	0e 94 11 06 	call	0xc22	; 0xc22 <motor_control_tick>
		wdt_reset();
     806:	a8 95       	wdr
	}
     808:	cc cf       	rjmp	.-104    	; 0x7a2 <main+0xe8>

0000080a <handle_CAN_message>:
#include "timers.h"
#include "CANPacket.h"
#include "CANMotorUnit.h"

/*Handle a received CAN message*/
void handle_CAN_message(CANPacket *m){
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ec 01       	movw	r28, r24
	switch(GetPacketID(m)){
     810:	0e 94 1b 01 	call	0x236	; 0x236 <GetPacketID>
     814:	83 30       	cpi	r24, 0x03	; 3
     816:	91 05       	cpc	r25, r1
     818:	39 f1       	breq	.+78     	; 0x868 <handle_CAN_message+0x5e>
     81a:	1c f4       	brge	.+6      	; 0x822 <handle_CAN_message+0x18>
     81c:	89 2b       	or	r24, r25
     81e:	49 f0       	breq	.+18     	; 0x832 <handle_CAN_message+0x28>
     820:	59 c0       	rjmp	.+178    	; 0x8d4 <handle_CAN_message+0xca>
     822:	84 30       	cpi	r24, 0x04	; 4
     824:	91 05       	cpc	r25, r1
     826:	09 f4       	brne	.+2      	; 0x82a <handle_CAN_message+0x20>
     828:	75 c0       	rjmp	.+234    	; 0x914 <__stack+0x15>
     82a:	8f 3f       	cpi	r24, 0xFF	; 255
     82c:	91 05       	cpc	r25, r1
     82e:	b1 f1       	breq	.+108    	; 0x89c <handle_CAN_message+0x92>
     830:	51 c0       	rjmp	.+162    	; 0x8d4 <handle_CAN_message+0xca>
		case ID_MOTOR_UNIT_MODE_SEL:; //Set Mode
			uint8_t mode = GetModeFromPacket(m);
     832:	ce 01       	movw	r24, r28
     834:	0e 94 10 01 	call	0x220	; 0x220 <GetModeFromPacket>
			if(mode == MOTOR_UNIT_MODE_PID){
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	61 f4       	brne	.+24     	; 0x854 <handle_CAN_message+0x4a>
				set_motor_mode(get_motor_mode() | MOTOR_MODE_PID);
     83c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_motor_mode>
     840:	82 60       	ori	r24, 0x02	; 2
     842:	0e 94 bc 05 	call	0xb78	; 0xb78 <set_motor_mode>
				set_target_position(get_encoder_ticks());
     846:	0e 94 9b 01 	call	0x336	; 0x336 <get_encoder_ticks>
     84a:	0e 94 cb 04 	call	0x996	; 0x996 <set_target_position>
				enable_motor();
     84e:	0e 94 a8 05 	call	0xb50	; 0xb50 <enable_motor>
     852:	60 c0       	rjmp	.+192    	; 0x914 <__stack+0x15>
			} else if(mode == MOTOR_UNIT_MODE_PWM){
     854:	81 11       	cpse	r24, r1
     856:	5e c0       	rjmp	.+188    	; 0x914 <__stack+0x15>
				set_motor_mode(get_motor_mode() & ~MOTOR_MODE_PID);
     858:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_motor_mode>
     85c:	8d 7f       	andi	r24, 0xFD	; 253
     85e:	0e 94 bc 05 	call	0xb78	; 0xb78 <set_motor_mode>
				enable_motor();
     862:	0e 94 a8 05 	call	0xb50	; 0xb50 <enable_motor>
     866:	56 c0       	rjmp	.+172    	; 0x914 <__stack+0x15>
			}
			break;
		case ID_MOTOR_UNIT_PWM_DIR_SET: //Set PWM/Direction
			if(!(get_motor_mode() & MOTOR_MODE_PID)){
     868:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_motor_mode>
     86c:	81 fd       	sbrc	r24, 1
     86e:	52 c0       	rjmp	.+164    	; 0x914 <__stack+0x15>
				int16_t mp = GetPWMFromPacket(m) / 64;
     870:	ce 01       	movw	r24, r28
     872:	0e 94 13 01 	call	0x226	; 0x226 <GetPWMFromPacket>
				set_motor_power(mp);
     876:	99 23       	and	r25, r25
     878:	24 f4       	brge	.+8      	; 0x882 <handle_CAN_message+0x78>
     87a:	61 5c       	subi	r22, 0xC1	; 193
     87c:	7f 4f       	sbci	r23, 0xFF	; 255
     87e:	8f 4f       	sbci	r24, 0xFF	; 255
     880:	9f 4f       	sbci	r25, 0xFF	; 255
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	68 94       	set
     888:	15 f8       	bld	r1, 5
     88a:	b5 95       	asr	r27
     88c:	a7 95       	ror	r26
     88e:	97 95       	ror	r25
     890:	87 95       	ror	r24
     892:	16 94       	lsr	r1
     894:	d1 f7       	brne	.-12     	; 0x88a <handle_CAN_message+0x80>
     896:	0e 94 cb 05 	call	0xb96	; 0xb96 <set_motor_power>
     89a:	3c c0       	rjmp	.+120    	; 0x914 <__stack+0x15>
			} else {
				DDRC &= ~2;
			}
			break;*/
		case 0xFF: /*error*/
			tprintf("Error\n");
     89c:	83 e6       	ldi	r24, 0x63	; 99
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <tprintf>
			set_LED(0, 2);
     8a8:	62 e0       	ldi	r22, 0x02	; 2
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
			update_LEDS(get_mS()/40);
     8b0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <get_mS>
     8b4:	28 e2       	ldi	r18, 0x28	; 40
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	50 e0       	ldi	r21, 0x00	; 0
     8bc:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__udivmodsi4>
     8c0:	c9 01       	movw	r24, r18
     8c2:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <update_LEDS>
			set_LED(0, 0);
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
			break;
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	20 c0       	rjmp	.+64     	; 0x914 <__stack+0x15>
			break;
		default:
			tprintf("Unknown CAN code %d\n", m->data[0]);
     8d4:	8b 81       	ldd	r24, Y+3	; 0x03
     8d6:	1f 92       	push	r1
     8d8:	8f 93       	push	r24
     8da:	8a e6       	ldi	r24, 0x6A	; 106
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	9f 93       	push	r25
     8e0:	8f 93       	push	r24
     8e2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <tprintf>
			set_LED(0, 2);
     8e6:	62 e0       	ldi	r22, 0x02	; 2
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
			update_LEDS(get_mS()/40);
     8ee:	0e 94 8c 0b 	call	0x1718	; 0x1718 <get_mS>
     8f2:	28 e2       	ldi	r18, 0x28	; 40
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__udivmodsi4>
     8fe:	c9 01       	movw	r24, r18
     900:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <update_LEDS>
			set_LED(0, 0);
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
			break;
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
	}
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <set_motor_power_raw>:
}

/*Gets the motor maximum position*/
uint32_t get_motor_max_position(){
	return motor_max_pos;
}
     91a:	81 15       	cp	r24, r1
     91c:	24 e0       	ldi	r18, 0x04	; 4
     91e:	92 07       	cpc	r25, r18
     920:	14 f0       	brlt	.+4      	; 0x926 <set_motor_power_raw+0xc>
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	93 e0       	ldi	r25, 0x03	; 3
     926:	bc 01       	movw	r22, r24
     928:	61 30       	cpi	r22, 0x01	; 1
     92a:	8c ef       	ldi	r24, 0xFC	; 252
     92c:	78 07       	cpc	r23, r24
     92e:	14 f4       	brge	.+4      	; 0x934 <set_motor_power_raw+0x1a>
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	7c ef       	ldi	r23, 0xFC	; 252
     934:	61 15       	cp	r22, r1
     936:	71 05       	cpc	r23, r1
     938:	21 f0       	breq	.+8      	; 0x942 <set_motor_power_raw+0x28>
     93a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <motor_mode>
     93e:	80 fd       	sbrc	r24, 0
     940:	07 c0       	rjmp	.+14     	; 0x950 <set_motor_power_raw+0x36>
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	0e 94 c9 0a 	call	0x1592	; 0x1592 <write_PWM>
     94c:	73 98       	cbi	0x0e, 3	; 14
     94e:	08 95       	ret
     950:	77 23       	and	r23, r23
     952:	34 f4       	brge	.+12     	; 0x960 <set_motor_power_raw+0x46>
     954:	72 99       	sbic	0x0e, 2	; 14
     956:	72 98       	cbi	0x0e, 2	; 14
     958:	71 95       	neg	r23
     95a:	61 95       	neg	r22
     95c:	71 09       	sbc	r23, r1
     95e:	02 c0       	rjmp	.+4      	; 0x964 <set_motor_power_raw+0x4a>
     960:	72 9b       	sbis	0x0e, 2	; 14
     962:	72 9a       	sbi	0x0e, 2	; 14
     964:	83 e0       	ldi	r24, 0x03	; 3
     966:	0e 94 c9 0a 	call	0x1592	; 0x1592 <write_PWM>
     96a:	08 95       	ret

0000096c <set_Kp>:
     96c:	00 97       	sbiw	r24, 0x00	; 0
     96e:	21 f0       	breq	.+8      	; 0x978 <set_Kp+0xc>
     970:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <Kp+0x1>
     974:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Kp>
     978:	08 95       	ret

0000097a <set_Ki>:
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	21 f0       	breq	.+8      	; 0x986 <set_Ki+0xc>
     97e:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <Ki+0x1>
     982:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <Ki>
     986:	08 95       	ret

00000988 <set_Kd>:
     988:	00 97       	sbiw	r24, 0x00	; 0
     98a:	21 f0       	breq	.+8      	; 0x994 <set_Kd+0xc>
     98c:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <Kd+0x1>
     990:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Kd>
     994:	08 95       	ret

00000996 <set_target_position>:
     996:	cf 92       	push	r12
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	6b 01       	movw	r12, r22
     9a0:	7c 01       	movw	r14, r24
     9a2:	ff 92       	push	r15
     9a4:	ef 92       	push	r14
     9a6:	df 92       	push	r13
     9a8:	6f 93       	push	r22
     9aa:	8f e7       	ldi	r24, 0x7F	; 127
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	9f 93       	push	r25
     9b0:	8f 93       	push	r24
     9b2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <tprintf>
     9b6:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <motor_target_pos>
     9ba:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <motor_target_pos+0x1>
     9be:	8c 19       	sub	r24, r12
     9c0:	9d 09       	sbc	r25, r13
     9c2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <int_abs>
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	85 36       	cpi	r24, 0x65	; 101
     9d4:	91 05       	cpc	r25, r1
     9d6:	40 f0       	brcs	.+16     	; 0x9e8 <set_target_position+0x52>
     9d8:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <pos_i>
     9dc:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <pos_i+0x1>
     9e0:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <pos_i+0x2>
     9e4:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <pos_i+0x3>
     9e8:	c0 92 eb 01 	sts	0x01EB, r12	; 0x8001eb <motor_target_pos>
     9ec:	d0 92 ec 01 	sts	0x01EC, r13	; 0x8001ec <motor_target_pos+0x1>
     9f0:	e0 92 ed 01 	sts	0x01ED, r14	; 0x8001ed <motor_target_pos+0x2>
     9f4:	f0 92 ee 01 	sts	0x01EE, r15	; 0x8001ee <motor_target_pos+0x3>
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	df 90       	pop	r13
     9fe:	cf 90       	pop	r12
     a00:	08 95       	ret

00000a02 <set_target_velocity>:
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	ec 01       	movw	r28, r24
     a08:	df 93       	push	r29
     a0a:	cf 93       	push	r28
     a0c:	87 e9       	ldi	r24, 0x97	; 151
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	9f 93       	push	r25
     a12:	8f 93       	push	r24
     a14:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <tprintf>
     a18:	d0 93 f0 01 	sts	0x01F0, r29	; 0x8001f0 <motor_target_vel+0x1>
     a1c:	c0 93 ef 01 	sts	0x01EF, r28	; 0x8001ef <motor_target_vel>
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	cd 37       	cpi	r28, 0x7D	; 125
     a2a:	d1 05       	cpc	r29, r1
     a2c:	c8 f4       	brcc	.+50     	; 0xa60 <set_target_velocity+0x5e>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <slow>
     a34:	8d e7       	ldi	r24, 0x7D	; 125
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	be 01       	movw	r22, r28
     a3a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__udivmodhi4>
     a3e:	41 e0       	ldi	r20, 0x01	; 1
     a40:	9e 01       	movw	r18, r28
     a42:	36 95       	lsr	r19
     a44:	27 95       	ror	r18
     a46:	28 17       	cp	r18, r24
     a48:	39 07       	cpc	r19, r25
     a4a:	08 f0       	brcs	.+2      	; 0xa4e <set_target_velocity+0x4c>
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	8d e7       	ldi	r24, 0x7D	; 125
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	be 01       	movw	r22, r28
     a54:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__udivmodhi4>
     a58:	64 0f       	add	r22, r20
     a5a:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <tgt_inc>
     a5e:	15 c0       	rjmp	.+42     	; 0xa8a <set_target_velocity+0x88>
     a60:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <slow>
     a64:	9e 01       	movw	r18, r28
     a66:	af ea       	ldi	r26, 0xAF	; 175
     a68:	b7 e4       	ldi	r27, 0x47	; 71
     a6a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__umulhisi3>
     a6e:	c8 1b       	sub	r28, r24
     a70:	d9 0b       	sbc	r29, r25
     a72:	d6 95       	lsr	r29
     a74:	c7 95       	ror	r28
     a76:	8c 0f       	add	r24, r28
     a78:	9d 1f       	adc	r25, r29
     a7a:	92 95       	swap	r25
     a7c:	82 95       	swap	r24
     a7e:	8f 70       	andi	r24, 0x0F	; 15
     a80:	89 27       	eor	r24, r25
     a82:	9f 70       	andi	r25, 0x0F	; 15
     a84:	89 27       	eor	r24, r25
     a86:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <tgt_inc>
     a8a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <tgt_inc>
     a8e:	1f 92       	push	r1
     a90:	8f 93       	push	r24
     a92:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <slow>
     a96:	1f 92       	push	r1
     a98:	8f 93       	push	r24
     a9a:	8f ea       	ldi	r24, 0xAF	; 175
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	9f 93       	push	r25
     aa0:	8f 93       	push	r24
     aa2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <tprintf>
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <init_motor>:
     ab8:	73 98       	cbi	0x0e, 3	; 14
     aba:	6b 9a       	sbi	0x0d, 3	; 13
     abc:	6a 9a       	sbi	0x0d, 2	; 13
     abe:	72 9a       	sbi	0x0e, 2	; 14
     ac0:	80 98       	cbi	0x10, 0	; 16
     ac2:	74 9a       	sbi	0x0e, 4	; 14
     ac4:	6d 9a       	sbi	0x0d, 5	; 13
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	8b b9       	out	0x0b, r24	; 11
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	94 e0       	ldi	r25, 0x04	; 4
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <motor_max_pos>
     ad6:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <motor_max_pos+0x1>
     ada:	a0 93 f3 01 	sts	0x01F3, r26	; 0x8001f3 <motor_max_pos+0x2>
     ade:	b0 93 f4 01 	sts	0x01F4, r27	; 0x8001f4 <motor_max_pos+0x3>
     ae2:	88 e8       	ldi	r24, 0x88	; 136
     ae4:	93 e1       	ldi	r25, 0x13	; 19
     ae6:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <motor_max_current+0x1>
     aea:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <motor_max_current>
     aee:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <motor_target_pos>
     af2:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <motor_target_pos+0x1>
     af6:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <motor_target_pos+0x2>
     afa:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <motor_target_pos+0x3>
     afe:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <pid_runs+0x1>
     b02:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <pid_runs>
     b06:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <motor_power+0x1>
     b0a:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <motor_power>
     b0e:	8c e8       	ldi	r24, 0x8C	; 140
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <Kp+0x1>
     b16:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Kp>
     b1a:	84 e1       	ldi	r24, 0x14	; 20
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <Ki+0x1>
     b22:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <Ki>
     b26:	84 e6       	ldi	r24, 0x64	; 100
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <Kd+0x1>
     b2e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Kd>
     b32:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <pid_target>
     b36:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <pid_target+0x1>
     b3a:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <pid_target+0x2>
     b3e:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <pid_target+0x3>
     b42:	8a ef       	ldi	r24, 0xFA	; 250
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 01 05 	call	0xa02	; 0xa02 <set_target_velocity>
     b4a:	0e 94 a4 01 	call	0x348	; 0x348 <init_encoder>
     b4e:	08 95       	ret

00000b50 <enable_motor>:
     b50:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <motor_mode>
     b54:	81 60       	ori	r24, 0x01	; 1
     b56:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <motor_mode>
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
     b62:	08 95       	ret

00000b64 <disable_motor>:
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 8d 04 	call	0x91a	; 0x91a <set_motor_power_raw>
     b6c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <motor_mode>
     b70:	8e 7f       	andi	r24, 0xFE	; 254
     b72:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <motor_mode>
     b76:	08 95       	ret

00000b78 <set_motor_mode>:
     b78:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <motor_mode>
     b7c:	08 95       	ret

00000b7e <get_motor_mode>:
     b7e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <motor_mode>
     b82:	08 95       	ret

00000b84 <get_motor_limit_switch_state>:
     b84:	89 b1       	in	r24, 0x09	; 9
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	80 95       	com	r24
     b8a:	90 95       	com	r25
     b8c:	86 70       	andi	r24, 0x06	; 6
     b8e:	99 27       	eor	r25, r25
     b90:	95 95       	asr	r25
     b92:	87 95       	ror	r24
     b94:	08 95       	ret

00000b96 <set_motor_power>:
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	ec 01       	movw	r28, r24
     b9c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <get_mS>
     ba0:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <last_set>
     ba4:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <last_set+0x1>
     ba8:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <last_set+0x2>
     bac:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <last_set+0x3>
     bb0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <motor_mode>
     bb4:	80 fd       	sbrc	r24, 0
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <set_motor_power+0x2c>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 8d 04 	call	0x91a	; 0x91a <set_motor_power_raw>
     bc0:	2d c0       	rjmp	.+90     	; 0xc1c <set_motor_power+0x86>
     bc2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <reverse>
     bc6:	88 23       	and	r24, r24
     bc8:	19 f0       	breq	.+6      	; 0xbd0 <set_motor_power+0x3a>
     bca:	d1 95       	neg	r29
     bcc:	c1 95       	neg	r28
     bce:	d1 09       	sbc	r29, r1
     bd0:	d0 93 e2 01 	sts	0x01E2, r29	; 0x8001e2 <motor_power+0x1>
     bd4:	c0 93 e1 01 	sts	0x01E1, r28	; 0x8001e1 <motor_power>
     bd8:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_motor_limit_switch_state>
     bdc:	80 ff       	sbrs	r24, 0
     bde:	0b c0       	rjmp	.+22     	; 0xbf6 <set_motor_power+0x60>
     be0:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <motor_power>
     be4:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <motor_power+0x1>
     be8:	33 23       	and	r19, r19
     bea:	2c f4       	brge	.+10     	; 0xbf6 <set_motor_power+0x60>
     bec:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <motor_power+0x1>
     bf0:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <motor_power>
     bf4:	0d c0       	rjmp	.+26     	; 0xc10 <set_motor_power+0x7a>
     bf6:	81 ff       	sbrs	r24, 1
     bf8:	0b c0       	rjmp	.+22     	; 0xc10 <set_motor_power+0x7a>
     bfa:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <motor_power>
     bfe:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <motor_power+0x1>
     c02:	18 16       	cp	r1, r24
     c04:	19 06       	cpc	r1, r25
     c06:	24 f4       	brge	.+8      	; 0xc10 <set_motor_power+0x7a>
     c08:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <motor_power+0x1>
     c0c:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <motor_power>
     c10:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <motor_power>
     c14:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <motor_power+0x1>
     c18:	0e 94 8d 04 	call	0x91a	; 0x91a <set_motor_power_raw>
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <motor_control_tick>:
     c22:	4f 92       	push	r4
     c24:	5f 92       	push	r5
     c26:	6f 92       	push	r6
     c28:	7f 92       	push	r7
     c2a:	8f 92       	push	r8
     c2c:	9f 92       	push	r9
     c2e:	af 92       	push	r10
     c30:	bf 92       	push	r11
     c32:	cf 92       	push	r12
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	00 d0       	rcall	.+0      	; 0xc44 <motor_control_tick+0x22>
     c44:	00 d0       	rcall	.+0      	; 0xc46 <motor_control_tick+0x24>
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <motor_mode>
     c4e:	81 fd       	sbrc	r24, 1
     c50:	9d c2       	rjmp	.+1338   	; 0x118c <motor_control_tick+0x56a>
     c52:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <PID_due>
     c56:	0e 94 9b 01 	call	0x336	; 0x336 <get_encoder_ticks>
     c5a:	6b 01       	movw	r12, r22
     c5c:	7c 01       	movw	r14, r24
     c5e:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     c62:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <__data_end+0x1>
     c66:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <__data_end+0x2>
     c6a:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <__data_end+0x3>
     c6e:	c8 16       	cp	r12, r24
     c70:	d9 06       	cpc	r13, r25
     c72:	ea 06       	cpc	r14, r26
     c74:	fb 06       	cpc	r15, r27
     c76:	c1 f0       	breq	.+48     	; 0xca8 <motor_control_tick+0x86>
     c78:	ff 92       	push	r15
     c7a:	ef 92       	push	r14
     c7c:	df 92       	push	r13
     c7e:	cf 92       	push	r12
     c80:	83 e9       	ldi	r24, 0x93	; 147
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	9f 93       	push	r25
     c86:	8f 93       	push	r24
     c88:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <tprintf>
     c8c:	c0 92 d0 01 	sts	0x01D0, r12	; 0x8001d0 <__data_end>
     c90:	d0 92 d1 01 	sts	0x01D1, r13	; 0x8001d1 <__data_end+0x1>
     c94:	e0 92 d2 01 	sts	0x01D2, r14	; 0x8001d2 <__data_end+0x2>
     c98:	f0 92 d3 01 	sts	0x01D3, r15	; 0x8001d3 <__data_end+0x3>
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0e 94 8c 0b 	call	0x1718	; 0x1718 <get_mS>
     cac:	c0 90 fc 01 	lds	r12, 0x01FC	; 0x8001fc <last_set>
     cb0:	d0 90 fd 01 	lds	r13, 0x01FD	; 0x8001fd <last_set+0x1>
     cb4:	e0 90 fe 01 	lds	r14, 0x01FE	; 0x8001fe <last_set+0x2>
     cb8:	f0 90 ff 01 	lds	r15, 0x01FF	; 0x8001ff <last_set+0x3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	8c 19       	sub	r24, r12
     cc2:	9d 09       	sbc	r25, r13
     cc4:	ae 09       	sbc	r26, r14
     cc6:	bf 09       	sbc	r27, r15
     cc8:	83 3e       	cpi	r24, 0xE3	; 227
     cca:	94 40       	sbci	r25, 0x04	; 4
     ccc:	a1 05       	cpc	r26, r1
     cce:	b1 05       	cpc	r27, r1
     cd0:	20 f0       	brcs	.+8      	; 0xcda <motor_control_tick+0xb8>
     cd2:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <motor_power+0x1>
     cd6:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <motor_power>
     cda:	64 99       	sbic	0x0c, 4	; 12
     cdc:	0a c0       	rjmp	.+20     	; 0xcf2 <motor_control_tick+0xd0>
     cde:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <motor_power+0x1>
     ce2:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <motor_power>
     ce6:	0e 94 b2 05 	call	0xb64	; 0xb64 <disable_motor>
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <set_LED>
     cf2:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <motor_mode>
     cf6:	81 ff       	sbrs	r24, 1
     cf8:	f9 c1       	rjmp	.+1010   	; 0x10ec <motor_control_tick+0x4ca>
     cfa:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <PID_due>
     cfe:	88 23       	and	r24, r24
     d00:	09 f4       	brne	.+2      	; 0xd04 <motor_control_tick+0xe2>
     d02:	f4 c1       	rjmp	.+1000   	; 0x10ec <motor_control_tick+0x4ca>
     d04:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <slow>
     d08:	88 23       	and	r24, r24
     d0a:	09 f4       	brne	.+2      	; 0xd0e <motor_control_tick+0xec>
     d0c:	6f c0       	rjmp	.+222    	; 0xdec <motor_control_tick+0x1ca>
     d0e:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <tgt_inc>
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <pid_runs>
     d18:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <pid_runs+0x1>
     d1c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__udivmodhi4>
     d20:	89 2b       	or	r24, r25
     d22:	09 f0       	breq	.+2      	; 0xd26 <motor_control_tick+0x104>
     d24:	c6 c0       	rjmp	.+396    	; 0xeb2 <motor_control_tick+0x290>
     d26:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <motor_target_pos>
     d2a:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <motor_target_pos+0x1>
     d2e:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <motor_target_pos+0x2>
     d32:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <motor_target_pos+0x3>
     d36:	40 91 f7 01 	lds	r20, 0x01F7	; 0x8001f7 <pid_target>
     d3a:	50 91 f8 01 	lds	r21, 0x01F8	; 0x8001f8 <pid_target+0x1>
     d3e:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <pid_target+0x2>
     d42:	70 91 fa 01 	lds	r23, 0x01FA	; 0x8001fa <pid_target+0x3>
     d46:	48 17       	cp	r20, r24
     d48:	59 07       	cpc	r21, r25
     d4a:	6a 07       	cpc	r22, r26
     d4c:	7b 07       	cpc	r23, r27
     d4e:	2c f5       	brge	.+74     	; 0xd9a <motor_control_tick+0x178>
     d50:	7c 01       	movw	r14, r24
     d52:	8d 01       	movw	r16, r26
     d54:	e4 1a       	sub	r14, r20
     d56:	f5 0a       	sbc	r15, r21
     d58:	06 0b       	sbc	r16, r22
     d5a:	17 0b       	sbc	r17, r23
     d5c:	a8 01       	movw	r20, r16
     d5e:	97 01       	movw	r18, r14
     d60:	65 e0       	ldi	r22, 0x05	; 5
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <min>
     d6c:	c0 90 f7 01 	lds	r12, 0x01F7	; 0x8001f7 <pid_target>
     d70:	d0 90 f8 01 	lds	r13, 0x01F8	; 0x8001f8 <pid_target+0x1>
     d74:	e0 90 f9 01 	lds	r14, 0x01F9	; 0x8001f9 <pid_target+0x2>
     d78:	f0 90 fa 01 	lds	r15, 0x01FA	; 0x8001fa <pid_target+0x3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	8c 0d       	add	r24, r12
     d82:	9d 1d       	adc	r25, r13
     d84:	ae 1d       	adc	r26, r14
     d86:	bf 1d       	adc	r27, r15
     d88:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <pid_target>
     d8c:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <pid_target+0x1>
     d90:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <pid_target+0x2>
     d94:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <pid_target+0x3>
     d98:	8c c0       	rjmp	.+280    	; 0xeb2 <motor_control_tick+0x290>
     d9a:	84 17       	cp	r24, r20
     d9c:	95 07       	cpc	r25, r21
     d9e:	a6 07       	cpc	r26, r22
     da0:	b7 07       	cpc	r27, r23
     da2:	0c f0       	brlt	.+2      	; 0xda6 <motor_control_tick+0x184>
     da4:	86 c0       	rjmp	.+268    	; 0xeb2 <motor_control_tick+0x290>
     da6:	9a 01       	movw	r18, r20
     da8:	ab 01       	movw	r20, r22
     daa:	28 1b       	sub	r18, r24
     dac:	39 0b       	sbc	r19, r25
     dae:	4a 0b       	sbc	r20, r26
     db0:	5b 0b       	sbc	r21, r27
     db2:	65 e0       	ldi	r22, 0x05	; 5
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <min>
     dbe:	c0 90 f7 01 	lds	r12, 0x01F7	; 0x8001f7 <pid_target>
     dc2:	d0 90 f8 01 	lds	r13, 0x01F8	; 0x8001f8 <pid_target+0x1>
     dc6:	e0 90 f9 01 	lds	r14, 0x01F9	; 0x8001f9 <pid_target+0x2>
     dca:	f0 90 fa 01 	lds	r15, 0x01FA	; 0x8001fa <pid_target+0x3>
     dce:	97 01       	movw	r18, r14
     dd0:	86 01       	movw	r16, r12
     dd2:	06 1b       	sub	r16, r22
     dd4:	17 0b       	sbc	r17, r23
     dd6:	28 0b       	sbc	r18, r24
     dd8:	39 0b       	sbc	r19, r25
     dda:	00 93 f7 01 	sts	0x01F7, r16	; 0x8001f7 <pid_target>
     dde:	10 93 f8 01 	sts	0x01F8, r17	; 0x8001f8 <pid_target+0x1>
     de2:	20 93 f9 01 	sts	0x01F9, r18	; 0x8001f9 <pid_target+0x2>
     de6:	30 93 fa 01 	sts	0x01FA, r19	; 0x8001fa <pid_target+0x3>
     dea:	63 c0       	rjmp	.+198    	; 0xeb2 <motor_control_tick+0x290>
     dec:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <motor_target_pos>
     df0:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <motor_target_pos+0x1>
     df4:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <motor_target_pos+0x2>
     df8:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <motor_target_pos+0x3>
     dfc:	40 91 f7 01 	lds	r20, 0x01F7	; 0x8001f7 <pid_target>
     e00:	50 91 f8 01 	lds	r21, 0x01F8	; 0x8001f8 <pid_target+0x1>
     e04:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <pid_target+0x2>
     e08:	70 91 fa 01 	lds	r23, 0x01FA	; 0x8001fa <pid_target+0x3>
     e0c:	48 17       	cp	r20, r24
     e0e:	59 07       	cpc	r21, r25
     e10:	6a 07       	cpc	r22, r26
     e12:	7b 07       	cpc	r23, r27
     e14:	34 f5       	brge	.+76     	; 0xe62 <motor_control_tick+0x240>
     e16:	7c 01       	movw	r14, r24
     e18:	8d 01       	movw	r16, r26
     e1a:	e4 1a       	sub	r14, r20
     e1c:	f5 0a       	sbc	r15, r21
     e1e:	06 0b       	sbc	r16, r22
     e20:	17 0b       	sbc	r17, r23
     e22:	a8 01       	movw	r20, r16
     e24:	97 01       	movw	r18, r14
     e26:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <tgt_inc>
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <min>
     e34:	c0 90 f7 01 	lds	r12, 0x01F7	; 0x8001f7 <pid_target>
     e38:	d0 90 f8 01 	lds	r13, 0x01F8	; 0x8001f8 <pid_target+0x1>
     e3c:	e0 90 f9 01 	lds	r14, 0x01F9	; 0x8001f9 <pid_target+0x2>
     e40:	f0 90 fa 01 	lds	r15, 0x01FA	; 0x8001fa <pid_target+0x3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	8c 0d       	add	r24, r12
     e4a:	9d 1d       	adc	r25, r13
     e4c:	ae 1d       	adc	r26, r14
     e4e:	bf 1d       	adc	r27, r15
     e50:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <pid_target>
     e54:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <pid_target+0x1>
     e58:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <pid_target+0x2>
     e5c:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <pid_target+0x3>
     e60:	28 c0       	rjmp	.+80     	; 0xeb2 <motor_control_tick+0x290>
     e62:	84 17       	cp	r24, r20
     e64:	95 07       	cpc	r25, r21
     e66:	a6 07       	cpc	r26, r22
     e68:	b7 07       	cpc	r27, r23
     e6a:	1c f5       	brge	.+70     	; 0xeb2 <motor_control_tick+0x290>
     e6c:	9a 01       	movw	r18, r20
     e6e:	ab 01       	movw	r20, r22
     e70:	28 1b       	sub	r18, r24
     e72:	39 0b       	sbc	r19, r25
     e74:	4a 0b       	sbc	r20, r26
     e76:	5b 0b       	sbc	r21, r27
     e78:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <tgt_inc>
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <min>
     e86:	c0 90 f7 01 	lds	r12, 0x01F7	; 0x8001f7 <pid_target>
     e8a:	d0 90 f8 01 	lds	r13, 0x01F8	; 0x8001f8 <pid_target+0x1>
     e8e:	e0 90 f9 01 	lds	r14, 0x01F9	; 0x8001f9 <pid_target+0x2>
     e92:	f0 90 fa 01 	lds	r15, 0x01FA	; 0x8001fa <pid_target+0x3>
     e96:	97 01       	movw	r18, r14
     e98:	86 01       	movw	r16, r12
     e9a:	06 1b       	sub	r16, r22
     e9c:	17 0b       	sbc	r17, r23
     e9e:	28 0b       	sbc	r18, r24
     ea0:	39 0b       	sbc	r19, r25
     ea2:	00 93 f7 01 	sts	0x01F7, r16	; 0x8001f7 <pid_target>
     ea6:	10 93 f8 01 	sts	0x01F8, r17	; 0x8001f8 <pid_target+0x1>
     eaa:	20 93 f9 01 	sts	0x01F9, r18	; 0x8001f9 <pid_target+0x2>
     eae:	30 93 fa 01 	sts	0x01FA, r19	; 0x8001fa <pid_target+0x3>
     eb2:	0e 94 9b 01 	call	0x336	; 0x336 <get_encoder_ticks>
     eb6:	4b 01       	movw	r8, r22
     eb8:	5c 01       	movw	r10, r24
     eba:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <pid_target>
     ebe:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <pid_target+0x1>
     ec2:	a0 91 f9 01 	lds	r26, 0x01F9	; 0x8001f9 <pid_target+0x2>
     ec6:	b0 91 fa 01 	lds	r27, 0x01FA	; 0x8001fa <pid_target+0x3>
     eca:	75 01       	movw	r14, r10
     ecc:	64 01       	movw	r12, r8
     ece:	c8 1a       	sub	r12, r24
     ed0:	d9 0a       	sbc	r13, r25
     ed2:	ea 0a       	sbc	r14, r26
     ed4:	fb 0a       	sbc	r15, r27
     ed6:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <last_pos_err>
     eda:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <last_pos_err+0x1>
     ede:	40 91 0d 02 	lds	r20, 0x020D	; 0x80020d <last_pos_err+0x2>
     ee2:	50 91 0e 02 	lds	r21, 0x020E	; 0x80020e <last_pos_err+0x3>
     ee6:	29 83       	std	Y+1, r18	; 0x01
     ee8:	3a 83       	std	Y+2, r19	; 0x02
     eea:	4b 83       	std	Y+3, r20	; 0x03
     eec:	5c 83       	std	Y+4, r21	; 0x04
     eee:	c0 92 0b 02 	sts	0x020B, r12	; 0x80020b <last_pos_err>
     ef2:	d0 92 0c 02 	sts	0x020C, r13	; 0x80020c <last_pos_err+0x1>
     ef6:	e0 92 0d 02 	sts	0x020D, r14	; 0x80020d <last_pos_err+0x2>
     efa:	f0 92 0e 02 	sts	0x020E, r15	; 0x80020e <last_pos_err+0x3>
     efe:	c6 01       	movw	r24, r12
     f00:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <int_abs>
     f04:	05 97       	sbiw	r24, 0x05	; 5
     f06:	a0 f0       	brcs	.+40     	; 0xf30 <motor_control_tick+0x30e>
     f08:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <pos_i>
     f0c:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <pos_i+0x1>
     f10:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <pos_i+0x2>
     f14:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <pos_i+0x3>
     f18:	8c 0d       	add	r24, r12
     f1a:	9d 1d       	adc	r25, r13
     f1c:	ae 1d       	adc	r26, r14
     f1e:	bf 1d       	adc	r27, r15
     f20:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <pos_i>
     f24:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <pos_i+0x1>
     f28:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <pos_i+0x2>
     f2c:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <pos_i+0x3>
     f30:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <motor_target_pos>
     f34:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <motor_target_pos+0x1>
     f38:	a4 01       	movw	r20, r8
     f3a:	48 1b       	sub	r20, r24
     f3c:	59 0b       	sbc	r21, r25
     f3e:	ca 01       	movw	r24, r20
     f40:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <int_abs>
     f44:	04 97       	sbiw	r24, 0x04	; 4
     f46:	28 f4       	brcc	.+10     	; 0xf52 <motor_control_tick+0x330>
     f48:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <motor_power+0x1>
     f4c:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <motor_power>
     f50:	90 c0       	rjmp	.+288    	; 0x1072 <motor_control_tick+0x450>
     f52:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <pos_i>
     f56:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <pos_i+0x1>
     f5a:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <pos_i+0x2>
     f5e:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <pos_i+0x3>
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	53 e0       	ldi	r21, 0x03	; 3
     f66:	95 07       	cpc	r25, r21
     f68:	a1 05       	cpc	r26, r1
     f6a:	b1 05       	cpc	r27, r1
     f6c:	6c f0       	brlt	.+26     	; 0xf88 <motor_control_tick+0x366>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	93 e0       	ldi	r25, 0x03	; 3
     f72:	a0 e0       	ldi	r26, 0x00	; 0
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <pos_i>
     f7a:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <pos_i+0x1>
     f7e:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <pos_i+0x2>
     f82:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <pos_i+0x3>
     f86:	11 c0       	rjmp	.+34     	; 0xfaa <motor_control_tick+0x388>
     f88:	81 15       	cp	r24, r1
     f8a:	9d 4f       	sbci	r25, 0xFD	; 253
     f8c:	af 4f       	sbci	r26, 0xFF	; 255
     f8e:	bf 4f       	sbci	r27, 0xFF	; 255
     f90:	64 f4       	brge	.+24     	; 0xfaa <motor_control_tick+0x388>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	9d ef       	ldi	r25, 0xFD	; 253
     f96:	af ef       	ldi	r26, 0xFF	; 255
     f98:	bf ef       	ldi	r27, 0xFF	; 255
     f9a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <pos_i>
     f9e:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <pos_i+0x1>
     fa2:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <pos_i+0x2>
     fa6:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <pos_i+0x3>
     faa:	a0 91 e5 01 	lds	r26, 0x01E5	; 0x8001e5 <Ki>
     fae:	b0 91 e6 01 	lds	r27, 0x01E6	; 0x8001e6 <Ki+0x1>
     fb2:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <pos_i>
     fb6:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <pos_i+0x1>
     fba:	40 91 e9 01 	lds	r20, 0x01E9	; 0x8001e9 <pos_i+0x2>
     fbe:	50 91 ea 01 	lds	r21, 0x01EA	; 0x8001ea <pos_i+0x3>
     fc2:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__muluhisi3>
     fc6:	24 e1       	ldi	r18, 0x14	; 20
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divmodsi4>
     fd2:	29 01       	movw	r4, r18
     fd4:	3a 01       	movw	r6, r20
     fd6:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <Kp>
     fda:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <Kp+0x1>
     fde:	a7 01       	movw	r20, r14
     fe0:	96 01       	movw	r18, r12
     fe2:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__muluhisi3>
     fe6:	24 e1       	ldi	r18, 0x14	; 20
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divmodsi4>
     ff2:	42 0e       	add	r4, r18
     ff4:	53 1e       	adc	r5, r19
     ff6:	64 1e       	adc	r6, r20
     ff8:	75 1e       	adc	r7, r21
     ffa:	a7 01       	movw	r20, r14
     ffc:	96 01       	movw	r18, r12
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	ab 81       	ldd	r26, Y+3	; 0x03
    1004:	bc 81       	ldd	r27, Y+4	; 0x04
    1006:	28 1b       	sub	r18, r24
    1008:	39 0b       	sbc	r19, r25
    100a:	4a 0b       	sbc	r20, r26
    100c:	5b 0b       	sbc	r21, r27
    100e:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <Kd>
    1012:	b0 91 04 02 	lds	r27, 0x0204	; 0x800204 <Kd+0x1>
    1016:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__muluhisi3>
    101a:	24 e1       	ldi	r18, 0x14	; 20
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divmodsi4>
    1026:	42 0e       	add	r4, r18
    1028:	53 1e       	adc	r5, r19
    102a:	64 1e       	adc	r6, r20
    102c:	75 1e       	adc	r7, r21
    102e:	91 e8       	ldi	r25, 0x81	; 129
    1030:	49 16       	cp	r4, r25
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	59 06       	cpc	r5, r25
    1036:	61 04       	cpc	r6, r1
    1038:	71 04       	cpc	r7, r1
    103a:	34 f0       	brlt	.+12     	; 0x1048 <motor_control_tick+0x426>
    103c:	41 2c       	mov	r4, r1
    103e:	51 2c       	mov	r5, r1
    1040:	32 01       	movw	r6, r4
    1042:	68 94       	set
    1044:	47 f8       	bld	r4, 7
    1046:	53 94       	inc	r5
    1048:	a0 e8       	ldi	r26, 0x80	; 128
    104a:	4a 16       	cp	r4, r26
    104c:	ae ef       	ldi	r26, 0xFE	; 254
    104e:	5a 06       	cpc	r5, r26
    1050:	af ef       	ldi	r26, 0xFF	; 255
    1052:	6a 06       	cpc	r6, r26
    1054:	7a 06       	cpc	r7, r26
    1056:	4c f4       	brge	.+18     	; 0x106a <motor_control_tick+0x448>
    1058:	0f 2e       	mov	r0, r31
    105a:	f0 e8       	ldi	r31, 0x80	; 128
    105c:	4f 2e       	mov	r4, r31
    105e:	fe ef       	ldi	r31, 0xFE	; 254
    1060:	5f 2e       	mov	r5, r31
    1062:	66 24       	eor	r6, r6
    1064:	6a 94       	dec	r6
    1066:	76 2c       	mov	r7, r6
    1068:	f0 2d       	mov	r31, r0
    106a:	50 92 e2 01 	sts	0x01E2, r5	; 0x8001e2 <motor_power+0x1>
    106e:	40 92 e1 01 	sts	0x01E1, r4	; 0x8001e1 <motor_power>
    1072:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <av>
    1076:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <av+0x1>
    107a:	9c 01       	movw	r18, r24
    107c:	22 0f       	add	r18, r18
    107e:	33 1f       	adc	r19, r19
    1080:	22 0f       	add	r18, r18
    1082:	33 1f       	adc	r19, r19
    1084:	22 0f       	add	r18, r18
    1086:	33 1f       	adc	r19, r19
    1088:	82 0f       	add	r24, r18
    108a:	93 1f       	adc	r25, r19
    108c:	6a e0       	ldi	r22, 0x0A	; 10
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__divmodhi4>
    1094:	7b 01       	movw	r14, r22
    1096:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <get_encoder_velocity>
    109a:	6a e0       	ldi	r22, 0x0A	; 10
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__divmodhi4>
    10a2:	e6 0e       	add	r14, r22
    10a4:	f7 1e       	adc	r15, r23
    10a6:	f0 92 f6 01 	sts	0x01F6, r15	; 0x8001f6 <av+0x1>
    10aa:	e0 92 f5 01 	sts	0x01F5, r14	; 0x8001f5 <av>
    10ae:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <motor_power+0x1>
    10b2:	8f 93       	push	r24
    10b4:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <motor_power>
    10b8:	8f 93       	push	r24
    10ba:	9f 92       	push	r9
    10bc:	8f 92       	push	r8
    10be:	88 ec       	ldi	r24, 0xC8	; 200
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	9f 93       	push	r25
    10c4:	8f 93       	push	r24
    10c6:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <tprintf>
    10ca:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <pid_runs>
    10ce:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <pid_runs+0x1>
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <pid_runs+0x1>
    10d8:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <pid_runs>
    10dc:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <PID_due>
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_motor_limit_switch_state>
    10f0:	f8 2e       	mov	r15, r24
    10f2:	80 ff       	sbrs	r24, 0
    10f4:	27 c0       	rjmp	.+78     	; 0x1144 <motor_control_tick+0x522>
    10f6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <motor_mode>
    10fa:	82 ff       	sbrs	r24, 2
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <motor_control_tick+0x4e2>
    10fe:	8b 7f       	andi	r24, 0xFB	; 251
    1100:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <motor_mode>
    1104:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <motor_target_pos>
    1108:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <motor_target_pos+0x1>
    110c:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <motor_target_pos+0x2>
    1110:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <motor_target_pos+0x3>
    1114:	bb 23       	and	r27, r27
    1116:	44 f4       	brge	.+16     	; 0x1128 <motor_control_tick+0x506>
    1118:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <motor_target_pos>
    111c:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <motor_target_pos+0x1>
    1120:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <motor_target_pos+0x2>
    1124:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <motor_target_pos+0x3>
    1128:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <motor_power>
    112c:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <motor_power+0x1>
    1130:	99 23       	and	r25, r25
    1132:	44 f4       	brge	.+16     	; 0x1144 <motor_control_tick+0x522>
    1134:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <motor_power+0x1>
    1138:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <motor_power>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 8d 04 	call	0x91a	; 0x91a <set_motor_power_raw>
    1144:	f1 fe       	sbrs	r15, 1
    1146:	18 c0       	rjmp	.+48     	; 0x1178 <motor_control_tick+0x556>
    1148:	0e 94 c3 01 	call	0x386	; 0x386 <reset_encoder>
    114c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <motor_mode>
    1150:	82 ff       	sbrs	r24, 2
    1152:	03 c0       	rjmp	.+6      	; 0x115a <motor_control_tick+0x538>
    1154:	8b 7f       	andi	r24, 0xFB	; 251
    1156:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <motor_mode>
    115a:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <motor_power>
    115e:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <motor_power+0x1>
    1162:	18 16       	cp	r1, r24
    1164:	19 06       	cpc	r1, r25
    1166:	44 f4       	brge	.+16     	; 0x1178 <motor_control_tick+0x556>
    1168:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <motor_power+0x1>
    116c:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <motor_power>
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 8d 04 	call	0x91a	; 0x91a <set_motor_power_raw>
    1178:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <motor_power>
    117c:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <motor_power+0x1>
    1180:	91 95       	neg	r25
    1182:	81 95       	neg	r24
    1184:	91 09       	sbc	r25, r1
    1186:	0e 94 8d 04 	call	0x91a	; 0x91a <set_motor_power_raw>
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <motor_control_tick+0x570>
    118c:	64 9b       	sbis	0x0c, 4	; 12
    118e:	a7 cd       	rjmp	.-1202   	; 0xcde <motor_control_tick+0xbc>
    1190:	b4 cd       	rjmp	.-1176   	; 0xcfa <motor_control_tick+0xd8>
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	df 90       	pop	r13
    11a8:	cf 90       	pop	r12
    11aa:	bf 90       	pop	r11
    11ac:	af 90       	pop	r10
    11ae:	9f 90       	pop	r9
    11b0:	8f 90       	pop	r8
    11b2:	7f 90       	pop	r7
    11b4:	6f 90       	pop	r6
    11b6:	5f 90       	pop	r5
    11b8:	4f 90       	pop	r4
    11ba:	08 95       	ret

000011bc <set_motor_reverse>:

void set_motor_reverse(uint8_t r){
	reverse = r;
    11bc:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <reverse>
    11c0:	08 95       	ret

000011c2 <disable_mob_interrupt>:
	CANIDT2 = ((packetToSend->id & 7) << 5);
	CANIDT1 = ((packetToSend->id & 0x7F8) >> 3);
	CANCDMOB |= (1<<CONMOB0);
	enable_mob_interrupt(mob); //Enable MOb interrupt
	return 0;
}
    11c2:	88 30       	cpi	r24, 0x08	; 8
    11c4:	80 f4       	brcc	.+32     	; 0x11e6 <disable_mob_interrupt+0x24>
    11c6:	ee ed       	ldi	r30, 0xDE	; 222
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	40 81       	ld	r20, Z
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	b9 01       	movw	r22, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <disable_mob_interrupt+0x16>
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	8a 95       	dec	r24
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <disable_mob_interrupt+0x12>
    11dc:	cb 01       	movw	r24, r22
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	80 83       	st	Z, r24
    11e4:	08 95       	ret
    11e6:	ef ed       	ldi	r30, 0xDF	; 223
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	40 81       	ld	r20, Z
    11ec:	88 50       	subi	r24, 0x08	; 8
    11ee:	21 e0       	ldi	r18, 0x01	; 1
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	b9 01       	movw	r22, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <disable_mob_interrupt+0x38>
    11f6:	66 0f       	add	r22, r22
    11f8:	77 1f       	adc	r23, r23
    11fa:	8a 95       	dec	r24
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <disable_mob_interrupt+0x34>
    11fe:	cb 01       	movw	r24, r22
    1200:	80 95       	com	r24
    1202:	84 23       	and	r24, r20
    1204:	80 83       	st	Z, r24
    1206:	08 95       	ret

00001208 <enable_mob_interrupt>:
    1208:	88 30       	cpi	r24, 0x08	; 8
    120a:	78 f4       	brcc	.+30     	; 0x122a <enable_mob_interrupt+0x22>
    120c:	ee ed       	ldi	r30, 0xDE	; 222
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	40 81       	ld	r20, Z
    1212:	21 e0       	ldi	r18, 0x01	; 1
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	b9 01       	movw	r22, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <enable_mob_interrupt+0x16>
    121a:	66 0f       	add	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	8a 95       	dec	r24
    1220:	e2 f7       	brpl	.-8      	; 0x121a <enable_mob_interrupt+0x12>
    1222:	cb 01       	movw	r24, r22
    1224:	84 2b       	or	r24, r20
    1226:	80 83       	st	Z, r24
    1228:	08 95       	ret
    122a:	ef ed       	ldi	r30, 0xDF	; 223
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	40 81       	ld	r20, Z
    1230:	88 50       	subi	r24, 0x08	; 8
    1232:	21 e0       	ldi	r18, 0x01	; 1
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	b9 01       	movw	r22, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <enable_mob_interrupt+0x36>
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <enable_mob_interrupt+0x32>
    1242:	cb 01       	movw	r24, r22
    1244:	84 2b       	or	r24, r20
    1246:	80 83       	st	Z, r24
    1248:	08 95       	ret

0000124a <__vector_18>:
    124a:	1f 92       	push	r1
    124c:	0f 92       	push	r0
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	0f 92       	push	r0
    1252:	11 24       	eor	r1, r1
    1254:	2f 93       	push	r18
    1256:	3f 93       	push	r19
    1258:	4f 93       	push	r20
    125a:	5f 93       	push	r21
    125c:	6f 93       	push	r22
    125e:	7f 93       	push	r23
    1260:	8f 93       	push	r24
    1262:	9f 93       	push	r25
    1264:	af 93       	push	r26
    1266:	bf 93       	push	r27
    1268:	cf 93       	push	r28
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
    126e:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1272:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1276:	80 7f       	andi	r24, 0xF0	; 240
    1278:	80 3f       	cpi	r24, 0xF0	; 240
    127a:	b1 f1       	breq	.+108    	; 0x12e8 <__vector_18+0x9e>
    127c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1280:	82 95       	swap	r24
    1282:	8f 70       	andi	r24, 0x0F	; 15
    1284:	90 e1       	ldi	r25, 0x10	; 16
    1286:	89 9f       	mul	r24, r25
    1288:	90 01       	movw	r18, r0
    128a:	11 24       	eor	r1, r1
    128c:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1290:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    1294:	96 ff       	sbrs	r25, 6
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <__vector_18+0x60>
    1298:	ee ee       	ldi	r30, 0xEE	; 238
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	90 81       	ld	r25, Z
    129e:	10 82       	st	Z, r1
    12a0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
    12a4:	0e 94 04 09 	call	0x1208	; 0x1208 <enable_mob_interrupt>
    12a8:	23 c0       	rjmp	.+70     	; 0x12f0 <__vector_18+0xa6>
    12aa:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <msgs_av>
    12ae:	9f 5f       	subi	r25, 0xFF	; 255
    12b0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <msgs_av>
    12b4:	e8 2f       	mov	r30, r24
    12b6:	e6 95       	lsr	r30
    12b8:	e6 95       	lsr	r30
    12ba:	e6 95       	lsr	r30
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	ef 5e       	subi	r30, 0xEF	; 239
    12c0:	fd 4f       	sbci	r31, 0xFD	; 253
    12c2:	90 81       	ld	r25, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	47 70       	andi	r20, 0x07	; 7
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <__vector_18+0x88>
    12ce:	22 0f       	add	r18, r18
    12d0:	33 1f       	adc	r19, r19
    12d2:	4a 95       	dec	r20
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <__vector_18+0x84>
    12d6:	29 2b       	or	r18, r25
    12d8:	20 83       	st	Z, r18
    12da:	ee ee       	ldi	r30, 0xEE	; 238
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	90 81       	ld	r25, Z
    12e0:	10 82       	st	Z, r1
    12e2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <disable_mob_interrupt>
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <__vector_18+0xa6>
    12e8:	ea ed       	ldi	r30, 0xDA	; 218
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	80 83       	st	Z, r24
    12f0:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	cf 91       	pop	r28
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <set_mob_rx_filter>:
    1318:	9c 01       	movw	r18, r24
    131a:	33 27       	eor	r19, r19
    131c:	22 95       	swap	r18
    131e:	32 95       	swap	r19
    1320:	30 7f       	andi	r19, 0xF0	; 240
    1322:	32 27       	eor	r19, r18
    1324:	20 7f       	andi	r18, 0xF0	; 240
    1326:	32 27       	eor	r19, r18
    1328:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    132c:	9c 01       	movw	r18, r24
    132e:	21 50       	subi	r18, 0x01	; 1
    1330:	31 09       	sbc	r19, r1
    1332:	22 30       	cpi	r18, 0x02	; 2
    1334:	31 05       	cpc	r19, r1
    1336:	38 f4       	brcc	.+14     	; 0x1346 <set_mob_rx_filter+0x2e>
    1338:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <devGrp>
    133c:	20 e4       	ldi	r18, 0x40	; 64
    133e:	82 9f       	mul	r24, r18
    1340:	c0 01       	movw	r24, r0
    1342:	11 24       	eor	r1, r1
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <set_mob_rx_filter+0x4c>
    1346:	03 97       	sbiw	r24, 0x03	; 3
    1348:	02 97       	sbiw	r24, 0x02	; 2
    134a:	50 f4       	brcc	.+20     	; 0x1360 <set_mob_rx_filter+0x48>
    134c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <devGrp>
    1350:	20 e4       	ldi	r18, 0x40	; 64
    1352:	82 9f       	mul	r24, r18
    1354:	c0 01       	movw	r24, r0
    1356:	11 24       	eor	r1, r1
    1358:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <devSer>
    135c:	82 2b       	or	r24, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <set_mob_rx_filter+0x4c>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    1368:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    136c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1370:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1374:	28 2f       	mov	r18, r24
    1376:	22 95       	swap	r18
    1378:	22 0f       	add	r18, r18
    137a:	20 7e       	andi	r18, 0xE0	; 224
    137c:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1380:	88 7f       	andi	r24, 0xF8	; 248
    1382:	97 70       	andi	r25, 0x07	; 7
    1384:	96 95       	lsr	r25
    1386:	87 95       	ror	r24
    1388:	96 95       	lsr	r25
    138a:	87 95       	ror	r24
    138c:	96 95       	lsr	r25
    138e:	87 95       	ror	r24
    1390:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    1394:	80 ee       	ldi	r24, 0xE0	; 224
    1396:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    139a:	8f e7       	ldi	r24, 0x7F	; 127
    139c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
    13a0:	08 95       	ret

000013a2 <init_CAN>:
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	e8 ed       	ldi	r30, 0xD8	; 216
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	90 81       	ld	r25, Z
    13b6:	91 60       	ori	r25, 0x01	; 1
    13b8:	90 83       	st	Z, r25
    13ba:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <devGrp>
    13be:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <devSer>
    13c2:	2f ef       	ldi	r18, 0xFF	; 255
    13c4:	31 ee       	ldi	r19, 0xE1	; 225
    13c6:	94 e0       	ldi	r25, 0x04	; 4
    13c8:	21 50       	subi	r18, 0x01	; 1
    13ca:	30 40       	sbci	r19, 0x00	; 0
    13cc:	90 40       	sbci	r25, 0x00	; 0
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <init_CAN+0x26>
    13d0:	00 c0       	rjmp	.+0      	; 0x13d2 <init_CAN+0x30>
    13d2:	00 00       	nop
    13d4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    13d8:	70 93 e3 00 	sts	0x00E3, r23	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    13dc:	60 93 e4 00 	sts	0x00E4, r22	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    13e0:	80 eb       	ldi	r24, 0xB0	; 176
    13e2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    13ec:	e1 e1       	ldi	r30, 0x11	; 17
    13ee:	f2 e0       	ldi	r31, 0x02	; 2
    13f0:	11 82       	std	Z+1, r1	; 0x01
    13f2:	10 82       	st	Z, r1
    13f4:	c0 e0       	ldi	r28, 0x00	; 0
    13f6:	d0 e0       	ldi	r29, 0x00	; 0
    13f8:	0f ee       	ldi	r16, 0xEF	; 239
    13fa:	10 e0       	ldi	r17, 0x00	; 0
    13fc:	0f 2e       	mov	r0, r31
    13fe:	fe ee       	ldi	r31, 0xEE	; 238
    1400:	ef 2e       	mov	r14, r31
    1402:	f1 2c       	mov	r15, r1
    1404:	f0 2d       	mov	r31, r0
    1406:	68 94       	set
    1408:	dd 24       	eor	r13, r13
    140a:	d7 f8       	bld	r13, 7
    140c:	c5 30       	cpi	r28, 0x05	; 5
    140e:	60 f4       	brcc	.+24     	; 0x1428 <init_CAN+0x86>
    1410:	f7 01       	movw	r30, r14
    1412:	80 81       	ld	r24, Z
    1414:	10 82       	st	Z, r1
    1416:	ce 01       	movw	r24, r28
    1418:	0e 94 8c 09 	call	0x1318	; 0x1318 <set_mob_rx_filter>
    141c:	f8 01       	movw	r30, r16
    141e:	d0 82       	st	Z, r13
    1420:	8c 2f       	mov	r24, r28
    1422:	0e 94 04 09 	call	0x1208	; 0x1208 <enable_mob_interrupt>
    1426:	02 c0       	rjmp	.+4      	; 0x142c <init_CAN+0x8a>
    1428:	f8 01       	movw	r30, r16
    142a:	10 82       	st	Z, r1
    142c:	21 96       	adiw	r28, 0x01	; 1
    142e:	cf 30       	cpi	r28, 0x0F	; 15
    1430:	d1 05       	cpc	r29, r1
    1432:	61 f7       	brne	.-40     	; 0x140c <init_CAN+0x6a>
    1434:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <msgs_av>
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	df 90       	pop	r13
    144c:	08 95       	ret

0000144e <InitCAN>:
    144e:	9b 01       	movw	r18, r22
    1450:	ac 01       	movw	r20, r24
    1452:	63 e1       	ldi	r22, 0x13	; 19
    1454:	74 e0       	ldi	r23, 0x04	; 4
    1456:	8e e1       	ldi	r24, 0x1E	; 30
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <init_CAN>
    145e:	08 95       	ret

00001460 <PollAndReceiveCANPacket>:

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
	if(receivedPacket == NULL){
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	09 f4       	brne	.+2      	; 0x146c <PollAndReceiveCANPacket+0xc>
    146a:	83 c0       	rjmp	.+262    	; 0x1572 <PollAndReceiveCANPacket+0x112>
	return (~PINA) & 0xF;
}

/*Returns the number of CAN messages waiting*/
uint8_t inline CAN_msg_available(){
	return msgs_av;
    146c:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <msgs_av>
	if(receivedPacket == NULL){
		return 0x02;
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
    1470:	22 23       	and	r18, r18
    1472:	09 f4       	brne	.+2      	; 0x1476 <PollAndReceiveCANPacket+0x16>
    1474:	81 c0       	rjmp	.+258    	; 0x1578 <PollAndReceiveCANPacket+0x118>

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
    1476:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
    147a:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <rxed_mobs>
    147e:	20 fd       	sbrc	r18, 0
    1480:	25 c0       	rjmp	.+74     	; 0x14cc <PollAndReceiveCANPacket+0x6c>
    1482:	21 e0       	ldi	r18, 0x01	; 1
    1484:	30 e0       	ldi	r19, 0x00	; 0

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
    1486:	ad ee       	ldi	r26, 0xED	; 237
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	12 2f       	mov	r17, r18
    148c:	a9 01       	movw	r20, r18
    148e:	42 95       	swap	r20
    1490:	52 95       	swap	r21
    1492:	50 7f       	andi	r21, 0xF0	; 240
    1494:	54 27       	eor	r21, r20
    1496:	40 7f       	andi	r20, 0xF0	; 240
    1498:	54 27       	eor	r21, r20
    149a:	4c 93       	st	X, r20
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
    149c:	23 fb       	bst	r18, 3
    149e:	66 27       	eor	r22, r22
    14a0:	60 f9       	bld	r22, 0
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	fb 01       	movw	r30, r22
    14a6:	ef 5e       	subi	r30, 0xEF	; 239
    14a8:	fd 4f       	sbci	r31, 0xFD	; 253
    14aa:	40 81       	ld	r20, Z
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	e2 2f       	mov	r30, r18
    14b0:	e7 70       	andi	r30, 0x07	; 7
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <PollAndReceiveCANPacket+0x58>
    14b4:	55 95       	asr	r21
    14b6:	47 95       	ror	r20
    14b8:	ea 95       	dec	r30
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <PollAndReceiveCANPacket+0x54>
    14bc:	40 fd       	sbrc	r20, 0
    14be:	07 c0       	rjmp	.+14     	; 0x14ce <PollAndReceiveCANPacket+0x6e>
    14c0:	2f 5f       	subi	r18, 0xFF	; 255
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
	if(!CAN_msg_available()){
		return 0x01;
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
    14c4:	2f 30       	cpi	r18, 0x0F	; 15
    14c6:	31 05       	cpc	r19, r1
    14c8:	01 f7       	brne	.-64     	; 0x148a <PollAndReceiveCANPacket+0x2a>
    14ca:	59 c0       	rjmp	.+178    	; 0x157e <PollAndReceiveCANPacket+0x11e>
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
    14cc:	10 e0       	ldi	r17, 0x00	; 0
			break;
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
    14ce:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
    14d2:	2f 70       	andi	r18, 0x0F	; 15
    14d4:	fc 01       	movw	r30, r24
    14d6:	22 83       	std	Z+2, r18	; 0x02
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
    14d8:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    14dc:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    14e0:	32 95       	swap	r19
    14e2:	36 95       	lsr	r19
    14e4:	37 70       	andi	r19, 0x07	; 7
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	44 0f       	add	r20, r20
    14ea:	55 1f       	adc	r21, r21
    14ec:	44 0f       	add	r20, r20
    14ee:	55 1f       	adc	r21, r21
    14f0:	44 0f       	add	r20, r20
    14f2:	55 1f       	adc	r21, r21
    14f4:	43 2b       	or	r20, r19
    14f6:	51 83       	std	Z+1, r21	; 0x01
    14f8:	40 83       	st	Z, r20
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
    14fa:	22 23       	and	r18, r18
    14fc:	91 f0       	breq	.+36     	; 0x1522 <PollAndReceiveCANPacket+0xc2>
    14fe:	33 96       	adiw	r30, 0x03	; 3
    1500:	21 50       	subi	r18, 0x01	; 1
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	2c 5f       	subi	r18, 0xFC	; 252
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
    1508:	28 0f       	add	r18, r24
    150a:	39 1f       	adc	r19, r25
    150c:	0b 96       	adiw	r24, 0x0b	; 11
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
    150e:	aa ef       	ldi	r26, 0xFA	; 250
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	4c 91       	ld	r20, X
    1514:	41 93       	st	Z+, r20
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
    1516:	e2 17       	cp	r30, r18
    1518:	f3 07       	cpc	r31, r19
    151a:	19 f0       	breq	.+6      	; 0x1522 <PollAndReceiveCANPacket+0xc2>
    151c:	8e 17       	cp	r24, r30
    151e:	9f 07       	cpc	r25, r31
    1520:	c1 f7       	brne	.-16     	; 0x1512 <PollAndReceiveCANPacket+0xb2>
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
	}
	//Atomically decrement the number of messages available
	cli();
    1522:	f8 94       	cli
	msgs_av--;
    1524:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <msgs_av>
    1528:	81 50       	subi	r24, 0x01	; 1
    152a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <msgs_av>
	sei();
    152e:	78 94       	sei
	/*Reset the MOb*/
	set_mob_rx_filter(mob);
    1530:	81 2f       	mov	r24, r17
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 8c 09 	call	0x1318	; 0x1318 <set_mob_rx_filter>
	enable_mob_interrupt(mob);
    1538:	81 2f       	mov	r24, r17
    153a:	0e 94 04 09 	call	0x1208	; 0x1208 <enable_mob_interrupt>
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
    153e:	13 fb       	bst	r17, 3
    1540:	ff 27       	eor	r31, r31
    1542:	f0 f9       	bld	r31, 0
    1544:	cf 2f       	mov	r28, r31
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	d8 2f       	mov	r29, r24
    154a:	cf 5e       	subi	r28, 0xEF	; 239
    154c:	dd 4f       	sbci	r29, 0xFD	; 253
    154e:	28 81       	ld	r18, Y
    1550:	17 70       	andi	r17, 0x07	; 7
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <PollAndReceiveCANPacket+0xfc>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	1a 95       	dec	r17
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <PollAndReceiveCANPacket+0xf8>
    1560:	80 95       	com	r24
    1562:	82 23       	and	r24, r18
    1564:	88 83       	st	Y, r24
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
    1566:	80 e8       	ldi	r24, 0x80	; 128
    1568:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
	return 0;
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <PollAndReceiveCANPacket+0x122>
}

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
	if(receivedPacket == NULL){
		return 0x02;
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	05 c0       	rjmp	.+10     	; 0x1582 <PollAndReceiveCANPacket+0x122>
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
		return 0x01;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <PollAndReceiveCANPacket+0x122>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
	enable_mob_interrupt(mob);
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
	return 0;
    
}
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	08 95       	ret

0000158a <getLocalDeviceSerial>:
	CANGCON = (1 << ENASTB);
}

/*Returns the value of the binary representation of the dipswitch*/
uint8_t inline get_dip_switch(){
	return (~PINA) & 0xF;
    158a:	80 b1       	in	r24, 0x00	; 0
}

uint8_t getLocalDeviceSerial()
{
    /*Return the DIP switch value*/
    return get_dip_switch();
    158c:	80 95       	com	r24
}
    158e:	8f 70       	andi	r24, 0x0F	; 15
    1590:	08 95       	ret

00001592 <write_PWM>:
  uint8_t pin: The pin to set the PWM on (PE3, PE4, PE5)
  uint16_t pwm: 10-bit PWM value
*/
//void write_PWM(uint8_t port, uint8_t pin, uint16_t pwm){
void write_PWM(uint8_t pin, uint16_t pwm){
	pwm &= 1023;
    1592:	73 70       	andi	r23, 0x03	; 3
	switch(pin){
    1594:	84 30       	cpi	r24, 0x04	; 4
    1596:	71 f0       	breq	.+28     	; 0x15b4 <write_PWM+0x22>
    1598:	85 30       	cpi	r24, 0x05	; 5
    159a:	b1 f0       	breq	.+44     	; 0x15c8 <write_PWM+0x36>
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	e9 f4       	brne	.+58     	; 0x15da <write_PWM+0x48>
		case PE3:
			TCCR3A |= (1 << COM3A1);
    15a0:	e0 e9       	ldi	r30, 0x90	; 144
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	80 68       	ori	r24, 0x80	; 128
    15a8:	80 83       	st	Z, r24
			OCR3A = pwm;
    15aa:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
    15ae:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
			break;
    15b2:	08 95       	ret
		case PE4:
			TCCR3A |= (1 << COM3B1);
    15b4:	e0 e9       	ldi	r30, 0x90	; 144
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	80 62       	ori	r24, 0x20	; 32
    15bc:	80 83       	st	Z, r24
			OCR3B = pwm;
    15be:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7f809b>
    15c2:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7f809a>
			break;
    15c6:	08 95       	ret
		case PE5:
			TCCR3A |= (1 << COM3C1);
    15c8:	e0 e9       	ldi	r30, 0x90	; 144
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	88 60       	ori	r24, 0x08	; 8
    15d0:	80 83       	st	Z, r24
			OCR3C = pwm;
    15d2:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__TEXT_REGION_LENGTH__+0x7f809d>
    15d6:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x7f809c>
    15da:	08 95       	ret

000015dc <init_servo>:
#include <config.h>
#include <servo.h>

#ifdef REV_2
void init_servo(){
	DDRB |= 1<<6;
    15dc:	26 9a       	sbi	0x04, 6	; 4
	TCCR1A |= (1 << COM1B1);
    15de:	e0 e8       	ldi	r30, 0x80	; 128
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	80 62       	ori	r24, 0x20	; 32
    15e6:	80 83       	st	Z, r24
//	TCCR1A &= ~(1 << COM1B0);
	OCR1B = 375;
    15e8:	87 e7       	ldi	r24, 0x77	; 119
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    15f0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    15f4:	08 95       	ret

000015f6 <set_servo_position>:
}

void set_servo_position(int degrees){
    15f6:	84 3b       	cpi	r24, 0xB4	; 180
    15f8:	91 05       	cpc	r25, r1
    15fa:	14 f0       	brlt	.+4      	; 0x1600 <set_servo_position+0xa>
    15fc:	83 eb       	ldi	r24, 0xB3	; 179
    15fe:	90 e0       	ldi	r25, 0x00	; 0
	if(degrees > 179) degrees = 179;
	if(degrees < 1) degrees = 1;
    1600:	18 16       	cp	r1, r24
    1602:	19 06       	cpc	r1, r25
    1604:	14 f0       	brlt	.+4      	; 0x160a <set_servo_position+0x14>
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
	OCR1B = 250 + degrees + degrees / 3;
    160a:	9c 01       	movw	r18, r24
    160c:	26 50       	subi	r18, 0x06	; 6
    160e:	3f 4f       	sbci	r19, 0xFF	; 255
    1610:	63 e0       	ldi	r22, 0x03	; 3
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__divmodhi4>
    1618:	62 0f       	add	r22, r18
    161a:	73 1f       	adc	r23, r19
    161c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1620:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1624:	08 95       	ret

00001626 <servo_high>:
}

void servo_high(){}
    1626:	08 95       	ret

00001628 <__vector_15>:
	#ifdef REV_2
	return (TOF_Cnt * 20000) + (timer_ticks << 2);
	#else
	return (TOF_Cnt * 40000) + (timer_ticks << 2);
	#endif
}
    1628:	1f 92       	push	r1
    162a:	0f 92       	push	r0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	0f 92       	push	r0
    1630:	11 24       	eor	r1, r1
    1632:	2f 93       	push	r18
    1634:	3f 93       	push	r19
    1636:	4f 93       	push	r20
    1638:	5f 93       	push	r21
    163a:	6f 93       	push	r22
    163c:	7f 93       	push	r23
    163e:	8f 93       	push	r24
    1640:	9f 93       	push	r25
    1642:	af 93       	push	r26
    1644:	bf 93       	push	r27
    1646:	ef 93       	push	r30
    1648:	ff 93       	push	r31
    164a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <TOF_Cnt>
    164e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <TOF_Cnt+0x1>
    1652:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <TOF_Cnt+0x2>
    1656:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <TOF_Cnt+0x3>
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	a1 1d       	adc	r26, r1
    165e:	b1 1d       	adc	r27, r1
    1660:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <TOF_Cnt>
    1664:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <TOF_Cnt+0x1>
    1668:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <TOF_Cnt+0x2>
    166c:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <TOF_Cnt+0x3>
    1670:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <TOF_Cnt>
    1674:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <TOF_Cnt+0x1>
    1678:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <TOF_Cnt+0x2>
    167c:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <TOF_Cnt+0x3>
    1680:	83 70       	andi	r24, 0x03	; 3
    1682:	99 27       	eor	r25, r25
    1684:	aa 27       	eor	r26, r26
    1686:	bb 27       	eor	r27, r27
    1688:	89 2b       	or	r24, r25
    168a:	8a 2b       	or	r24, r26
    168c:	8b 2b       	or	r24, r27
    168e:	51 f4       	brne	.+20     	; 0x16a4 <__vector_15+0x7c>
    1690:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <TOF_Cnt>
    1694:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <TOF_Cnt+0x1>
    1698:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <TOF_Cnt+0x2>
    169c:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <TOF_Cnt+0x3>
    16a0:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <update_LEDS>
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <PID_due>
    16aa:	0e 94 13 0b 	call	0x1626	; 0x1626 <servo_high>
    16ae:	ff 91       	pop	r31
    16b0:	ef 91       	pop	r30
    16b2:	bf 91       	pop	r27
    16b4:	af 91       	pop	r26
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	7f 91       	pop	r23
    16bc:	6f 91       	pop	r22
    16be:	5f 91       	pop	r21
    16c0:	4f 91       	pop	r20
    16c2:	3f 91       	pop	r19
    16c4:	2f 91       	pop	r18
    16c6:	0f 90       	pop	r0
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	0f 90       	pop	r0
    16cc:	1f 90       	pop	r1
    16ce:	18 95       	reti

000016d0 <setup_timers>:
    16d0:	83 e4       	ldi	r24, 0x43	; 67
    16d2:	84 bd       	out	0x24, r24	; 36
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    16da:	9b e1       	ldi	r25, 0x1B	; 27
    16dc:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    16e0:	93 e0       	ldi	r25, 0x03	; 3
    16e2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    16e6:	20 e1       	ldi	r18, 0x10	; 16
    16e8:	37 e2       	ldi	r19, 0x27	; 39
    16ea:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    16ee:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    16f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    16f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    16fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    16fe:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1702:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    1706:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <TOF_Cnt>
    170a:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <TOF_Cnt+0x1>
    170e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <TOF_Cnt+0x2>
    1712:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <TOF_Cnt+0x3>
    1716:	08 95       	ret

00001718 <get_mS>:
    1718:	cf 92       	push	r12
    171a:	df 92       	push	r13
    171c:	ef 92       	push	r14
    171e:	ff 92       	push	r15
    1720:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1724:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1728:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <TOF_Cnt>
    172c:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <TOF_Cnt+0x1>
    1730:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <TOF_Cnt+0x2>
    1734:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <TOF_Cnt+0x3>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	aa 1f       	adc	r26, r26
    173e:	bb 1f       	adc	r27, r27
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	aa 1f       	adc	r26, r26
    1746:	bb 1f       	adc	r27, r27
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	aa 1f       	adc	r26, r26
    174e:	bb 1f       	adc	r27, r27
    1750:	6c 01       	movw	r12, r24
    1752:	7d 01       	movw	r14, r26
    1754:	cc 0c       	add	r12, r12
    1756:	dd 1c       	adc	r13, r13
    1758:	ee 1c       	adc	r14, r14
    175a:	ff 1c       	adc	r15, r15
    175c:	cc 0c       	add	r12, r12
    175e:	dd 1c       	adc	r13, r13
    1760:	ee 1c       	adc	r14, r14
    1762:	ff 1c       	adc	r15, r15
    1764:	c8 0e       	add	r12, r24
    1766:	d9 1e       	adc	r13, r25
    1768:	ea 1e       	adc	r14, r26
    176a:	fb 1e       	adc	r15, r27
    176c:	36 95       	lsr	r19
    176e:	27 95       	ror	r18
    1770:	a3 e1       	ldi	r26, 0x13	; 19
    1772:	b3 e8       	ldi	r27, 0x83	; 131
    1774:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__umulhisi3>
    1778:	00 24       	eor	r0, r0
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	00 1c       	adc	r0, r0
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	00 1c       	adc	r0, r0
    1786:	89 2f       	mov	r24, r25
    1788:	90 2d       	mov	r25, r0
    178a:	a7 01       	movw	r20, r14
    178c:	96 01       	movw	r18, r12
    178e:	28 0f       	add	r18, r24
    1790:	39 1f       	adc	r19, r25
    1792:	41 1d       	adc	r20, r1
    1794:	51 1d       	adc	r21, r1
    1796:	ca 01       	movw	r24, r20
    1798:	b9 01       	movw	r22, r18
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	08 95       	ret

000017a4 <delay_mS>:

/*delay for the specified number of milliseconds*/
void delay_mS(uint16_t mS){
    17a4:	8f 92       	push	r8
    17a6:	9f 92       	push	r9
    17a8:	af 92       	push	r10
    17aa:	bf 92       	push	r11
    17ac:	cf 92       	push	r12
    17ae:	df 92       	push	r13
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	6c 01       	movw	r12, r24
	uint32_t start = get_mS();
    17b6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <get_mS>
    17ba:	4b 01       	movw	r8, r22
    17bc:	5c 01       	movw	r10, r24
	while(get_mS() - start < mS);
    17be:	e1 2c       	mov	r14, r1
    17c0:	f1 2c       	mov	r15, r1
    17c2:	0e 94 8c 0b 	call	0x1718	; 0x1718 <get_mS>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	88 19       	sub	r24, r8
    17cc:	99 09       	sbc	r25, r9
    17ce:	aa 09       	sbc	r26, r10
    17d0:	bb 09       	sbc	r27, r11
    17d2:	8c 15       	cp	r24, r12
    17d4:	9d 05       	cpc	r25, r13
    17d6:	ae 05       	cpc	r26, r14
    17d8:	bf 05       	cpc	r27, r15
    17da:	98 f3       	brcs	.-26     	; 0x17c2 <delay_mS+0x1e>
    17dc:	ff 90       	pop	r15
    17de:	ef 90       	pop	r14
    17e0:	df 90       	pop	r13
    17e2:	cf 90       	pop	r12
    17e4:	bf 90       	pop	r11
    17e6:	af 90       	pop	r10
    17e8:	9f 90       	pop	r9
    17ea:	8f 90       	pop	r8
    17ec:	08 95       	ret

000017ee <__vector_32>:
}

/*Returns the number of bytes waiting in the USART receive buffer*/
int usart_available(){
	return rxbp;
}
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	8f 93       	push	r24
    17fa:	ef 93       	push	r30
    17fc:	ff 93       	push	r31
    17fe:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <rxbp>
    1802:	81 31       	cpi	r24, 0x11	; 17
    1804:	20 f0       	brcs	.+8      	; 0x180e <__vector_32+0x20>
    1806:	80 e1       	ldi	r24, 0x10	; 16
    1808:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <rxbp>
    180c:	0c c0       	rjmp	.+24     	; 0x1826 <__vector_32+0x38>
    180e:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <rxbp>
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	8e 0f       	add	r24, r30
    1816:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <rxbp>
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    1820:	e4 5d       	subi	r30, 0xD4	; 212
    1822:	fd 4f       	sbci	r31, 0xFD	; 253
    1824:	80 83       	st	Z, r24
    1826:	ff 91       	pop	r31
    1828:	ef 91       	pop	r30
    182a:	8f 91       	pop	r24
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	0f 90       	pop	r0
    1832:	1f 90       	pop	r1
    1834:	18 95       	reti

00001836 <__vector_33>:
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
    1848:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <txbp>
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	8e 0f       	add	r24, r30
    1850:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <txbp>
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	e6 5e       	subi	r30, 0xE6	; 230
    1858:	fd 4f       	sbci	r31, 0xFD	; 253
    185a:	80 81       	ld	r24, Z
    185c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    1860:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <txbp>
    1864:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <txend>
    1868:	98 17       	cp	r25, r24
    186a:	20 f4       	brcc	.+8      	; 0x1874 <__vector_33+0x3e>
    186c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <txbp>
    1870:	81 31       	cpi	r24, 0x11	; 17
    1872:	48 f0       	brcs	.+18     	; 0x1886 <__vector_33+0x50>
    1874:	e9 ec       	ldi	r30, 0xC9	; 201
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	8f 7d       	andi	r24, 0xDF	; 223
    187c:	80 83       	st	Z, r24
    187e:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <txend>
    1882:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <txbp>
    1886:	ff 91       	pop	r31
    1888:	ef 91       	pop	r30
    188a:	9f 91       	pop	r25
    188c:	8f 91       	pop	r24
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0f 90       	pop	r0
    1894:	1f 90       	pop	r1
    1896:	18 95       	reti

00001898 <usart_write>:
    1898:	af 92       	push	r10
    189a:	bf 92       	push	r11
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	1f 92       	push	r1
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	5c 01       	movw	r10, r24
    18b2:	16 2f       	mov	r17, r22
    18b4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <txend>
    18b8:	88 23       	and	r24, r24
    18ba:	29 f0       	breq	.+10     	; 0x18c6 <usart_write+0x2e>
    18bc:	e9 ec       	ldi	r30, 0xC9	; 201
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	80 62       	ori	r24, 0x20	; 32
    18c4:	80 83       	st	Z, r24
    18c6:	11 23       	and	r17, r17
    18c8:	a9 f1       	breq	.+106    	; 0x1934 <usart_write+0x9c>
    18ca:	68 94       	set
    18cc:	cc 24       	eor	r12, r12
    18ce:	c4 f8       	bld	r12, 4
    18d0:	d1 2c       	mov	r13, r1
    18d2:	0f 2e       	mov	r0, r31
    18d4:	f9 ec       	ldi	r31, 0xC9	; 201
    18d6:	ef 2e       	mov	r14, r31
    18d8:	f1 2c       	mov	r15, r1
    18da:	f0 2d       	mov	r31, r0
    18dc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <txend>
    18e0:	8f 30       	cpi	r24, 0x0F	; 15
    18e2:	e0 f7       	brcc	.-8      	; 0x18dc <usart_write+0x44>
    18e4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <txend>
    18e8:	21 2f       	mov	r18, r17
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	b6 01       	movw	r22, r12
    18f2:	68 1b       	sub	r22, r24
    18f4:	71 09       	sbc	r23, r1
    18f6:	07 2e       	mov	r0, r23
    18f8:	00 0c       	add	r0, r0
    18fa:	88 0b       	sbc	r24, r24
    18fc:	99 0b       	sbc	r25, r25
    18fe:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <min>
    1902:	69 83       	std	Y+1, r22	; 0x01
    1904:	49 81       	ldd	r20, Y+1	; 0x01
    1906:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <txend>
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	b5 01       	movw	r22, r10
    1910:	86 5e       	subi	r24, 0xE6	; 230
    1912:	9d 4f       	sbci	r25, 0xFD	; 253
    1914:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <memcpy>
    1918:	99 81       	ldd	r25, Y+1	; 0x01
    191a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <txend>
    191e:	89 0f       	add	r24, r25
    1920:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <txend>
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	18 1b       	sub	r17, r24
    1928:	f7 01       	movw	r30, r14
    192a:	80 81       	ld	r24, Z
    192c:	80 62       	ori	r24, 0x20	; 32
    192e:	80 83       	st	Z, r24
    1930:	11 11       	cpse	r17, r1
    1932:	d4 cf       	rjmp	.-88     	; 0x18dc <usart_write+0x44>
    1934:	0f 90       	pop	r0
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	df 90       	pop	r13
    1942:	cf 90       	pop	r12
    1944:	bf 90       	pop	r11
    1946:	af 90       	pop	r10
    1948:	08 95       	ret

0000194a <usart_init>:
    194a:	9b 01       	movw	r18, r22
    194c:	ac 01       	movw	r20, r24
    194e:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <rxbp>
    1952:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <txend>
    1956:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <txbp>
    195a:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
    195e:	60 e4       	ldi	r22, 0x40	; 64
    1960:	72 e4       	ldi	r23, 0x42	; 66
    1962:	8f e0       	ldi	r24, 0x0F	; 15
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__udivmodsi4>
    196a:	21 50       	subi	r18, 0x01	; 1
    196c:	31 09       	sbc	r19, r1
    196e:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
    1972:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
    1976:	86 e0       	ldi	r24, 0x06	; 6
    1978:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
    197c:	88 e9       	ldi	r24, 0x98	; 152
    197e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
    1982:	08 95       	ret

00001984 <usart_write_char>:
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	1f 92       	push	r1
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	8a 30       	cpi	r24, 0x0A	; 10
    1992:	19 f4       	brne	.+6      	; 0x199a <usart_write_char+0x16>
    1994:	8d e0       	ldi	r24, 0x0D	; 13
    1996:	0e 94 c2 0c 	call	0x1984	; 0x1984 <usart_write_char>
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	ce 01       	movw	r24, r28
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <usart_write>
    19a4:	0f 90       	pop	r0
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <usart_write_string>:
    19ac:	fc 01       	movw	r30, r24
    19ae:	01 90       	ld	r0, Z+
    19b0:	00 20       	and	r0, r0
    19b2:	e9 f7       	brne	.-6      	; 0x19ae <usart_write_string+0x2>
    19b4:	31 97       	sbiw	r30, 0x01	; 1
    19b6:	bf 01       	movw	r22, r30
    19b8:	68 1b       	sub	r22, r24
    19ba:	79 0b       	sbc	r23, r25
    19bc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <usart_write>
    19c0:	08 95       	ret

000019c2 <tprintf>:

/*Tiny implementation of prinf()*/
void tprintf(const char *fmt, ...){
    19c2:	2f 92       	push	r2
    19c4:	3f 92       	push	r3
    19c6:	4f 92       	push	r4
    19c8:	5f 92       	push	r5
    19ca:	6f 92       	push	r6
    19cc:	7f 92       	push	r7
    19ce:	8f 92       	push	r8
    19d0:	9f 92       	push	r9
    19d2:	af 92       	push	r10
    19d4:	bf 92       	push	r11
    19d6:	cf 92       	push	r12
    19d8:	df 92       	push	r13
    19da:	ef 92       	push	r14
    19dc:	ff 92       	push	r15
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	2b 97       	sbiw	r28, 0x0b	; 11
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	fe 01       	movw	r30, r28
    19f8:	b0 96       	adiw	r30, 0x20	; 32
    19fa:	e1 90       	ld	r14, Z+
    19fc:	f1 90       	ld	r15, Z+
	va_list va;
	va_start(va, fmt);
    19fe:	6f 01       	movw	r12, r30
	int i = 0;
	int32_t l;
	char buf[9],c;
	for(i = 0;c=fmt[i];i++){
    1a00:	f7 01       	movw	r30, r14
    1a02:	b0 80       	ld	r11, Z
    1a04:	bb 20       	and	r11, r11
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <tprintf+0x48>
    1a08:	d2 c0       	rjmp	.+420    	; 0x1bae <tprintf+0x1ec>
    1a0a:	00 e0       	ldi	r16, 0x00	; 0
    1a0c:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1a0e:	0f 2e       	mov	r0, r31
    1a10:	f0 e1       	ldi	r31, 0x10	; 16
    1a12:	4f 2e       	mov	r4, r31
    1a14:	f7 e2       	ldi	r31, 0x27	; 39
    1a16:	5f 2e       	mov	r5, r31
    1a18:	61 2c       	mov	r6, r1
    1a1a:	71 2c       	mov	r7, r1
    1a1c:	f0 2d       	mov	r31, r0
		if(c != '%'){
    1a1e:	f5 e2       	ldi	r31, 0x25	; 37
    1a20:	bf 16       	cp	r11, r31
    1a22:	d1 f0       	breq	.+52     	; 0x1a58 <tprintf+0x96>
			usart_write_char(c);
    1a24:	8b 2d       	mov	r24, r11
    1a26:	0e 94 c2 0c 	call	0x1984	; 0x1984 <usart_write_char>
		}
	if(c == '\\'){
    1a2a:	2c e5       	ldi	r18, 0x5C	; 92
    1a2c:	b2 12       	cpse	r11, r18
    1a2e:	b7 c0       	rjmp	.+366    	; 0x1b9e <tprintf+0x1dc>
		c = fmt[++i];
    1a30:	0f 5f       	subi	r16, 0xFF	; 255
    1a32:	1f 4f       	sbci	r17, 0xFF	; 255
    1a34:	f7 01       	movw	r30, r14
    1a36:	e0 0f       	add	r30, r16
    1a38:	f1 1f       	adc	r31, r17
    1a3a:	80 81       	ld	r24, Z
		switch(c){
    1a3c:	8a 30       	cpi	r24, 0x0A	; 10
    1a3e:	29 f0       	breq	.+10     	; 0x1a4a <tprintf+0x88>
    1a40:	8c 35       	cpi	r24, 0x5C	; 92
    1a42:	39 f4       	brne	.+14     	; 0x1a52 <tprintf+0x90>
			case '\\':
				usart_write_char('\\');
    1a44:	0e 94 c2 0c 	call	0x1984	; 0x1984 <usart_write_char>
				break;
    1a48:	aa c0       	rjmp	.+340    	; 0x1b9e <tprintf+0x1dc>
			case '\n':
				usart_write_char('\n');
    1a4a:	8a e0       	ldi	r24, 0x0A	; 10
    1a4c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <usart_write_char>
				break;
    1a50:	a6 c0       	rjmp	.+332    	; 0x1b9e <tprintf+0x1dc>
		}
	}
	if(c == '%'){
    1a52:	85 32       	cpi	r24, 0x25	; 37
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <tprintf+0x96>
    1a56:	a3 c0       	rjmp	.+326    	; 0x1b9e <tprintf+0x1dc>
		c=fmt[++i];
    1a58:	0f 5f       	subi	r16, 0xFF	; 255
    1a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5c:	f7 01       	movw	r30, r14
    1a5e:	e0 0f       	add	r30, r16
    1a60:	f1 1f       	adc	r31, r17
		switch(c){
    1a62:	80 81       	ld	r24, Z
    1a64:	84 36       	cpi	r24, 0x64	; 100
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <tprintf+0xa8>
    1a68:	75 c0       	rjmp	.+234    	; 0x1b54 <tprintf+0x192>
    1a6a:	38 f4       	brcc	.+14     	; 0x1a7a <tprintf+0xb8>
    1a6c:	88 35       	cpi	r24, 0x58	; 88
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <tprintf+0xb0>
    1a70:	5e c0       	rjmp	.+188    	; 0x1b2e <tprintf+0x16c>
    1a72:	83 36       	cpi	r24, 0x63	; 99
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <tprintf+0xb6>
    1a76:	88 c0       	rjmp	.+272    	; 0x1b88 <tprintf+0x1c6>
    1a78:	8f c0       	rjmp	.+286    	; 0x1b98 <tprintf+0x1d6>
    1a7a:	8c 36       	cpi	r24, 0x6C	; 108
    1a7c:	21 f0       	breq	.+8      	; 0x1a86 <tprintf+0xc4>
    1a7e:	83 37       	cpi	r24, 0x73	; 115
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <tprintf+0xc2>
    1a82:	79 c0       	rjmp	.+242    	; 0x1b76 <tprintf+0x1b4>
    1a84:	89 c0       	rjmp	.+274    	; 0x1b98 <tprintf+0x1d6>
			case 'l':
				l = va_arg(va, int32_t);
    1a86:	c6 01       	movw	r24, r12
    1a88:	04 96       	adiw	r24, 0x04	; 4
    1a8a:	9b 87       	std	Y+11, r25	; 0x0b
    1a8c:	8a 87       	std	Y+10, r24	; 0x0a
    1a8e:	f6 01       	movw	r30, r12
    1a90:	80 80       	ld	r8, Z
    1a92:	91 80       	ldd	r9, Z+1	; 0x01
    1a94:	a2 80       	ldd	r10, Z+2	; 0x02
    1a96:	b3 80       	ldd	r11, Z+3	; 0x03
				if(l > 32767){
    1a98:	81 14       	cp	r8, r1
    1a9a:	f0 e8       	ldi	r31, 0x80	; 128
    1a9c:	9f 06       	cpc	r9, r31
    1a9e:	a1 04       	cpc	r10, r1
    1aa0:	b1 04       	cpc	r11, r1
    1aa2:	bc f1       	brlt	.+110    	; 0x1b12 <tprintf+0x150>
    1aa4:	c5 01       	movw	r24, r10
    1aa6:	b4 01       	movw	r22, r8
    1aa8:	a3 01       	movw	r20, r6
    1aaa:	92 01       	movw	r18, r4
    1aac:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divmodsi4>
    1ab0:	49 01       	movw	r8, r18
    1ab2:	5a 01       	movw	r10, r20
    1ab4:	c6 2e       	mov	r12, r22
    1ab6:	d7 2e       	mov	r13, r23
    1ab8:	28 2e       	mov	r2, r24
    1aba:	39 2e       	mov	r3, r25
    1abc:	4a e0       	ldi	r20, 0x0A	; 10
    1abe:	be 01       	movw	r22, r28
    1ac0:	6f 5f       	subi	r22, 0xFF	; 255
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	c4 01       	movw	r24, r8
    1ac6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__itoa_ncheck>
					itoa(l/10000, buf, 10);
					usart_write_string(buf);
    1aca:	ce 01       	movw	r24, r28
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <usart_write_string>
					l %= 10000;
    1ad2:	8c 2c       	mov	r8, r12
    1ad4:	9d 2c       	mov	r9, r13
    1ad6:	a2 2c       	mov	r10, r2
    1ad8:	b3 2c       	mov	r11, r3
					if(l < 1000){
    1ada:	28 ee       	ldi	r18, 0xE8	; 232
    1adc:	82 16       	cp	r8, r18
    1ade:	23 e0       	ldi	r18, 0x03	; 3
    1ae0:	92 06       	cpc	r9, r18
    1ae2:	a1 04       	cpc	r10, r1
    1ae4:	b1 04       	cpc	r11, r1
    1ae6:	1c f4       	brge	.+6      	; 0x1aee <tprintf+0x12c>
						usart_write_char('0');
    1ae8:	80 e3       	ldi	r24, 0x30	; 48
    1aea:	0e 94 c2 0c 	call	0x1984	; 0x1984 <usart_write_char>
					}
					if(l < 100){
    1aee:	84 e6       	ldi	r24, 0x64	; 100
    1af0:	88 16       	cp	r8, r24
    1af2:	91 04       	cpc	r9, r1
    1af4:	a1 04       	cpc	r10, r1
    1af6:	b1 04       	cpc	r11, r1
    1af8:	1c f4       	brge	.+6      	; 0x1b00 <tprintf+0x13e>
						usart_write_char('0');
    1afa:	80 e3       	ldi	r24, 0x30	; 48
    1afc:	0e 94 c2 0c 	call	0x1984	; 0x1984 <usart_write_char>
					}
					if(l < 10){
    1b00:	9a e0       	ldi	r25, 0x0A	; 10
    1b02:	89 16       	cp	r8, r25
    1b04:	91 04       	cpc	r9, r1
    1b06:	a1 04       	cpc	r10, r1
    1b08:	b1 04       	cpc	r11, r1
    1b0a:	1c f4       	brge	.+6      	; 0x1b12 <tprintf+0x150>
						usart_write_char('0');
    1b0c:	80 e3       	ldi	r24, 0x30	; 48
    1b0e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <usart_write_char>
    1b12:	4a e0       	ldi	r20, 0x0A	; 10
    1b14:	be 01       	movw	r22, r28
    1b16:	6f 5f       	subi	r22, 0xFF	; 255
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	c4 01       	movw	r24, r8
    1b1c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__itoa_ncheck>
					}
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
    1b20:	ce 01       	movw	r24, r28
    1b22:	01 96       	adiw	r24, 0x01	; 1
    1b24:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <usart_write_string>
	}
	if(c == '%'){
		c=fmt[++i];
		switch(c){
			case 'l':
				l = va_arg(va, int32_t);
    1b28:	ca 84       	ldd	r12, Y+10	; 0x0a
    1b2a:	db 84       	ldd	r13, Y+11	; 0x0b
						usart_write_char('0');
					}
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
				break;
    1b2c:	38 c0       	rjmp	.+112    	; 0x1b9e <tprintf+0x1dc>
			case 'X':
				itoa(va_arg(va, int32_t), buf, 16);
    1b2e:	56 01       	movw	r10, r12
    1b30:	e4 e0       	ldi	r30, 0x04	; 4
    1b32:	ae 0e       	add	r10, r30
    1b34:	b1 1c       	adc	r11, r1
    1b36:	40 e1       	ldi	r20, 0x10	; 16
    1b38:	be 01       	movw	r22, r28
    1b3a:	6f 5f       	subi	r22, 0xFF	; 255
    1b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3e:	f6 01       	movw	r30, r12
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__itoa_ncheck>
				usart_write_string(buf);
    1b48:	ce 01       	movw	r24, r28
    1b4a:	01 96       	adiw	r24, 0x01	; 1
    1b4c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <usart_write_string>
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
				break;
			case 'X':
				itoa(va_arg(va, int32_t), buf, 16);
    1b50:	65 01       	movw	r12, r10
				usart_write_string(buf);
				break;
    1b52:	25 c0       	rjmp	.+74     	; 0x1b9e <tprintf+0x1dc>
			case 'd':
				itoa(va_arg(va, int), buf, 10);
    1b54:	f6 01       	movw	r30, r12
    1b56:	4a e0       	ldi	r20, 0x0A	; 10
    1b58:	be 01       	movw	r22, r28
    1b5a:	6f 5f       	subi	r22, 0xFF	; 255
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	f2 e0       	ldi	r31, 0x02	; 2
    1b64:	cf 0e       	add	r12, r31
    1b66:	d1 1c       	adc	r13, r1
    1b68:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__itoa_ncheck>
				usart_write_string(buf);
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <usart_write_string>
				break;
    1b74:	14 c0       	rjmp	.+40     	; 0x1b9e <tprintf+0x1dc>
			case 's':
				usart_write_string(va_arg(va, char*));
    1b76:	f6 01       	movw	r30, r12
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	22 e0       	ldi	r18, 0x02	; 2
    1b7e:	c2 0e       	add	r12, r18
    1b80:	d1 1c       	adc	r13, r1
    1b82:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <usart_write_string>
				break;
    1b86:	0b c0       	rjmp	.+22     	; 0x1b9e <tprintf+0x1dc>
			case 'c':
				usart_write_char(va_arg(va, int));
    1b88:	f6 01       	movw	r30, r12
    1b8a:	80 81       	ld	r24, Z
    1b8c:	92 e0       	ldi	r25, 0x02	; 2
    1b8e:	c9 0e       	add	r12, r25
    1b90:	d1 1c       	adc	r13, r1
    1b92:	0e 94 c2 0c 	call	0x1984	; 0x1984 <usart_write_char>
				break;
    1b96:	03 c0       	rjmp	.+6      	; 0x1b9e <tprintf+0x1dc>
			default:
				usart_write_char('?');
    1b98:	8f e3       	ldi	r24, 0x3F	; 63
    1b9a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <usart_write_char>
	va_list va;
	va_start(va, fmt);
	int i = 0;
	int32_t l;
	char buf[9],c;
	for(i = 0;c=fmt[i];i++){
    1b9e:	0f 5f       	subi	r16, 0xFF	; 255
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	f7 01       	movw	r30, r14
    1ba4:	e0 0f       	add	r30, r16
    1ba6:	f1 1f       	adc	r31, r17
    1ba8:	b0 80       	ld	r11, Z
    1baa:	b1 10       	cpse	r11, r1
    1bac:	38 cf       	rjmp	.-400    	; 0x1a1e <tprintf+0x5c>
				usart_write_char('?');
				break;
			}
		}
	}
    1bae:	2b 96       	adiw	r28, 0x0b	; 11
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	9f 90       	pop	r9
    1bd0:	8f 90       	pop	r8
    1bd2:	7f 90       	pop	r7
    1bd4:	6f 90       	pop	r6
    1bd6:	5f 90       	pop	r5
    1bd8:	4f 90       	pop	r4
    1bda:	3f 90       	pop	r3
    1bdc:	2f 90       	pop	r2
    1bde:	08 95       	ret

00001be0 <min>:
Returns:
the number of encoder ticks
*/
int16_t deg_to_ticks(int16_t d){
	return ((int32_t)d * (int32_t)ticks_per_degree_x10) / 10L;
}
    1be0:	62 17       	cp	r22, r18
    1be2:	73 07       	cpc	r23, r19
    1be4:	84 07       	cpc	r24, r20
    1be6:	95 07       	cpc	r25, r21
    1be8:	14 f4       	brge	.+4      	; 0x1bee <min+0xe>
    1bea:	9b 01       	movw	r18, r22
    1bec:	ac 01       	movw	r20, r24
    1bee:	ca 01       	movw	r24, r20
    1bf0:	b9 01       	movw	r22, r18
    1bf2:	08 95       	ret

00001bf4 <set_LED>:
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	f8 f4       	brcc	.+62     	; 0x1c36 <set_LED+0x42>
    1bf8:	64 30       	cpi	r22, 0x04	; 4
    1bfa:	e8 f4       	brcc	.+58     	; 0x1c36 <set_LED+0x42>
    1bfc:	9f ef       	ldi	r25, 0xFF	; 255
    1bfe:	96 0f       	add	r25, r22
    1c00:	92 30       	cpi	r25, 0x02	; 2
    1c02:	18 f4       	brcc	.+6      	; 0x1c0a <set_LED+0x16>
    1c04:	93 e0       	ldi	r25, 0x03	; 3
    1c06:	96 1b       	sub	r25, r22
    1c08:	69 2f       	mov	r22, r25
    1c0a:	88 0f       	add	r24, r24
    1c0c:	23 e0       	ldi	r18, 0x03	; 3
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	08 2e       	mov	r0, r24
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <set_LED+0x24>
    1c14:	22 0f       	add	r18, r18
    1c16:	33 1f       	adc	r19, r19
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <set_LED+0x20>
    1c1c:	20 95       	com	r18
    1c1e:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <LED_states>
    1c22:	29 23       	and	r18, r25
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <set_LED+0x38>
    1c28:	66 0f       	add	r22, r22
    1c2a:	77 1f       	adc	r23, r23
    1c2c:	8a 95       	dec	r24
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <set_LED+0x34>
    1c30:	62 2b       	or	r22, r18
    1c32:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <LED_states>
    1c36:	08 95       	ret

00001c38 <int_abs>:
    1c38:	99 23       	and	r25, r25
    1c3a:	1c f4       	brge	.+6      	; 0x1c42 <int_abs+0xa>
    1c3c:	91 95       	neg	r25
    1c3e:	81 95       	neg	r24
    1c40:	91 09       	sbc	r25, r1
    1c42:	08 95       	ret

00001c44 <update_LEDS>:
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	8c 01       	movw	r16, r24
    1c52:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <LED_states>
    1c56:	91 11       	cpse	r25, r1
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <update_LEDS+0x1a>
    1c5a:	12 b8       	out	0x02, r1	; 2
    1c5c:	3d c0       	rjmp	.+122    	; 0x1cd8 <update_LEDS+0x94>
    1c5e:	16 95       	lsr	r17
    1c60:	07 95       	ror	r16
    1c62:	e4 e0       	ldi	r30, 0x04	; 4
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	c0 e0       	ldi	r28, 0x00	; 0
    1c68:	d0 e0       	ldi	r29, 0x00	; 0
    1c6a:	ee 24       	eor	r14, r14
    1c6c:	e3 94       	inc	r14
    1c6e:	f1 2c       	mov	r15, r1
    1c70:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <LED_states>
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	0c 2e       	mov	r0, r28
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <update_LEDS+0x3a>
    1c7a:	35 95       	asr	r19
    1c7c:	27 95       	ror	r18
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <update_LEDS+0x36>
    1c82:	23 70       	andi	r18, 0x03	; 3
    1c84:	69 f0       	breq	.+26     	; 0x1ca0 <update_LEDS+0x5c>
    1c86:	62 2f       	mov	r22, r18
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	66 0f       	add	r22, r22
    1c8c:	77 1f       	adc	r23, r23
    1c8e:	6f 5f       	subi	r22, 0xFF	; 255
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255
    1c92:	c8 01       	movw	r24, r16
    1c94:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__udivmodhi4>
    1c98:	89 2b       	or	r24, r25
    1c9a:	79 f0       	breq	.+30     	; 0x1cba <update_LEDS+0x76>
    1c9c:	23 30       	cpi	r18, 0x03	; 3
    1c9e:	69 f0       	breq	.+26     	; 0x1cba <update_LEDS+0x76>
    1ca0:	92 b1       	in	r25, 0x02	; 2
    1ca2:	97 01       	movw	r18, r14
    1ca4:	0e 2e       	mov	r0, r30
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <update_LEDS+0x68>
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	0a 94       	dec	r0
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <update_LEDS+0x64>
    1cb0:	82 2f       	mov	r24, r18
    1cb2:	80 95       	com	r24
    1cb4:	89 23       	and	r24, r25
    1cb6:	82 b9       	out	0x02, r24	; 2
    1cb8:	0a c0       	rjmp	.+20     	; 0x1cce <update_LEDS+0x8a>
    1cba:	22 b1       	in	r18, 0x02	; 2
    1cbc:	c7 01       	movw	r24, r14
    1cbe:	0e 2e       	mov	r0, r30
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <update_LEDS+0x82>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <update_LEDS+0x7e>
    1cca:	82 2b       	or	r24, r18
    1ccc:	82 b9       	out	0x02, r24	; 2
    1cce:	22 96       	adiw	r28, 0x02	; 2
    1cd0:	31 96       	adiw	r30, 0x01	; 1
    1cd2:	e8 30       	cpi	r30, 0x08	; 8
    1cd4:	f1 05       	cpc	r31, r1
    1cd6:	61 f6       	brne	.-104    	; 0x1c70 <update_LEDS+0x2c>
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	ff 90       	pop	r15
    1ce2:	ef 90       	pop	r14
    1ce4:	08 95       	ret

00001ce6 <set_ticks_per_10degrees>:
/*Sets a new ratio of ticks to degrees.
Parameters:
uint16_t tpd: the number of encoder ticks in 10 degrees of rotation
*/
void set_ticks_per_10degrees(uint16_t tpd){
	ticks_per_degree_x10 = tpd;
    1ce6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1cea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    1cee:	08 95       	ret

00001cf0 <__udivmodhi4>:
    1cf0:	aa 1b       	sub	r26, r26
    1cf2:	bb 1b       	sub	r27, r27
    1cf4:	51 e1       	ldi	r21, 0x11	; 17
    1cf6:	07 c0       	rjmp	.+14     	; 0x1d06 <__udivmodhi4_ep>

00001cf8 <__udivmodhi4_loop>:
    1cf8:	aa 1f       	adc	r26, r26
    1cfa:	bb 1f       	adc	r27, r27
    1cfc:	a6 17       	cp	r26, r22
    1cfe:	b7 07       	cpc	r27, r23
    1d00:	10 f0       	brcs	.+4      	; 0x1d06 <__udivmodhi4_ep>
    1d02:	a6 1b       	sub	r26, r22
    1d04:	b7 0b       	sbc	r27, r23

00001d06 <__udivmodhi4_ep>:
    1d06:	88 1f       	adc	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	5a 95       	dec	r21
    1d0c:	a9 f7       	brne	.-22     	; 0x1cf8 <__udivmodhi4_loop>
    1d0e:	80 95       	com	r24
    1d10:	90 95       	com	r25
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	08 95       	ret

00001d18 <__divmodhi4>:
    1d18:	97 fb       	bst	r25, 7
    1d1a:	07 2e       	mov	r0, r23
    1d1c:	16 f4       	brtc	.+4      	; 0x1d22 <__divmodhi4+0xa>
    1d1e:	00 94       	com	r0
    1d20:	07 d0       	rcall	.+14     	; 0x1d30 <__divmodhi4_neg1>
    1d22:	77 fd       	sbrc	r23, 7
    1d24:	09 d0       	rcall	.+18     	; 0x1d38 <__divmodhi4_neg2>
    1d26:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__udivmodhi4>
    1d2a:	07 fc       	sbrc	r0, 7
    1d2c:	05 d0       	rcall	.+10     	; 0x1d38 <__divmodhi4_neg2>
    1d2e:	3e f4       	brtc	.+14     	; 0x1d3e <__divmodhi4_exit>

00001d30 <__divmodhi4_neg1>:
    1d30:	90 95       	com	r25
    1d32:	81 95       	neg	r24
    1d34:	9f 4f       	sbci	r25, 0xFF	; 255
    1d36:	08 95       	ret

00001d38 <__divmodhi4_neg2>:
    1d38:	70 95       	com	r23
    1d3a:	61 95       	neg	r22
    1d3c:	7f 4f       	sbci	r23, 0xFF	; 255

00001d3e <__divmodhi4_exit>:
    1d3e:	08 95       	ret

00001d40 <__udivmodsi4>:
    1d40:	a1 e2       	ldi	r26, 0x21	; 33
    1d42:	1a 2e       	mov	r1, r26
    1d44:	aa 1b       	sub	r26, r26
    1d46:	bb 1b       	sub	r27, r27
    1d48:	fd 01       	movw	r30, r26
    1d4a:	0d c0       	rjmp	.+26     	; 0x1d66 <__udivmodsi4_ep>

00001d4c <__udivmodsi4_loop>:
    1d4c:	aa 1f       	adc	r26, r26
    1d4e:	bb 1f       	adc	r27, r27
    1d50:	ee 1f       	adc	r30, r30
    1d52:	ff 1f       	adc	r31, r31
    1d54:	a2 17       	cp	r26, r18
    1d56:	b3 07       	cpc	r27, r19
    1d58:	e4 07       	cpc	r30, r20
    1d5a:	f5 07       	cpc	r31, r21
    1d5c:	20 f0       	brcs	.+8      	; 0x1d66 <__udivmodsi4_ep>
    1d5e:	a2 1b       	sub	r26, r18
    1d60:	b3 0b       	sbc	r27, r19
    1d62:	e4 0b       	sbc	r30, r20
    1d64:	f5 0b       	sbc	r31, r21

00001d66 <__udivmodsi4_ep>:
    1d66:	66 1f       	adc	r22, r22
    1d68:	77 1f       	adc	r23, r23
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	1a 94       	dec	r1
    1d70:	69 f7       	brne	.-38     	; 0x1d4c <__udivmodsi4_loop>
    1d72:	60 95       	com	r22
    1d74:	70 95       	com	r23
    1d76:	80 95       	com	r24
    1d78:	90 95       	com	r25
    1d7a:	9b 01       	movw	r18, r22
    1d7c:	ac 01       	movw	r20, r24
    1d7e:	bd 01       	movw	r22, r26
    1d80:	cf 01       	movw	r24, r30
    1d82:	08 95       	ret

00001d84 <__divmodsi4>:
    1d84:	05 2e       	mov	r0, r21
    1d86:	97 fb       	bst	r25, 7
    1d88:	1e f4       	brtc	.+6      	; 0x1d90 <__divmodsi4+0xc>
    1d8a:	00 94       	com	r0
    1d8c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__negsi2>
    1d90:	57 fd       	sbrc	r21, 7
    1d92:	07 d0       	rcall	.+14     	; 0x1da2 <__divmodsi4_neg2>
    1d94:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__udivmodsi4>
    1d98:	07 fc       	sbrc	r0, 7
    1d9a:	03 d0       	rcall	.+6      	; 0x1da2 <__divmodsi4_neg2>
    1d9c:	4e f4       	brtc	.+18     	; 0x1db0 <__divmodsi4_exit>
    1d9e:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__negsi2>

00001da2 <__divmodsi4_neg2>:
    1da2:	50 95       	com	r21
    1da4:	40 95       	com	r20
    1da6:	30 95       	com	r19
    1da8:	21 95       	neg	r18
    1daa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dac:	4f 4f       	sbci	r20, 0xFF	; 255
    1dae:	5f 4f       	sbci	r21, 0xFF	; 255

00001db0 <__divmodsi4_exit>:
    1db0:	08 95       	ret

00001db2 <__negsi2>:
    1db2:	90 95       	com	r25
    1db4:	80 95       	com	r24
    1db6:	70 95       	com	r23
    1db8:	61 95       	neg	r22
    1dba:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	08 95       	ret

00001dc2 <__umulhisi3>:
    1dc2:	a2 9f       	mul	r26, r18
    1dc4:	b0 01       	movw	r22, r0
    1dc6:	b3 9f       	mul	r27, r19
    1dc8:	c0 01       	movw	r24, r0
    1dca:	a3 9f       	mul	r26, r19
    1dcc:	70 0d       	add	r23, r0
    1dce:	81 1d       	adc	r24, r1
    1dd0:	11 24       	eor	r1, r1
    1dd2:	91 1d       	adc	r25, r1
    1dd4:	b2 9f       	mul	r27, r18
    1dd6:	70 0d       	add	r23, r0
    1dd8:	81 1d       	adc	r24, r1
    1dda:	11 24       	eor	r1, r1
    1ddc:	91 1d       	adc	r25, r1
    1dde:	08 95       	ret

00001de0 <__muluhisi3>:
    1de0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__umulhisi3>
    1de4:	a5 9f       	mul	r26, r21
    1de6:	90 0d       	add	r25, r0
    1de8:	b4 9f       	mul	r27, r20
    1dea:	90 0d       	add	r25, r0
    1dec:	a4 9f       	mul	r26, r20
    1dee:	80 0d       	add	r24, r0
    1df0:	91 1d       	adc	r25, r1
    1df2:	11 24       	eor	r1, r1
    1df4:	08 95       	ret

00001df6 <memcpy>:
    1df6:	fb 01       	movw	r30, r22
    1df8:	dc 01       	movw	r26, r24
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <memcpy+0xa>
    1dfc:	01 90       	ld	r0, Z+
    1dfe:	0d 92       	st	X+, r0
    1e00:	41 50       	subi	r20, 0x01	; 1
    1e02:	50 40       	sbci	r21, 0x00	; 0
    1e04:	d8 f7       	brcc	.-10     	; 0x1dfc <memcpy+0x6>
    1e06:	08 95       	ret

00001e08 <__itoa_ncheck>:
    1e08:	bb 27       	eor	r27, r27
    1e0a:	4a 30       	cpi	r20, 0x0A	; 10
    1e0c:	31 f4       	brne	.+12     	; 0x1e1a <__itoa_ncheck+0x12>
    1e0e:	99 23       	and	r25, r25
    1e10:	22 f4       	brpl	.+8      	; 0x1e1a <__itoa_ncheck+0x12>
    1e12:	bd e2       	ldi	r27, 0x2D	; 45
    1e14:	90 95       	com	r25
    1e16:	81 95       	neg	r24
    1e18:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1a:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__utoa_common>

00001e1e <__utoa_ncheck>:
    1e1e:	bb 27       	eor	r27, r27

00001e20 <__utoa_common>:
    1e20:	fb 01       	movw	r30, r22
    1e22:	55 27       	eor	r21, r21
    1e24:	aa 27       	eor	r26, r26
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	aa 1f       	adc	r26, r26
    1e2c:	a4 17       	cp	r26, r20
    1e2e:	10 f0       	brcs	.+4      	; 0x1e34 <__utoa_common+0x14>
    1e30:	a4 1b       	sub	r26, r20
    1e32:	83 95       	inc	r24
    1e34:	50 51       	subi	r21, 0x10	; 16
    1e36:	b9 f7       	brne	.-18     	; 0x1e26 <__utoa_common+0x6>
    1e38:	a0 5d       	subi	r26, 0xD0	; 208
    1e3a:	aa 33       	cpi	r26, 0x3A	; 58
    1e3c:	08 f0       	brcs	.+2      	; 0x1e40 <__utoa_common+0x20>
    1e3e:	a9 5d       	subi	r26, 0xD9	; 217
    1e40:	a1 93       	st	Z+, r26
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	79 f7       	brne	.-34     	; 0x1e24 <__utoa_common+0x4>
    1e46:	b1 11       	cpse	r27, r1
    1e48:	b1 93       	st	Z+, r27
    1e4a:	11 92       	st	Z+, r1
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <strrev>

00001e52 <strrev>:
    1e52:	dc 01       	movw	r26, r24
    1e54:	fc 01       	movw	r30, r24
    1e56:	67 2f       	mov	r22, r23
    1e58:	71 91       	ld	r23, Z+
    1e5a:	77 23       	and	r23, r23
    1e5c:	e1 f7       	brne	.-8      	; 0x1e56 <strrev+0x4>
    1e5e:	32 97       	sbiw	r30, 0x02	; 2
    1e60:	04 c0       	rjmp	.+8      	; 0x1e6a <strrev+0x18>
    1e62:	7c 91       	ld	r23, X
    1e64:	6d 93       	st	X+, r22
    1e66:	70 83       	st	Z, r23
    1e68:	62 91       	ld	r22, -Z
    1e6a:	ae 17       	cp	r26, r30
    1e6c:	bf 07       	cpc	r27, r31
    1e6e:	c8 f3       	brcs	.-14     	; 0x1e62 <strrev+0x10>
    1e70:	08 95       	ret

00001e72 <_exit>:
    1e72:	f8 94       	cli

00001e74 <__stop_program>:
    1e74:	ff cf       	rjmp	.-2      	; 0x1e74 <__stop_program>
