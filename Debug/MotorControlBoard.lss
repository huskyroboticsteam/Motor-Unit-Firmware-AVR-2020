
MotorControlBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800100  00002088  0000211c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002088  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  0080024a  0080024a  00002266  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000550  00000000  00000000  000022d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004aa8  00000000  00000000  00002824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d2b  00000000  00000000  000072cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002805  00000000  00000000  00008ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f6c  00000000  00000000  0000b7fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001226  00000000  00000000  0000c768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a7c  00000000  00000000  0000d98e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f0  00000000  00000000  0001140a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_7>
      20:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_8>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__vector_13>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__vector_15>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_17>
      48:	0c 94 b3 03 	jmp	0x766	; 0x766 <__vector_18>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      80:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__vector_32>
      84:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__vector_33>
      88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	12 e0       	ldi	r17, 0x02	; 2
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e8 e8       	ldi	r30, 0x88	; 136
      a8:	f0 e2       	ldi	r31, 0x20	; 32
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	aa 34       	cpi	r26, 0x4A	; 74
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	22 e0       	ldi	r18, 0x02	; 2
      b8:	aa e4       	ldi	r26, 0x4A	; 74
      ba:	b2 e0       	ldi	r27, 0x02	; 2
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a8 3b       	cpi	r26, 0xB8	; 184
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 bb 05 	call	0xb76	; 0xb76 <main>
      ca:	0c 94 42 10 	jmp	0x2084	; 0x2084 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <init_ADC>:
#include "adc.h"
#include "timers.h"

/*Initialize the ADC and prepare it for reading*/
void init_ADC(){
	ADMUX = (1<<6); //5V VREF
      d2:	80 e4       	ldi	r24, 0x40	; 64
      d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	#if F_CPU < 10000000
	ADCSRA = (1<<ADPS2) | (1<<ADPS0); //Up to 10MHz, prescale by 32
	#else
	ADCSRA = (1<<ADPS2) | (1<<ADPS1); //For faster clocks, prescale by 64
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	86 e0       	ldi	r24, 0x06	; 6
      de:	80 83       	st	Z, r24
	#endif
	ADCSRA |= (1<<ADEN); //Enable the ADC
      e0:	80 81       	ld	r24, Z
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	80 83       	st	Z, r24
      e6:	08 95       	ret

000000e8 <read_ADC>:
  Return value:
  The 10-bit ADC result
*/
uint16_t read_ADC(uint8_t pin){
	uint8_t l,h;
	ADMUX = (ADMUX & 0xC0) | (pin & 7); //Setup ADC, preserve REFS0
      e8:	ec e7       	ldi	r30, 0x7C	; 124
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	90 81       	ld	r25, Z
      ee:	90 7c       	andi	r25, 0xC0	; 192
      f0:	87 70       	andi	r24, 0x07	; 7
      f2:	89 2b       	or	r24, r25
      f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start the conversion
      f6:	ea e7       	ldi	r30, 0x7A	; 122
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //Wait for conversion
     100:	80 81       	ld	r24, Z
     102:	86 fd       	sbrc	r24, 6
     104:	fd cf       	rjmp	.-6      	; 0x100 <read_ADC+0x18>
	l = ADCL;  //Read and return 10 bit result
     106:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	h = ADCH;
     10a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return (h << 8)|l; 
     10e:	90 e0       	ldi	r25, 0x00	; 0
}
     110:	92 2b       	or	r25, r18
     112:	08 95       	ret

00000114 <internalAREF>:

/*Switches to the internal (2.56V) Vref*/
void internalAREF(){
	if((ADMUX & 0xC0) != 0xC0){
     114:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     118:	80 7c       	andi	r24, 0xC0	; 192
     11a:	80 3c       	cpi	r24, 0xC0	; 192
     11c:	61 f0       	breq	.+24     	; 0x136 <internalAREF+0x22>
		ADMUX |= 0xC0;
     11e:	ec e7       	ldi	r30, 0x7C	; 124
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	80 6c       	ori	r24, 0xC0	; 192
     126:	80 83       	st	Z, r24
		delay_mS(5);
     128:	85 e0       	ldi	r24, 0x05	; 5
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <delay_mS>
		read_ADC(0); //As per the datasheet, discard the first reading after changing AREF
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 74 00 	call	0xe8	; 0xe8 <read_ADC>
     136:	08 95       	ret

00000138 <detect_board>:
/*Tries to detect the board revision
Return:
1 if it is likely a revision 1 board or 2 if it is a rev. 2 board
*/
uint8_t detect_board(){
	internalAREF();
     138:	0e 94 8a 00 	call	0x114	; 0x114 <internalAREF>
	uint16_t a = read_ADC(0);
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 74 00 	call	0xe8	; 0xe8 <read_ADC>
	if(a > 384 && a < 640){
     142:	81 58       	subi	r24, 0x81	; 129
     144:	91 40       	sbci	r25, 0x01	; 1
     146:	8f 3f       	cpi	r24, 0xFF	; 255
     148:	91 05       	cpc	r25, r1
     14a:	10 f0       	brcs	.+4      	; 0x150 <detect_board+0x18>
		return 2;
	}
	return 1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	08 95       	ret
*/
uint8_t detect_board(){
	internalAREF();
	uint16_t a = read_ADC(0);
	if(a > 384 && a < 640){
		return 2;
     150:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 1;
}
     152:	08 95       	ret

00000154 <do_board_specific_setup>:

/*Does setup specific to the board
  Parameters:
  the CAN address of the board
*/
void do_board_specific_setup(uint8_t addr){
     154:	cf 93       	push	r28
     156:	c8 2f       	mov	r28, r24
		set_LED(3, 3);
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
		set_Kp(120, 0);
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	88 e7       	ldi	r24, 0x78	; 120
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 99 07 	call	0xf32	; 0xf32 <set_Kp>
		set_Ki(20, 0);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	84 e1       	ldi	r24, 0x14	; 20
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 a0 07 	call	0xf40	; 0xf40 <set_Ki>
		set_Kd(170, 0);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	8a ea       	ldi	r24, 0xAA	; 170
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 a7 07 	call	0xf4e	; 0xf4e <set_Kd>
		switch(addr){
     184:	c2 30       	cpi	r28, 0x02	; 2
     186:	71 f0       	breq	.+28     	; 0x1a4 <do_board_specific_setup+0x50>
     188:	18 f4       	brcc	.+6      	; 0x190 <do_board_specific_setup+0x3c>
     18a:	cc 23       	and	r28, r28
     18c:	31 f0       	breq	.+12     	; 0x19a <do_board_specific_setup+0x46>
     18e:	1d c0       	rjmp	.+58     	; 0x1ca <do_board_specific_setup+0x76>
     190:	c3 30       	cpi	r28, 0x03	; 3
     192:	81 f0       	breq	.+32     	; 0x1b4 <do_board_specific_setup+0x60>
     194:	c6 30       	cpi	r28, 0x06	; 6
     196:	99 f0       	breq	.+38     	; 0x1be <do_board_specific_setup+0x6a>
     198:	18 c0       	rjmp	.+48     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x0: //Base rotation:
				set_ticks_per_10degrees(172);
     19a:	8c ea       	ldi	r24, 0xAC	; 172
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <set_ticks_per_10degrees>
				break;
     1a2:	13 c0       	rjmp	.+38     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x2: //Elbow
				set_motor_reverse(1);
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <set_motor_reverse>
				set_ticks_per_10degrees(85);
     1aa:	85 e5       	ldi	r24, 0x55	; 85
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <set_ticks_per_10degrees>
				break;
     1b2:	0b c0       	rjmp	.+22     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x3: //Forearm rotation
				set_ticks_per_10degrees(68);
     1b4:	84 e4       	ldi	r24, 0x44	; 68
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <set_ticks_per_10degrees>
				break;
     1bc:	06 c0       	rjmp	.+12     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x6: //Hand
				init_servo();
     1be:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <init_servo>
				set_servo_position(0);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 06 0c 	call	0x180c	; 0x180c <set_servo_position>
				break;
		}
		#ifdef REV_2
		tprintf("REV. 2 firmware\n");
		#endif
		uint8_t rev = detect_board();
     1ca:	0e 94 9c 00 	call	0x138	; 0x138 <detect_board>
     1ce:	c8 2f       	mov	r28, r24
		tprintf("Detecting board rev: %d\n", rev);
     1d0:	1f 92       	push	r1
     1d2:	8f 93       	push	r24
     1d4:	86 e0       	ldi	r24, 0x06	; 6
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	9f 93       	push	r25
     1da:	8f 93       	push	r24
     1dc:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
			tprintf("***WARNING*** Rev. 2 firmware on Rev. 1 board\n");
			set_LED(0, 3);
			delay_mS(1000);
		}
		#else
		if(rev == 1){
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	c1 30       	cpi	r28, 0x01	; 1
     1ea:	81 f4       	brne	.+32     	; 0x20c <do_board_specific_setup+0xb8>
			tprintf("***WARNING*** Rev. 1 firmware on Rev. 2 board\n");
     1ec:	8f e1       	ldi	r24, 0x1F	; 31
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	9f 93       	push	r25
     1f2:	8f 93       	push	r24
     1f4:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
			set_LED(0, 3);
     1f8:	63 e0       	ldi	r22, 0x03	; 3
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
			delay_mS(1000);
     200:	88 ee       	ldi	r24, 0xE8	; 232
     202:	93 e0       	ldi	r25, 0x03	; 3
     204:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <delay_mS>
     208:	0f 90       	pop	r0
     20a:	0f 90       	pop	r0
		}
		#endif
}
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <__vector_17>:

#ifdef DEBOUNCE
volatile uint16_t lastA, lastB;
#endif

ISR(TIMER0_OVF_vect){
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	8f 93       	push	r24
     21c:	9f 93       	push	r25
	gate_control++;
     21e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <gate_control>
     222:	8f 5f       	subi	r24, 0xFF	; 255
     224:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <gate_control>
	if(gate_control == gate_control_top){
     228:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <gate_control>
     22c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <gate_control_top>
     230:	98 13       	cpse	r25, r24
     232:	0e c0       	rjmp	.+28     	; 0x250 <__vector_17+0x40>
		raw_velocity = vticks;
     234:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <vticks>
     238:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <vticks+0x1>
     23c:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <raw_velocity+0x1>
     240:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <raw_velocity>
		vticks = gate_control = 0;
     244:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <gate_control>
     248:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <vticks+0x1>
     24c:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <vticks>
	}
}
     250:	9f 91       	pop	r25
     252:	8f 91       	pop	r24
     254:	0f 90       	pop	r0
     256:	0f be       	out	0x3f, r0	; 63
     258:	0f 90       	pop	r0
     25a:	1f 90       	pop	r1
     25c:	18 95       	reti

0000025e <get_encoder_ticks>:

/*Returns the total number of encoder ticks since the last reset*/
int32_t get_encoder_ticks(){
	//return -19;
	//return 0;
	return encoder_ticks;
     25e:	60 91 57 02 	lds	r22, 0x0257	; 0x800257 <encoder_ticks>
     262:	70 91 58 02 	lds	r23, 0x0258	; 0x800258 <encoder_ticks+0x1>
     266:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <encoder_ticks+0x2>
     26a:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <encoder_ticks+0x3>
	//return 255;
}
     26e:	08 95       	ret

00000270 <set_encoder_ticks>:

/*Sets the encoder counter to the specified value*/
void set_encoder_ticks(int32_t ticks){
	encoder_ticks = ticks;
     270:	60 93 57 02 	sts	0x0257, r22	; 0x800257 <encoder_ticks>
     274:	70 93 58 02 	sts	0x0258, r23	; 0x800258 <encoder_ticks+0x1>
     278:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <encoder_ticks+0x2>
     27c:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <encoder_ticks+0x3>
     280:	08 95       	ret

00000282 <init_encoder>:
}

/*Initializes the encoder with A on PE6 and B on PE7*/
void init_encoder(){
	EIMSK &= 0x3F; //Disable pin change interrupts
     282:	8d b3       	in	r24, 0x1d	; 29
     284:	8f 73       	andi	r24, 0x3F	; 63
     286:	8d bb       	out	0x1d, r24	; 29
	DDRE &= 0x3F; //Set PE6, PE7 as inputs
     288:	8d b1       	in	r24, 0x0d	; 13
     28a:	8f 73       	andi	r24, 0x3F	; 63
     28c:	8d b9       	out	0x0d, r24	; 13
	PORTE |= 0xC0; //Enable pullups on PE6, PE7
     28e:	8e b1       	in	r24, 0x0e	; 14
     290:	80 6c       	ori	r24, 0xC0	; 192
     292:	8e b9       	out	0x0e, r24	; 14
	encoder_ticks = 0; //Reset count
     294:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <encoder_ticks>
     298:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <encoder_ticks+0x1>
     29c:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <encoder_ticks+0x2>
     2a0:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <encoder_ticks+0x3>
	gate_control_top = 24; //Short gate time
     2a4:	88 e1       	ldi	r24, 0x18	; 24
     2a6:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <gate_control_top>
	EICRB |= 0x50; //Enable pin change interrupt on PE6, PE7
     2aa:	ea e6       	ldi	r30, 0x6A	; 106
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	80 65       	ori	r24, 0x50	; 80
     2b2:	80 83       	st	Z, r24
	EICRA = 0;
     2b4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK |= 0xC0;
     2b8:	8d b3       	in	r24, 0x1d	; 29
     2ba:	80 6c       	ori	r24, 0xC0	; 192
     2bc:	8d bb       	out	0x1d, r24	; 29
     2be:	08 95       	ret

000002c0 <reset_encoder>:
}

/*Resets the encoder count*/
void reset_encoder(){
	EIMSK &= 0x3F; //Disable pin change interrupts
     2c0:	8d b3       	in	r24, 0x1d	; 29
     2c2:	8f 73       	andi	r24, 0x3F	; 63
     2c4:	8d bb       	out	0x1d, r24	; 29
	encoder_ticks = 0; //Reset count
     2c6:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <encoder_ticks>
     2ca:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <encoder_ticks+0x1>
     2ce:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <encoder_ticks+0x2>
     2d2:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <encoder_ticks+0x3>
	vticks = 0;
     2d6:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <vticks+0x1>
     2da:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <vticks>
	raw_velocity = 0;
     2de:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <raw_velocity+0x1>
     2e2:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <raw_velocity>
	gate_control = 0;
     2e6:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <gate_control>
	EIMSK |= 0xC0; //Enable pin change interrupt on PE6, PE7
     2ea:	8d b3       	in	r24, 0x1d	; 29
     2ec:	80 6c       	ori	r24, 0xC0	; 192
     2ee:	8d bb       	out	0x1d, r24	; 29
     2f0:	08 95       	ret

000002f2 <get_encoder_velocity>:
}

/*Returns the encoder velocity in ticks/second*/
int16_t get_encoder_velocity(){
	int16_t rv = raw_velocity;
     2f2:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <raw_velocity>
     2f6:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <raw_velocity+0x1>
	int16_t velocity;
	if(gate_control_top == 24){
     2fa:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <gate_control_top>
     2fe:	28 31       	cpi	r18, 0x18	; 24
     300:	59 f5       	brne	.+86     	; 0x358 <get_encoder_velocity+0x66>
		if(rv < 5 && rv > -5){ //If it's slow, increase the gate time
     302:	9c 01       	movw	r18, r24
     304:	2c 5f       	subi	r18, 0xFC	; 252
     306:	3f 4f       	sbci	r19, 0xFF	; 255
     308:	29 30       	cpi	r18, 0x09	; 9
     30a:	31 05       	cpc	r19, r1
     30c:	18 f4       	brcc	.+6      	; 0x314 <get_encoder_velocity+0x22>
			gate_control_top = 122;
     30e:	2a e7       	ldi	r18, 0x7A	; 122
     310:	20 93 51 02 	sts	0x0251, r18	; 0x800251 <gate_control_top>
			//tprintf("GCT=122\n");
		}
		velocity = (rv * 60)/4 + old_velocity/4; //Compute velocity and low pass filter
     314:	4c e3       	ldi	r20, 0x3C	; 60
     316:	48 9f       	mul	r20, r24
     318:	90 01       	movw	r18, r0
     31a:	49 9f       	mul	r20, r25
     31c:	30 0d       	add	r19, r0
     31e:	11 24       	eor	r1, r1
     320:	33 23       	and	r19, r19
     322:	14 f4       	brge	.+4      	; 0x328 <get_encoder_velocity+0x36>
     324:	2d 5f       	subi	r18, 0xFD	; 253
     326:	3f 4f       	sbci	r19, 0xFF	; 255
     328:	35 95       	asr	r19
     32a:	27 95       	ror	r18
     32c:	35 95       	asr	r19
     32e:	27 95       	ror	r18
     330:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <old_velocity>
     334:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <old_velocity+0x1>
     338:	99 23       	and	r25, r25
     33a:	0c f4       	brge	.+2      	; 0x33e <get_encoder_velocity+0x4c>
     33c:	03 96       	adiw	r24, 0x03	; 3
     33e:	95 95       	asr	r25
     340:	87 95       	ror	r24
     342:	95 95       	asr	r25
     344:	87 95       	ror	r24
     346:	28 0f       	add	r18, r24
     348:	39 1f       	adc	r19, r25
		old_velocity = velocity;
     34a:	30 93 50 02 	sts	0x0250, r19	; 0x800250 <old_velocity+0x1>
     34e:	20 93 4f 02 	sts	0x024F, r18	; 0x80024f <old_velocity>
		return velocity;
     352:	82 2f       	mov	r24, r18
     354:	93 2f       	mov	r25, r19
     356:	08 95       	ret
	} else if(gate_control_top == 122){ //If it's fast, decrease gate time
     358:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <gate_control_top>
     35c:	2a 37       	cpi	r18, 0x7A	; 122
     35e:	79 f5       	brne	.+94     	; 0x3be <get_encoder_velocity+0xcc>
		if(rv > 80 || rv < -80){
     360:	9c 01       	movw	r18, r24
     362:	20 5b       	subi	r18, 0xB0	; 176
     364:	3f 4f       	sbci	r19, 0xFF	; 255
     366:	21 3a       	cpi	r18, 0xA1	; 161
     368:	31 05       	cpc	r19, r1
     36a:	18 f0       	brcs	.+6      	; 0x372 <get_encoder_velocity+0x80>
			gate_control_top = 24;
     36c:	28 e1       	ldi	r18, 0x18	; 24
     36e:	20 93 51 02 	sts	0x0251, r18	; 0x800251 <gate_control_top>
			//tprintf("GCT=24\n");
		}
		velocity = (rv * 12)/4 + old_velocity/4; //Compute velocity and LPF
     372:	9c 01       	movw	r18, r24
     374:	22 0f       	add	r18, r18
     376:	33 1f       	adc	r19, r19
     378:	82 0f       	add	r24, r18
     37a:	93 1f       	adc	r25, r19
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	9c 01       	movw	r18, r24
     386:	99 23       	and	r25, r25
     388:	14 f4       	brge	.+4      	; 0x38e <get_encoder_velocity+0x9c>
     38a:	2d 5f       	subi	r18, 0xFD	; 253
     38c:	3f 4f       	sbci	r19, 0xFF	; 255
     38e:	35 95       	asr	r19
     390:	27 95       	ror	r18
     392:	35 95       	asr	r19
     394:	27 95       	ror	r18
     396:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <old_velocity>
     39a:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <old_velocity+0x1>
     39e:	99 23       	and	r25, r25
     3a0:	0c f4       	brge	.+2      	; 0x3a4 <get_encoder_velocity+0xb2>
     3a2:	03 96       	adiw	r24, 0x03	; 3
     3a4:	95 95       	asr	r25
     3a6:	87 95       	ror	r24
     3a8:	95 95       	asr	r25
     3aa:	87 95       	ror	r24
     3ac:	28 0f       	add	r18, r24
     3ae:	39 1f       	adc	r19, r25
		old_velocity = velocity;
     3b0:	30 93 50 02 	sts	0x0250, r19	; 0x800250 <old_velocity+0x1>
     3b4:	20 93 4f 02 	sts	0x024F, r18	; 0x80024f <old_velocity>
		return velocity;
     3b8:	82 2f       	mov	r24, r18
     3ba:	93 2f       	mov	r25, r19
     3bc:	08 95       	ret
	}
	return -1;
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	9f ef       	ldi	r25, 0xFF	; 255
}
     3c2:	08 95       	ret

000003c4 <__vector_7>:

ISR(INT6_vect){ //PE6, A
     3c4:	1f 92       	push	r1
     3c6:	0f 92       	push	r0
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	0f 92       	push	r0
     3cc:	11 24       	eor	r1, r1
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
     3d2:	af 93       	push	r26
     3d4:	bf 93       	push	r27
	#ifdef DEBOUNCE
	uint16_t tc = TCNT1;
	if(tc > lastA && tc - lastA < 400) return;
	lastA = tc;
	#endif
	uint8_t state = PINE;
     3d6:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE6)){ //A rising
     3d8:	86 ff       	sbrs	r24, 6
     3da:	3c c0       	rjmp	.+120    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		if(state & (1<<PE7)){ //B high
     3dc:	88 23       	and	r24, r24
     3de:	ec f4       	brge	.+58     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			encoder_ticks++;
     3e0:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <encoder_ticks>
     3e4:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <encoder_ticks+0x1>
     3e8:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <encoder_ticks+0x2>
     3ec:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <encoder_ticks+0x3>
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	a1 1d       	adc	r26, r1
     3f4:	b1 1d       	adc	r27, r1
     3f6:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <encoder_ticks>
     3fa:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <encoder_ticks+0x1>
     3fe:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <encoder_ticks+0x2>
     402:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <encoder_ticks+0x3>
			vticks++;
     406:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <vticks>
     40a:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <vticks+0x1>
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <vticks+0x1>
     414:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <vticks>
     418:	58 c0       	rjmp	.+176    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		} else { //B low
			encoder_ticks--;
     41a:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <encoder_ticks>
     41e:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <encoder_ticks+0x1>
     422:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <encoder_ticks+0x2>
     426:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <encoder_ticks+0x3>
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	a1 09       	sbc	r26, r1
     42e:	b1 09       	sbc	r27, r1
     430:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <encoder_ticks>
     434:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <encoder_ticks+0x1>
     438:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <encoder_ticks+0x2>
     43c:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <encoder_ticks+0x3>
			vticks--;
     440:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <vticks>
     444:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <vticks+0x1>
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <vticks+0x1>
     44e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <vticks>
     452:	3b c0       	rjmp	.+118    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		}
	} else { //A falling
		if(state & (1<<PE7)){ //B high
     454:	88 23       	and	r24, r24
     456:	ec f4       	brge	.+58     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
			encoder_ticks--;
     458:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <encoder_ticks>
     45c:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <encoder_ticks+0x1>
     460:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <encoder_ticks+0x2>
     464:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <encoder_ticks+0x3>
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	a1 09       	sbc	r26, r1
     46c:	b1 09       	sbc	r27, r1
     46e:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <encoder_ticks>
     472:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <encoder_ticks+0x1>
     476:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <encoder_ticks+0x2>
     47a:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <encoder_ticks+0x3>
			vticks--;
     47e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <vticks>
     482:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <vticks+0x1>
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <vticks+0x1>
     48c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <vticks>
     490:	1c c0       	rjmp	.+56     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		} else { //B low
			encoder_ticks++;
     492:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <encoder_ticks>
     496:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <encoder_ticks+0x1>
     49a:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <encoder_ticks+0x2>
     49e:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <encoder_ticks+0x3>
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	a1 1d       	adc	r26, r1
     4a6:	b1 1d       	adc	r27, r1
     4a8:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <encoder_ticks>
     4ac:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <encoder_ticks+0x1>
     4b0:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <encoder_ticks+0x2>
     4b4:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <encoder_ticks+0x3>
			vticks++;
     4b8:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <vticks>
     4bc:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <vticks+0x1>
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <vticks+0x1>
     4c6:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <vticks>
		}
	}
}
     4ca:	bf 91       	pop	r27
     4cc:	af 91       	pop	r26
     4ce:	9f 91       	pop	r25
     4d0:	8f 91       	pop	r24
     4d2:	0f 90       	pop	r0
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	0f 90       	pop	r0
     4d8:	1f 90       	pop	r1
     4da:	18 95       	reti

000004dc <__vector_8>:

ISR(INT7_vect){ //PE7, B
     4dc:	1f 92       	push	r1
     4de:	0f 92       	push	r0
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	0f 92       	push	r0
     4e4:	11 24       	eor	r1, r1
     4e6:	8f 93       	push	r24
     4e8:	9f 93       	push	r25
     4ea:	af 93       	push	r26
     4ec:	bf 93       	push	r27
	#ifdef DEBOUNCE
	uint16_t tc = TCNT1;
	if(tc > lastB && tc - lastB < 400) return;
	lastB = tc;
	#endif
	uint8_t state = PINE;
     4ee:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE7)){ //B rising
     4f0:	88 23       	and	r24, r24
     4f2:	e4 f5       	brge	.+120    	; 0x56c <__vector_8+0x90>
		if(state & (1<<PE6)){ //A high
     4f4:	86 ff       	sbrs	r24, 6
     4f6:	1d c0       	rjmp	.+58     	; 0x532 <__vector_8+0x56>
			encoder_ticks--;
     4f8:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <encoder_ticks>
     4fc:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <encoder_ticks+0x1>
     500:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <encoder_ticks+0x2>
     504:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <encoder_ticks+0x3>
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	a1 09       	sbc	r26, r1
     50c:	b1 09       	sbc	r27, r1
     50e:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <encoder_ticks>
     512:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <encoder_ticks+0x1>
     516:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <encoder_ticks+0x2>
     51a:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <encoder_ticks+0x3>
			vticks--;
     51e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <vticks>
     522:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <vticks+0x1>
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <vticks+0x1>
     52c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <vticks>
     530:	58 c0       	rjmp	.+176    	; 0x5e2 <__vector_8+0x106>
		} else { //A low
			encoder_ticks++;
     532:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <encoder_ticks>
     536:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <encoder_ticks+0x1>
     53a:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <encoder_ticks+0x2>
     53e:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <encoder_ticks+0x3>
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	a1 1d       	adc	r26, r1
     546:	b1 1d       	adc	r27, r1
     548:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <encoder_ticks>
     54c:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <encoder_ticks+0x1>
     550:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <encoder_ticks+0x2>
     554:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <encoder_ticks+0x3>
			vticks++;
     558:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <vticks>
     55c:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <vticks+0x1>
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <vticks+0x1>
     566:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <vticks>
     56a:	3b c0       	rjmp	.+118    	; 0x5e2 <__vector_8+0x106>
		}
	} else { //B falling
		if(state & (1<<PE6)){ //A high
     56c:	86 ff       	sbrs	r24, 6
     56e:	1d c0       	rjmp	.+58     	; 0x5aa <__vector_8+0xce>
			encoder_ticks++;
     570:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <encoder_ticks>
     574:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <encoder_ticks+0x1>
     578:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <encoder_ticks+0x2>
     57c:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <encoder_ticks+0x3>
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	a1 1d       	adc	r26, r1
     584:	b1 1d       	adc	r27, r1
     586:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <encoder_ticks>
     58a:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <encoder_ticks+0x1>
     58e:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <encoder_ticks+0x2>
     592:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <encoder_ticks+0x3>
			vticks++;
     596:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <vticks>
     59a:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <vticks+0x1>
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <vticks+0x1>
     5a4:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <vticks>
     5a8:	1c c0       	rjmp	.+56     	; 0x5e2 <__vector_8+0x106>
		} else { //A low
			encoder_ticks--;
     5aa:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <encoder_ticks>
     5ae:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <encoder_ticks+0x1>
     5b2:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <encoder_ticks+0x2>
     5b6:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <encoder_ticks+0x3>
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	a1 09       	sbc	r26, r1
     5be:	b1 09       	sbc	r27, r1
     5c0:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <encoder_ticks>
     5c4:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <encoder_ticks+0x1>
     5c8:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <encoder_ticks+0x2>
     5cc:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <encoder_ticks+0x3>
			vticks--;
     5d0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <vticks>
     5d4:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <vticks+0x1>
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <vticks+0x1>
     5de:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <vticks>
		}
	}
     5e2:	bf 91       	pop	r27
     5e4:	af 91       	pop	r26
     5e6:	9f 91       	pop	r25
     5e8:	8f 91       	pop	r24
     5ea:	0f 90       	pop	r0
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	0f 90       	pop	r0
     5f0:	1f 90       	pop	r1
     5f2:	18 95       	reti

000005f4 <GetModeFromPacket>:
{
    packetToAssemble->id = ConstructCANID(PRIO_MOTOR_UNIT_ENC_PPJR_SET, targetDeviceGroup, targetDeviceSerial);
    packetToAssemble->dlc = DLC_MOTOR_UNIT_ENC_PPJR_SET;
    int nextByte = WritePacketIDOnly(packetToAssemble->data, ID_MOTOR_UNIT_ENC_PPJR_SET);
    PackIntIntoDataMSBFirst(packetToAssemble->data, pulses, nextByte);
}
     5f4:	fc 01       	movw	r30, r24
     5f6:	84 81       	ldd	r24, Z+4	; 0x04
     5f8:	08 95       	ret

000005fa <GetPWMFromPacket>:
     5fa:	42 e0       	ldi	r20, 0x02	; 2
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	03 96       	adiw	r24, 0x03	; 3
     604:	0e 94 1a 03 	call	0x634	; 0x634 <DecodeBytesToIntMSBFirst>
     608:	08 95       	ret

0000060a <GetPIDTargetFromPacket>:
     60a:	45 e0       	ldi	r20, 0x05	; 5
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	03 96       	adiw	r24, 0x03	; 3
     614:	0e 94 1a 03 	call	0x634	; 0x634 <DecodeBytesToIntMSBFirst>
     618:	86 2f       	mov	r24, r22
     61a:	08 95       	ret

0000061c <GetEncoderPPJRFromPacket>:

uint32_t GetEncoderPPJRFromPacket(CANPacket *packet)
{
    return DecodeBytesToIntMSBFirst(packet->data, 1, 4);
     61c:	44 e0       	ldi	r20, 0x04	; 4
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	03 96       	adiw	r24, 0x03	; 3
     626:	0e 94 1a 03 	call	0x634	; 0x634 <DecodeBytesToIntMSBFirst>
}
     62a:	08 95       	ret

0000062c <GetPacketID>:
}

void PackShortIntoDataMSBFirst(uint8_t *data, int16_t dataToPack, int startIndex)
{
	data[startIndex + 0] = (dataToPack & 0xFF00) >> 8;
	data[startIndex + 1] = (dataToPack & 0x00FF);
     62c:	fc 01       	movw	r30, r24
     62e:	83 81       	ldd	r24, Z+3	; 0x03
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	08 95       	ret

00000634 <DecodeBytesToIntMSBFirst>:
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
    int length = 4;
    int32_t decodedData = 0; 

    if (endIndex > 0 && startIndex >= 0) {
     640:	14 16       	cp	r1, r20
     642:	15 06       	cpc	r1, r21
     644:	9c f4       	brge	.+38     	; 0x66c <DecodeBytesToIntMSBFirst+0x38>
     646:	77 23       	and	r23, r23
     648:	a4 f0       	brlt	.+40     	; 0x672 <DecodeBytesToIntMSBFirst+0x3e>
        length = endIndex - startIndex + 1;
     64a:	ea 01       	movw	r28, r20
     64c:	c6 1b       	sub	r28, r22
     64e:	d7 0b       	sbc	r29, r23
     650:	21 96       	adiw	r28, 0x01	; 1
     652:	c5 30       	cpi	r28, 0x05	; 5
     654:	d1 05       	cpc	r29, r1
     656:	14 f0       	brlt	.+4      	; 0x65c <DecodeBytesToIntMSBFirst+0x28>
     658:	c4 e0       	ldi	r28, 0x04	; 4
     65a:	d0 e0       	ldi	r29, 0x00	; 0
     65c:	dd 23       	and	r29, r29
     65e:	14 f4       	brge	.+4      	; 0x664 <DecodeBytesToIntMSBFirst+0x30>
     660:	c0 e0       	ldi	r28, 0x00	; 0
     662:	d0 e0       	ldi	r29, 0x00	; 0
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     664:	1c 16       	cp	r1, r28
     666:	1d 06       	cpc	r1, r29
     668:	34 f0       	brlt	.+12     	; 0x676 <DecodeBytesToIntMSBFirst+0x42>
     66a:	2d c0       	rjmp	.+90     	; 0x6c6 <DecodeBytesToIntMSBFirst+0x92>
     66c:	c4 e0       	ldi	r28, 0x04	; 4
     66e:	d0 e0       	ldi	r29, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <DecodeBytesToIntMSBFirst+0x42>
     672:	c4 e0       	ldi	r28, 0x04	; 4
     674:	d0 e0       	ldi	r29, 0x00	; 0
     676:	dc 01       	movw	r26, r24
     678:	a6 0f       	add	r26, r22
     67a:	b7 1f       	adc	r27, r23
     67c:	9e 01       	movw	r18, r28
     67e:	21 50       	subi	r18, 0x01	; 1
     680:	31 09       	sbc	r19, r1
     682:	22 0f       	add	r18, r18
     684:	33 1f       	adc	r19, r19
     686:	22 0f       	add	r18, r18
     688:	33 1f       	adc	r19, r19
     68a:	22 0f       	add	r18, r18
     68c:	33 1f       	adc	r19, r19
     68e:	e0 e0       	ldi	r30, 0x00	; 0
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	c1 2c       	mov	r12, r1
     694:	d1 2c       	mov	r13, r1
     696:	76 01       	movw	r14, r12
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
     698:	4d 91       	ld	r20, X+
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	02 2e       	mov	r0, r18
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DecodeBytesToIntMSBFirst+0x70>
     6a0:	44 0f       	add	r20, r20
     6a2:	55 1f       	adc	r21, r21
     6a4:	0a 94       	dec	r0
     6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DecodeBytesToIntMSBFirst+0x6c>
     6a8:	05 2e       	mov	r0, r21
     6aa:	00 0c       	add	r0, r0
     6ac:	66 0b       	sbc	r22, r22
     6ae:	77 0b       	sbc	r23, r23
     6b0:	c4 2a       	or	r12, r20
     6b2:	d5 2a       	or	r13, r21
     6b4:	e6 2a       	or	r14, r22
     6b6:	f7 2a       	or	r15, r23
        length = endIndex - startIndex + 1;
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     6b8:	31 96       	adiw	r30, 0x01	; 1
     6ba:	28 50       	subi	r18, 0x08	; 8
     6bc:	31 09       	sbc	r19, r1
     6be:	ec 17       	cp	r30, r28
     6c0:	fd 07       	cpc	r31, r29
     6c2:	54 f3       	brlt	.-44     	; 0x698 <DecodeBytesToIntMSBFirst+0x64>
     6c4:	03 c0       	rjmp	.+6      	; 0x6cc <DecodeBytesToIntMSBFirst+0x98>
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
    int length = 4;
    int32_t decodedData = 0; 
     6c6:	c1 2c       	mov	r12, r1
     6c8:	d1 2c       	mov	r13, r1
     6ca:	76 01       	movw	r14, r12
    for (int i = 0; i < length; i++) 
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
    }
    return decodedData;
}
     6cc:	c7 01       	movw	r24, r14
     6ce:	b6 01       	movw	r22, r12
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	08 95       	ret

000006de <disable_mob_interrupt>:
	CANIDT2 = ((packetToSend->id & 7) << 5);
	CANIDT1 = ((packetToSend->id & 0x7F8) >> 3);
	CANCDMOB |= (1<<CONMOB0);
	enable_mob_interrupt(mob); //Enable MOb interrupt
	return 0;
}
     6de:	88 30       	cpi	r24, 0x08	; 8
     6e0:	80 f4       	brcc	.+32     	; 0x702 <disable_mob_interrupt+0x24>
     6e2:	ee ed       	ldi	r30, 0xDE	; 222
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	40 81       	ld	r20, Z
     6e8:	21 e0       	ldi	r18, 0x01	; 1
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	b9 01       	movw	r22, r18
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <disable_mob_interrupt+0x16>
     6f0:	66 0f       	add	r22, r22
     6f2:	77 1f       	adc	r23, r23
     6f4:	8a 95       	dec	r24
     6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <disable_mob_interrupt+0x12>
     6f8:	cb 01       	movw	r24, r22
     6fa:	80 95       	com	r24
     6fc:	84 23       	and	r24, r20
     6fe:	80 83       	st	Z, r24
     700:	08 95       	ret
     702:	ef ed       	ldi	r30, 0xDF	; 223
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	40 81       	ld	r20, Z
     708:	88 50       	subi	r24, 0x08	; 8
     70a:	21 e0       	ldi	r18, 0x01	; 1
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	b9 01       	movw	r22, r18
     710:	02 c0       	rjmp	.+4      	; 0x716 <disable_mob_interrupt+0x38>
     712:	66 0f       	add	r22, r22
     714:	77 1f       	adc	r23, r23
     716:	8a 95       	dec	r24
     718:	e2 f7       	brpl	.-8      	; 0x712 <disable_mob_interrupt+0x34>
     71a:	cb 01       	movw	r24, r22
     71c:	80 95       	com	r24
     71e:	84 23       	and	r24, r20
     720:	80 83       	st	Z, r24
     722:	08 95       	ret

00000724 <enable_mob_interrupt>:
     724:	88 30       	cpi	r24, 0x08	; 8
     726:	78 f4       	brcc	.+30     	; 0x746 <enable_mob_interrupt+0x22>
     728:	ee ed       	ldi	r30, 0xDE	; 222
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	40 81       	ld	r20, Z
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	b9 01       	movw	r22, r18
     734:	02 c0       	rjmp	.+4      	; 0x73a <enable_mob_interrupt+0x16>
     736:	66 0f       	add	r22, r22
     738:	77 1f       	adc	r23, r23
     73a:	8a 95       	dec	r24
     73c:	e2 f7       	brpl	.-8      	; 0x736 <enable_mob_interrupt+0x12>
     73e:	cb 01       	movw	r24, r22
     740:	84 2b       	or	r24, r20
     742:	80 83       	st	Z, r24
     744:	08 95       	ret
     746:	ef ed       	ldi	r30, 0xDF	; 223
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	40 81       	ld	r20, Z
     74c:	88 50       	subi	r24, 0x08	; 8
     74e:	21 e0       	ldi	r18, 0x01	; 1
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	b9 01       	movw	r22, r18
     754:	02 c0       	rjmp	.+4      	; 0x75a <enable_mob_interrupt+0x36>
     756:	66 0f       	add	r22, r22
     758:	77 1f       	adc	r23, r23
     75a:	8a 95       	dec	r24
     75c:	e2 f7       	brpl	.-8      	; 0x756 <enable_mob_interrupt+0x32>
     75e:	cb 01       	movw	r24, r22
     760:	84 2b       	or	r24, r20
     762:	80 83       	st	Z, r24
     764:	08 95       	ret

00000766 <__vector_18>:
     766:	1f 92       	push	r1
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	0f 92       	push	r0
     76e:	11 24       	eor	r1, r1
     770:	2f 93       	push	r18
     772:	3f 93       	push	r19
     774:	4f 93       	push	r20
     776:	5f 93       	push	r21
     778:	6f 93       	push	r22
     77a:	7f 93       	push	r23
     77c:	8f 93       	push	r24
     77e:	9f 93       	push	r25
     780:	af 93       	push	r26
     782:	bf 93       	push	r27
     784:	cf 93       	push	r28
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
     78a:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     78e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
     792:	80 7f       	andi	r24, 0xF0	; 240
     794:	80 3f       	cpi	r24, 0xF0	; 240
     796:	b1 f1       	breq	.+108    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     798:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
     79c:	82 95       	swap	r24
     79e:	8f 70       	andi	r24, 0x0F	; 15
     7a0:	90 e1       	ldi	r25, 0x10	; 16
     7a2:	89 9f       	mul	r24, r25
     7a4:	90 01       	movw	r18, r0
     7a6:	11 24       	eor	r1, r1
     7a8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     7ac:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
     7b0:	96 ff       	sbrs	r25, 6
     7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <__vector_18+0x60>
     7b4:	ee ee       	ldi	r30, 0xEE	; 238
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	90 81       	ld	r25, Z
     7ba:	10 82       	st	Z, r1
     7bc:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
     7c0:	0e 94 92 03 	call	0x724	; 0x724 <enable_mob_interrupt>
     7c4:	23 c0       	rjmp	.+70     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7c6:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <msgs_av>
     7ca:	9f 5f       	subi	r25, 0xFF	; 255
     7cc:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <msgs_av>
     7d0:	e8 2f       	mov	r30, r24
     7d2:	e6 95       	lsr	r30
     7d4:	e6 95       	lsr	r30
     7d6:	e6 95       	lsr	r30
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	e4 5a       	subi	r30, 0xA4	; 164
     7dc:	fd 4f       	sbci	r31, 0xFD	; 253
     7de:	90 81       	ld	r25, Z
     7e0:	48 2f       	mov	r20, r24
     7e2:	47 70       	andi	r20, 0x07	; 7
     7e4:	21 e0       	ldi	r18, 0x01	; 1
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <__vector_18+0x88>
     7ea:	22 0f       	add	r18, r18
     7ec:	33 1f       	adc	r19, r19
     7ee:	4a 95       	dec	r20
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <__vector_18+0x84>
     7f2:	29 2b       	or	r18, r25
     7f4:	20 83       	st	Z, r18
     7f6:	ee ee       	ldi	r30, 0xEE	; 238
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	90 81       	ld	r25, Z
     7fc:	10 82       	st	Z, r1
     7fe:	0e 94 6f 03 	call	0x6de	; 0x6de <disable_mob_interrupt>
     802:	04 c0       	rjmp	.+8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     804:	ea ed       	ldi	r30, 0xDA	; 218
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	80 83       	st	Z, r24
     80c:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     810:	ff 91       	pop	r31
     812:	ef 91       	pop	r30
     814:	cf 91       	pop	r28
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <set_mob_rx_filter>:
     834:	9c 01       	movw	r18, r24
     836:	33 27       	eor	r19, r19
     838:	22 95       	swap	r18
     83a:	32 95       	swap	r19
     83c:	30 7f       	andi	r19, 0xF0	; 240
     83e:	32 27       	eor	r19, r18
     840:	20 7f       	andi	r18, 0xF0	; 240
     842:	32 27       	eor	r19, r18
     844:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     848:	9c 01       	movw	r18, r24
     84a:	21 50       	subi	r18, 0x01	; 1
     84c:	31 09       	sbc	r19, r1
     84e:	22 30       	cpi	r18, 0x02	; 2
     850:	31 05       	cpc	r19, r1
     852:	40 f4       	brcc	.+16     	; 0x864 <set_mob_rx_filter+0x30>
     854:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <devGrp>
     858:	20 e4       	ldi	r18, 0x40	; 64
     85a:	82 9f       	mul	r24, r18
     85c:	c0 01       	movw	r24, r0
     85e:	11 24       	eor	r1, r1
     860:	8f 63       	ori	r24, 0x3F	; 63
     862:	0f c0       	rjmp	.+30     	; 0x882 <set_mob_rx_filter+0x4e>
     864:	03 97       	sbiw	r24, 0x03	; 3
     866:	02 97       	sbiw	r24, 0x02	; 2
     868:	50 f4       	brcc	.+20     	; 0x87e <set_mob_rx_filter+0x4a>
     86a:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <devGrp>
     86e:	20 e4       	ldi	r18, 0x40	; 64
     870:	82 9f       	mul	r24, r18
     872:	c0 01       	movw	r24, r0
     874:	11 24       	eor	r1, r1
     876:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <devSer>
     87a:	82 2b       	or	r24, r18
     87c:	02 c0       	rjmp	.+4      	; 0x882 <set_mob_rx_filter+0x4e>
     87e:	8f e3       	ldi	r24, 0x3F	; 63
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
     886:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
     88a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
     88e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     892:	28 2f       	mov	r18, r24
     894:	22 95       	swap	r18
     896:	22 0f       	add	r18, r18
     898:	20 7e       	andi	r18, 0xE0	; 224
     89a:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     89e:	88 7f       	andi	r24, 0xF8	; 248
     8a0:	97 70       	andi	r25, 0x07	; 7
     8a2:	96 95       	lsr	r25
     8a4:	87 95       	ror	r24
     8a6:	96 95       	lsr	r25
     8a8:	87 95       	ror	r24
     8aa:	96 95       	lsr	r25
     8ac:	87 95       	ror	r24
     8ae:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
     8b2:	80 ee       	ldi	r24, 0xE0	; 224
     8b4:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
     8b8:	8f e7       	ldi	r24, 0x7F	; 127
     8ba:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
     8be:	08 95       	ret

000008c0 <init_CAN>:
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	e8 ed       	ldi	r30, 0xD8	; 216
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	90 81       	ld	r25, Z
     8d4:	91 60       	ori	r25, 0x01	; 1
     8d6:	90 83       	st	Z, r25
     8d8:	40 93 5f 02 	sts	0x025F, r20	; 0x80025f <devGrp>
     8dc:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <devSer>
     8e0:	2f ef       	ldi	r18, 0xFF	; 255
     8e2:	31 ee       	ldi	r19, 0xE1	; 225
     8e4:	94 e0       	ldi	r25, 0x04	; 4
     8e6:	21 50       	subi	r18, 0x01	; 1
     8e8:	30 40       	sbci	r19, 0x00	; 0
     8ea:	90 40       	sbci	r25, 0x00	; 0
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <init_CAN+0x26>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <init_CAN+0x30>
     8f0:	00 00       	nop
     8f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     8f6:	70 93 e3 00 	sts	0x00E3, r23	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
     8fa:	60 93 e4 00 	sts	0x00E4, r22	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
     8fe:	80 eb       	ldi	r24, 0xB0	; 176
     900:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
     90a:	ec e5       	ldi	r30, 0x5C	; 92
     90c:	f2 e0       	ldi	r31, 0x02	; 2
     90e:	11 82       	std	Z+1, r1	; 0x01
     910:	10 82       	st	Z, r1
     912:	c0 e0       	ldi	r28, 0x00	; 0
     914:	d0 e0       	ldi	r29, 0x00	; 0
     916:	0f ee       	ldi	r16, 0xEF	; 239
     918:	10 e0       	ldi	r17, 0x00	; 0
     91a:	0f 2e       	mov	r0, r31
     91c:	fe ee       	ldi	r31, 0xEE	; 238
     91e:	ef 2e       	mov	r14, r31
     920:	f1 2c       	mov	r15, r1
     922:	f0 2d       	mov	r31, r0
     924:	68 94       	set
     926:	dd 24       	eor	r13, r13
     928:	d7 f8       	bld	r13, 7
     92a:	c5 30       	cpi	r28, 0x05	; 5
     92c:	60 f4       	brcc	.+24     	; 0x946 <__stack+0x47>
     92e:	f7 01       	movw	r30, r14
     930:	80 81       	ld	r24, Z
     932:	10 82       	st	Z, r1
     934:	ce 01       	movw	r24, r28
     936:	0e 94 1a 04 	call	0x834	; 0x834 <set_mob_rx_filter>
     93a:	f8 01       	movw	r30, r16
     93c:	d0 82       	st	Z, r13
     93e:	8c 2f       	mov	r24, r28
     940:	0e 94 92 03 	call	0x724	; 0x724 <enable_mob_interrupt>
     944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0x4b>
     946:	f8 01       	movw	r30, r16
     948:	10 82       	st	Z, r1
     94a:	21 96       	adiw	r28, 0x01	; 1
     94c:	cf 30       	cpi	r28, 0x0F	; 15
     94e:	d1 05       	cpc	r29, r1
     950:	61 f7       	brne	.-40     	; 0x92a <__stack+0x2b>
     952:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <msgs_av>
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	df 90       	pop	r13
     96a:	08 95       	ret

0000096c <InitCAN>:
     96c:	9b 01       	movw	r18, r22
     96e:	ac 01       	movw	r20, r24
     970:	63 e1       	ldi	r22, 0x13	; 19
     972:	74 e0       	ldi	r23, 0x04	; 4
     974:	8e e1       	ldi	r24, 0x1E	; 30
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 60 04 	call	0x8c0	; 0x8c0 <init_CAN>
     97c:	08 95       	ret

0000097e <PollAndReceiveCANPacket>:

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
	if(receivedPacket == NULL){
     984:	00 97       	sbiw	r24, 0x00	; 0
     986:	09 f4       	brne	.+2      	; 0x98a <PollAndReceiveCANPacket+0xc>
     988:	83 c0       	rjmp	.+262    	; 0xa90 <PollAndReceiveCANPacket+0x112>
	CANGCON = (1 << ENASTB);
}

/*Returns the number of CAN messages waiting*/
uint8_t inline CAN_msg_available(){
	return msgs_av;
     98a:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <msgs_av>
	if(receivedPacket == NULL){
		return 0x02;
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
     98e:	22 23       	and	r18, r18
     990:	09 f4       	brne	.+2      	; 0x994 <PollAndReceiveCANPacket+0x16>
     992:	81 c0       	rjmp	.+258    	; 0xa96 <PollAndReceiveCANPacket+0x118>

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     994:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     998:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <rxed_mobs>
     99c:	20 fd       	sbrc	r18, 0
     99e:	25 c0       	rjmp	.+74     	; 0x9ea <PollAndReceiveCANPacket+0x6c>
     9a0:	21 e0       	ldi	r18, 0x01	; 1
     9a2:	30 e0       	ldi	r19, 0x00	; 0

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     9a4:	ad ee       	ldi	r26, 0xED	; 237
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	12 2f       	mov	r17, r18
     9aa:	a9 01       	movw	r20, r18
     9ac:	42 95       	swap	r20
     9ae:	52 95       	swap	r21
     9b0:	50 7f       	andi	r21, 0xF0	; 240
     9b2:	54 27       	eor	r21, r20
     9b4:	40 7f       	andi	r20, 0xF0	; 240
     9b6:	54 27       	eor	r21, r20
     9b8:	4c 93       	st	X, r20
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     9ba:	23 fb       	bst	r18, 3
     9bc:	66 27       	eor	r22, r22
     9be:	60 f9       	bld	r22, 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	fb 01       	movw	r30, r22
     9c4:	e4 5a       	subi	r30, 0xA4	; 164
     9c6:	fd 4f       	sbci	r31, 0xFD	; 253
     9c8:	40 81       	ld	r20, Z
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	e2 2f       	mov	r30, r18
     9ce:	e7 70       	andi	r30, 0x07	; 7
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <PollAndReceiveCANPacket+0x58>
     9d2:	55 95       	asr	r21
     9d4:	47 95       	ror	r20
     9d6:	ea 95       	dec	r30
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <PollAndReceiveCANPacket+0x54>
     9da:	40 fd       	sbrc	r20, 0
     9dc:	07 c0       	rjmp	.+14     	; 0x9ec <PollAndReceiveCANPacket+0x6e>
     9de:	2f 5f       	subi	r18, 0xFF	; 255
     9e0:	3f 4f       	sbci	r19, 0xFF	; 255
	if(!CAN_msg_available()){
		return 0x01;
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
     9e2:	2f 30       	cpi	r18, 0x0F	; 15
     9e4:	31 05       	cpc	r19, r1
     9e6:	01 f7       	brne	.-64     	; 0x9a8 <PollAndReceiveCANPacket+0x2a>
     9e8:	59 c0       	rjmp	.+178    	; 0xa9c <PollAndReceiveCANPacket+0x11e>
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     9ea:	10 e0       	ldi	r17, 0x00	; 0
			break;
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
     9ec:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
     9f0:	2f 70       	andi	r18, 0x0F	; 15
     9f2:	fc 01       	movw	r30, r24
     9f4:	22 83       	std	Z+2, r18	; 0x02
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
     9f6:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     9fa:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
     9fe:	32 95       	swap	r19
     a00:	36 95       	lsr	r19
     a02:	37 70       	andi	r19, 0x07	; 7
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	44 0f       	add	r20, r20
     a08:	55 1f       	adc	r21, r21
     a0a:	44 0f       	add	r20, r20
     a0c:	55 1f       	adc	r21, r21
     a0e:	44 0f       	add	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	43 2b       	or	r20, r19
     a14:	51 83       	std	Z+1, r21	; 0x01
     a16:	40 83       	st	Z, r20
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
     a18:	22 23       	and	r18, r18
     a1a:	91 f0       	breq	.+36     	; 0xa40 <PollAndReceiveCANPacket+0xc2>
     a1c:	33 96       	adiw	r30, 0x03	; 3
     a1e:	21 50       	subi	r18, 0x01	; 1
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	2c 5f       	subi	r18, 0xFC	; 252
     a24:	3f 4f       	sbci	r19, 0xFF	; 255
     a26:	28 0f       	add	r18, r24
     a28:	39 1f       	adc	r19, r25
     a2a:	0b 96       	adiw	r24, 0x0b	; 11
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
     a2c:	aa ef       	ldi	r26, 0xFA	; 250
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	4c 91       	ld	r20, X
     a32:	41 93       	st	Z+, r20
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
     a34:	e2 17       	cp	r30, r18
     a36:	f3 07       	cpc	r31, r19
     a38:	19 f0       	breq	.+6      	; 0xa40 <PollAndReceiveCANPacket+0xc2>
     a3a:	8e 17       	cp	r24, r30
     a3c:	9f 07       	cpc	r25, r31
     a3e:	c1 f7       	brne	.-16     	; 0xa30 <PollAndReceiveCANPacket+0xb2>
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
	}
	//Atomically decrement the number of messages available
	cli();
     a40:	f8 94       	cli
	msgs_av--;
     a42:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <msgs_av>
     a46:	81 50       	subi	r24, 0x01	; 1
     a48:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <msgs_av>
	sei();
     a4c:	78 94       	sei
	/*Reset the MOb*/
	set_mob_rx_filter(mob);
     a4e:	81 2f       	mov	r24, r17
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 1a 04 	call	0x834	; 0x834 <set_mob_rx_filter>
	enable_mob_interrupt(mob);
     a56:	81 2f       	mov	r24, r17
     a58:	0e 94 92 03 	call	0x724	; 0x724 <enable_mob_interrupt>
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
     a5c:	13 fb       	bst	r17, 3
     a5e:	ff 27       	eor	r31, r31
     a60:	f0 f9       	bld	r31, 0
     a62:	cf 2f       	mov	r28, r31
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	d8 2f       	mov	r29, r24
     a68:	c4 5a       	subi	r28, 0xA4	; 164
     a6a:	dd 4f       	sbci	r29, 0xFD	; 253
     a6c:	28 81       	ld	r18, Y
     a6e:	17 70       	andi	r17, 0x07	; 7
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <PollAndReceiveCANPacket+0xfc>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	1a 95       	dec	r17
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <PollAndReceiveCANPacket+0xf8>
     a7e:	80 95       	com	r24
     a80:	82 23       	and	r24, r18
     a82:	88 83       	st	Y, r24
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
     a84:	80 e8       	ldi	r24, 0x80	; 128
     a86:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
	return 0;
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <PollAndReceiveCANPacket+0x122>
}

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
	if(receivedPacket == NULL){
		return 0x02;
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	05 c0       	rjmp	.+10     	; 0xaa0 <PollAndReceiveCANPacket+0x122>
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
		return 0x01;
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <PollAndReceiveCANPacket+0x122>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
	enable_mob_interrupt(mob);
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
	return 0;
    
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	08 95       	ret

00000aa8 <getLocalDeviceSerial>:

uint8_t getLocalDeviceSerial()
{
    /*Return the DIP switch value*/
    return devSer;
}
     aa8:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <devSer>
     aac:	08 95       	ret

00000aae <dump_packet>:

uint8_t get_dip_switch(){
	return (~PINA) & 0xF;
}

void dump_packet(CANPacket *p){
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	6c 01       	movw	r12, r24
	tprintf("-CAN MESSAGE-\n");
     ac0:	8e e4       	ldi	r24, 0x4E	; 78
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
	tprintf("ID=%X\n", p->id);
     acc:	f6 01       	movw	r30, r12
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	8f 93       	push	r24
     ad2:	80 81       	ld	r24, Z
     ad4:	8f 93       	push	r24
     ad6:	8d e5       	ldi	r24, 0x5D	; 93
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	9f 93       	push	r25
     adc:	8f 93       	push	r24
     ade:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
	tprintf("DLC=%d\n", p->dlc);
     ae2:	f6 01       	movw	r30, r12
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	1f 92       	push	r1
     ae8:	8f 93       	push	r24
     aea:	84 e6       	ldi	r24, 0x64	; 100
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
	tprintf("Data:");
     af6:	8c e6       	ldi	r24, 0x6C	; 108
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	9f 93       	push	r25
     afc:	8f 93       	push	r24
     afe:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
	for(int i = 0;i < p->dlc;i++){
     b02:	f6 01       	movw	r30, r12
     b04:	82 81       	ldd	r24, Z+2	; 0x02
     b06:	2d b7       	in	r18, 0x3d	; 61
     b08:	3e b7       	in	r19, 0x3e	; 62
     b0a:	24 5f       	subi	r18, 0xF4	; 244
     b0c:	3f 4f       	sbci	r19, 0xFF	; 255
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	3e bf       	out	0x3e, r19	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	2d bf       	out	0x3d, r18	; 61
     b18:	88 23       	and	r24, r24
     b1a:	e1 f0       	breq	.+56     	; 0xb54 <dump_packet+0xa6>
     b1c:	76 01       	movw	r14, r12
     b1e:	33 e0       	ldi	r19, 0x03	; 3
     b20:	e3 0e       	add	r14, r19
     b22:	f1 1c       	adc	r15, r1
     b24:	c0 e0       	ldi	r28, 0x00	; 0
     b26:	d0 e0       	ldi	r29, 0x00	; 0
		tprintf(" %X", p->data[i]);
     b28:	02 e7       	ldi	r16, 0x72	; 114
     b2a:	11 e0       	ldi	r17, 0x01	; 1
     b2c:	f7 01       	movw	r30, r14
     b2e:	81 91       	ld	r24, Z+
     b30:	7f 01       	movw	r14, r30
     b32:	1f 92       	push	r1
     b34:	8f 93       	push	r24
     b36:	1f 93       	push	r17
     b38:	0f 93       	push	r16
     b3a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
void dump_packet(CANPacket *p){
	tprintf("-CAN MESSAGE-\n");
	tprintf("ID=%X\n", p->id);
	tprintf("DLC=%d\n", p->dlc);
	tprintf("Data:");
	for(int i = 0;i < p->dlc;i++){
     b3e:	21 96       	adiw	r28, 0x01	; 1
     b40:	f6 01       	movw	r30, r12
     b42:	82 81       	ldd	r24, Z+2	; 0x02
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	c8 17       	cp	r28, r24
     b50:	d9 07       	cpc	r29, r25
     b52:	64 f3       	brlt	.-40     	; 0xb2c <dump_packet+0x7e>
		tprintf(" %X", p->data[i]);
	}
	tprintf("\n-END CAN MESSAGE-\n");
     b54:	86 e7       	ldi	r24, 0x76	; 118
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	9f 93       	push	r25
     b5a:	8f 93       	push	r24
     b5c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
}
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	cf 90       	pop	r12
     b74:	08 95       	ret

00000b76 <main>:

int main(){
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	2b 97       	sbiw	r28, 0x0b	; 11
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
	CANPacket m;
	DDRA = 0xF0;
     b8a:	80 ef       	ldi	r24, 0xF0	; 240
     b8c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xF0;
     b8e:	82 b9       	out	0x02, r24	; 2
	setup_timers();
     b90:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <setup_timers>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b94:	2f ef       	ldi	r18, 0xFF	; 255
     b96:	81 ee       	ldi	r24, 0xE1	; 225
     b98:	94 e0       	ldi	r25, 0x04	; 4
     b9a:	21 50       	subi	r18, 0x01	; 1
     b9c:	80 40       	sbci	r24, 0x00	; 0
     b9e:	90 40       	sbci	r25, 0x00	; 0
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <main+0x24>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <main+0x2e>
     ba4:	00 00       	nop
	_delay_ms(100);
	PORTA = 0;
     ba6:	12 b8       	out	0x02, r1	; 2
	set_LED(0, 3);
     ba8:	63 e0       	ldi	r22, 0x03	; 3
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
	sei();
     bb0:	78 94       	sei
	usart_init(19200); //Debug serial
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	7b e4       	ldi	r23, 0x4B	; 75
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <usart_init>
	set_LED(1, 3);
     bbe:	63 e0       	ldi	r22, 0x03	; 3
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
	delay_mS(666); //Delay so one can connect to debug serial
     bc6:	8a e9       	ldi	r24, 0x9A	; 154
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <delay_mS>
	uint16_t my_address = getLocalDeviceSerial();
     bce:	0e 94 54 05 	call	0xaa8	; 0xaa8 <getLocalDeviceSerial>
     bd2:	f8 2e       	mov	r15, r24
	tprintf("adr=%X\n", my_address);
     bd4:	c8 2e       	mov	r12, r24
     bd6:	d1 2c       	mov	r13, r1
     bd8:	1f 92       	push	r1
     bda:	8f 93       	push	r24
     bdc:	8a e8       	ldi	r24, 0x8A	; 138
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	9f 93       	push	r25
     be2:	8f 93       	push	r24
     be4:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
	delay_mS(250);
     be8:	8a ef       	ldi	r24, 0xFA	; 250
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <delay_mS>
	InitCAN(DEVICE_GROUP_MOTOR_CONTROL, my_address);
     bf0:	b6 01       	movw	r22, r12
     bf2:	84 e0       	ldi	r24, 0x04	; 4
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 b6 04 	call	0x96c	; 0x96c <InitCAN>
	set_LED(2, 3);
     bfa:	63 e0       	ldi	r22, 0x03	; 3
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
	init_encoder();
     c02:	0e 94 41 01 	call	0x282	; 0x282 <init_encoder>
	init_ADC();
     c06:	0e 94 69 00 	call	0xd2	; 0xd2 <init_ADC>
	do_board_specific_setup(my_address);
     c0a:	8f 2d       	mov	r24, r15
     c0c:	0e 94 aa 00 	call	0x154	; 0x154 <do_board_specific_setup>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     c10:	9f e0       	ldi	r25, 0x0F	; 15
     c12:	88 e1       	ldi	r24, 0x18	; 24
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	a8 95       	wdr
     c1a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	wdt_enable(WDTO_2S);
	init_motor();
     c24:	0e 94 3f 08 	call	0x107e	; 0x107e <init_motor>
	//enable_motor();
	delay_mS(500);
     c28:	84 ef       	ldi	r24, 0xF4	; 244
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <delay_mS>
	set_LED(0, 0);
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
	set_LED(1, 0);
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
	set_LED(3, 0);
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
	while(1){
		if(PollAndReceiveCANPacket(&m) == 0){
			set_LED(3, 3);
			update_LEDS(get_mS()/40);
     c50:	0f 2e       	mov	r0, r31
     c52:	f8 e2       	ldi	r31, 0x28	; 40
     c54:	cf 2e       	mov	r12, r31
     c56:	d1 2c       	mov	r13, r1
     c58:	e1 2c       	mov	r14, r1
     c5a:	f1 2c       	mov	r15, r1
     c5c:	f0 2d       	mov	r31, r0
	delay_mS(500);
	set_LED(0, 0);
	set_LED(1, 0);
	set_LED(3, 0);
	while(1){
		if(PollAndReceiveCANPacket(&m) == 0){
     c5e:	ce 01       	movw	r24, r28
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	0e 94 bf 04 	call	0x97e	; 0x97e <PollAndReceiveCANPacket>
     c66:	89 2b       	or	r24, r25
     c68:	c9 f4       	brne	.+50     	; 0xc9c <main+0x126>
			set_LED(3, 3);
     c6a:	63 e0       	ldi	r22, 0x03	; 3
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
			update_LEDS(get_mS()/40);
     c72:	0e 94 97 0c 	call	0x192e	; 0x192e <get_mS>
     c76:	a7 01       	movw	r20, r14
     c78:	96 01       	movw	r18, r12
     c7a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__udivmodsi4>
     c7e:	c9 01       	movw	r24, r18
     c80:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <update_LEDS>
			dump_packet(&m);
     c84:	ce 01       	movw	r24, r28
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	0e 94 57 05 	call	0xaae	; 0xaae <dump_packet>
			handle_CAN_message(&m);
     c8c:	ce 01       	movw	r24, r28
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	0e 94 67 06 	call	0xcce	; 0xcce <handle_CAN_message>
			set_LED(3, 0);
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	83 e0       	ldi	r24, 0x03	; 3
     c98:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
		}
		if(get_motor_mode() & MOTOR_MODE_ENABLED){
     c9c:	0e 94 a2 08 	call	0x1144	; 0x1144 <get_motor_mode>
     ca0:	80 ff       	sbrs	r24, 0
     ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <main+0x140>
			set_LED(2, 3);
     ca4:	63 e0       	ldi	r22, 0x03	; 3
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
			set_LED(1, 0);
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
     cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <main+0x150>
		} else {
			set_LED(1, 3);
     cb6:	63 e0       	ldi	r22, 0x03	; 3
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
			set_LED(2, 0);
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
		}
		motor_control_tick();
     cc6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <motor_control_tick>
		wdt_reset();
     cca:	a8 95       	wdr
	}
     ccc:	c8 cf       	rjmp	.-112    	; 0xc5e <main+0xe8>

00000cce <handle_CAN_message>:
#include "CANMotorUnit.h"

uint32_t ppjr = 1;

/*Handle a received CAN message*/
void handle_CAN_message(CANPacket *m){
     cce:	cf 92       	push	r12
     cd0:	df 92       	push	r13
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	ec 01       	movw	r28, r24
	tprintf("packet ID=%d\n", GetPacketID(m));
     cdc:	0e 94 16 03 	call	0x62c	; 0x62c <GetPacketID>
     ce0:	9f 93       	push	r25
     ce2:	8f 93       	push	r24
     ce4:	82 e9       	ldi	r24, 0x92	; 146
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	9f 93       	push	r25
     cea:	8f 93       	push	r24
     cec:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
	switch(GetPacketID(m)){
     cf0:	ce 01       	movw	r24, r28
     cf2:	0e 94 16 03 	call	0x62c	; 0x62c <GetPacketID>
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	8a 30       	cpi	r24, 0x0A	; 10
     d00:	91 05       	cpc	r25, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <handle_CAN_message+0x38>
     d04:	9e c0       	rjmp	.+316    	; 0xe42 <handle_CAN_message+0x174>
     d06:	5c f4       	brge	.+22     	; 0xd1e <handle_CAN_message+0x50>
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	91 05       	cpc	r25, r1
     d0c:	e1 f1       	breq	.+120    	; 0xd86 <handle_CAN_message+0xb8>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	91 05       	cpc	r25, r1
     d12:	09 f4       	brne	.+2      	; 0xd16 <handle_CAN_message+0x48>
     d14:	73 c0       	rjmp	.+230    	; 0xdfc <handle_CAN_message+0x12e>
     d16:	89 2b       	or	r24, r25
     d18:	09 f0       	breq	.+2      	; 0xd1c <handle_CAN_message+0x4e>
     d1a:	bb c0       	rjmp	.+374    	; 0xe92 <handle_CAN_message+0x1c4>
     d1c:	0c c0       	rjmp	.+24     	; 0xd36 <handle_CAN_message+0x68>
     d1e:	80 3f       	cpi	r24, 0xF0	; 240
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <handle_CAN_message+0x58>
     d24:	85 c0       	rjmp	.+266    	; 0xe30 <handle_CAN_message+0x162>
     d26:	8f 3f       	cpi	r24, 0xFF	; 255
     d28:	91 05       	cpc	r25, r1
     d2a:	09 f4       	brne	.+2      	; 0xd2e <handle_CAN_message+0x60>
     d2c:	96 c0       	rjmp	.+300    	; 0xe5a <handle_CAN_message+0x18c>
     d2e:	0c 97       	sbiw	r24, 0x0c	; 12
     d30:	09 f0       	breq	.+2      	; 0xd34 <handle_CAN_message+0x66>
     d32:	af c0       	rjmp	.+350    	; 0xe92 <handle_CAN_message+0x1c4>
     d34:	80 c0       	rjmp	.+256    	; 0xe36 <handle_CAN_message+0x168>
		case ID_MOTOR_UNIT_MODE_SEL:; //Set Mode
			uint8_t mode = GetModeFromPacket(m);
     d36:	ce 01       	movw	r24, r28
     d38:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <GetModeFromPacket>
     d3c:	c8 2f       	mov	r28, r24
			tprintf("mode set %d\n", mode);
     d3e:	1f 92       	push	r1
     d40:	8f 93       	push	r24
     d42:	80 ea       	ldi	r24, 0xA0	; 160
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
			if(mode == MOTOR_UNIT_MODE_PID){
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	c1 30       	cpi	r28, 0x01	; 1
     d58:	61 f4       	brne	.+24     	; 0xd72 <handle_CAN_message+0xa4>
				set_motor_mode(get_motor_mode() | MOTOR_MODE_PID);
     d5a:	0e 94 a2 08 	call	0x1144	; 0x1144 <get_motor_mode>
     d5e:	82 60       	ori	r24, 0x02	; 2
     d60:	0e 94 9f 08 	call	0x113e	; 0x113e <set_motor_mode>
				set_target_position(get_encoder_ticks());
     d64:	0e 94 2f 01 	call	0x25e	; 0x25e <get_encoder_ticks>
     d68:	0e 94 ae 07 	call	0xf5c	; 0xf5c <set_target_position>
				enable_motor();
     d6c:	0e 94 8b 08 	call	0x1116	; 0x1116 <enable_motor>
     d70:	b0 c0       	rjmp	.+352    	; 0xed2 <handle_CAN_message+0x204>
			} else if(mode == MOTOR_UNIT_MODE_PWM){
     d72:	c1 11       	cpse	r28, r1
     d74:	ae c0       	rjmp	.+348    	; 0xed2 <handle_CAN_message+0x204>
				set_motor_mode(get_motor_mode() & ~MOTOR_MODE_PID);
     d76:	0e 94 a2 08 	call	0x1144	; 0x1144 <get_motor_mode>
     d7a:	8d 7f       	andi	r24, 0xFD	; 253
     d7c:	0e 94 9f 08 	call	0x113e	; 0x113e <set_motor_mode>
				enable_motor();
     d80:	0e 94 8b 08 	call	0x1116	; 0x1116 <enable_motor>
     d84:	a6 c0       	rjmp	.+332    	; 0xed2 <handle_CAN_message+0x204>
			}
			break;
		case ID_MOTOR_UNIT_PWM_DIR_SET: //Set PWM/Direction
			tprintf("PWM from packet=%d\n", GetPWMFromPacket(m));
     d86:	ce 01       	movw	r24, r28
     d88:	0e 94 fd 02 	call	0x5fa	; 0x5fa <GetPWMFromPacket>
     d8c:	9f 93       	push	r25
     d8e:	8f 93       	push	r24
     d90:	7f 93       	push	r23
     d92:	6f 93       	push	r22
     d94:	8d ea       	ldi	r24, 0xAD	; 173
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
			if(!(get_motor_mode() & MOTOR_MODE_PID)){
     da0:	0e 94 a2 08 	call	0x1144	; 0x1144 <get_motor_mode>
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	81 fd       	sbrc	r24, 1
     db2:	8f c0       	rjmp	.+286    	; 0xed2 <handle_CAN_message+0x204>
				int16_t mp = GetPWMFromPacket(m) / 32;
     db4:	ce 01       	movw	r24, r28
     db6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <GetPWMFromPacket>
     dba:	99 23       	and	r25, r25
     dbc:	24 f4       	brge	.+8      	; 0xdc6 <handle_CAN_message+0xf8>
     dbe:	61 5e       	subi	r22, 0xE1	; 225
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	8f 4f       	sbci	r24, 0xFF	; 255
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	6b 01       	movw	r12, r22
     dc8:	7c 01       	movw	r14, r24
     dca:	68 94       	set
     dcc:	14 f8       	bld	r1, 4
     dce:	f5 94       	asr	r15
     dd0:	e7 94       	ror	r14
     dd2:	d7 94       	ror	r13
     dd4:	c7 94       	ror	r12
     dd6:	16 94       	lsr	r1
     dd8:	d1 f7       	brne	.-12     	; 0xdce <handle_CAN_message+0x100>
				tprintf("Setting PWM to %d (scaled)\n", mp);
     dda:	df 92       	push	r13
     ddc:	cf 92       	push	r12
     dde:	81 ec       	ldi	r24, 0xC1	; 193
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	9f 93       	push	r25
     de4:	8f 93       	push	r24
     de6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
				set_motor_power(mp);
     dea:	8c 2d       	mov	r24, r12
     dec:	9d 2d       	mov	r25, r13
     dee:	0e 94 b1 08 	call	0x1162	; 0x1162 <set_motor_power>
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	6b c0       	rjmp	.+214    	; 0xed2 <handle_CAN_message+0x204>
			}
			break;
		case ID_MOTOR_UNIT_PID_POS_TGT_SET: //Set angle + velocity
			set_target_position(((GetPIDTargetFromPacket(m) * ppjr) / 360LL) / 1000LL);
     dfc:	ce 01       	movw	r24, r28
     dfe:	0e 94 05 03 	call	0x60a	; 0x60a <GetPIDTargetFromPacket>
     e02:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e06:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e0a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     e0e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     e12:	a8 2f       	mov	r26, r24
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__muluhisi3>
     e1a:	20 e4       	ldi	r18, 0x40	; 64
     e1c:	3e e7       	ldi	r19, 0x7E	; 126
     e1e:	45 e0       	ldi	r20, 0x05	; 5
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__udivmodsi4>
     e26:	ca 01       	movw	r24, r20
     e28:	b9 01       	movw	r22, r18
     e2a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <set_target_position>
			//set_target_velocity(param2);
			break;
     e2e:	51 c0       	rjmp	.+162    	; 0xed2 <handle_CAN_message+0x204>
		case ID_ESTOP:
			disable_motor();
     e30:	0e 94 95 08 	call	0x112a	; 0x112a <disable_motor>
			break;
     e34:	4e c0       	rjmp	.+156    	; 0xed2 <handle_CAN_message+0x204>
		case ID_MOTOR_UNIT_ENC_INIT:
			set_encoder_ticks(0);
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	cb 01       	movw	r24, r22
     e3c:	0e 94 38 01 	call	0x270	; 0x270 <set_encoder_ticks>
			break;
     e40:	48 c0       	rjmp	.+144    	; 0xed2 <handle_CAN_message+0x204>
		case ID_MOTOR_UNIT_ENC_PPJR_SET:
			ppjr = GetEncoderPPJRFromPacket(m);
     e42:	ce 01       	movw	r24, r28
     e44:	0e 94 0e 03 	call	0x61c	; 0x61c <GetEncoderPPJRFromPacket>
     e48:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     e4c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e50:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     e54:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			break;
     e58:	3c c0       	rjmp	.+120    	; 0xed2 <handle_CAN_message+0x204>
			} else {
				DDRC &= ~2;
			}
			break;*/
		case 0xFF: /*error*/
			tprintf("Error\n");
     e5a:	8d ed       	ldi	r24, 0xDD	; 221
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	9f 93       	push	r25
     e60:	8f 93       	push	r24
     e62:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
			set_LED(0, 2);
     e66:	62 e0       	ldi	r22, 0x02	; 2
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
			update_LEDS(get_mS()/40);
     e6e:	0e 94 97 0c 	call	0x192e	; 0x192e <get_mS>
     e72:	28 e2       	ldi	r18, 0x28	; 40
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__udivmodsi4>
     e7e:	c9 01       	movw	r24, r18
     e80:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <update_LEDS>
			set_LED(0, 0);
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
			break;
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	20 c0       	rjmp	.+64     	; 0xed2 <handle_CAN_message+0x204>
			break;
		default:
			tprintf("Unknown CAN code %d\n", m->data[0]);
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	1f 92       	push	r1
     e96:	8f 93       	push	r24
     e98:	84 ee       	ldi	r24, 0xE4	; 228
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	9f 93       	push	r25
     e9e:	8f 93       	push	r24
     ea0:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
			set_LED(0, 2);
     ea4:	62 e0       	ldi	r22, 0x02	; 2
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
			update_LEDS(get_mS()/40);
     eac:	0e 94 97 0c 	call	0x192e	; 0x192e <get_mS>
     eb0:	28 e2       	ldi	r18, 0x28	; 40
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__udivmodsi4>
     ebc:	c9 01       	movw	r24, r18
     ebe:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <update_LEDS>
			set_LED(0, 0);
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
			break;
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
	}
}
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	cf 90       	pop	r12
     ede:	08 95       	ret

00000ee0 <set_motor_power_raw>:
}

/*Gets the motor maximum position*/
uint32_t get_motor_max_position(){
	return motor_max_pos;
}
     ee0:	81 15       	cp	r24, r1
     ee2:	24 e0       	ldi	r18, 0x04	; 4
     ee4:	92 07       	cpc	r25, r18
     ee6:	14 f0       	brlt	.+4      	; 0xeec <set_motor_power_raw+0xc>
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	93 e0       	ldi	r25, 0x03	; 3
     eec:	bc 01       	movw	r22, r24
     eee:	61 30       	cpi	r22, 0x01	; 1
     ef0:	8c ef       	ldi	r24, 0xFC	; 252
     ef2:	78 07       	cpc	r23, r24
     ef4:	14 f4       	brge	.+4      	; 0xefa <set_motor_power_raw+0x1a>
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	7c ef       	ldi	r23, 0xFC	; 252
     efa:	61 15       	cp	r22, r1
     efc:	71 05       	cpc	r23, r1
     efe:	21 f0       	breq	.+8      	; 0xf08 <set_motor_power_raw+0x28>
     f00:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <motor_mode>
     f04:	80 fd       	sbrc	r24, 0
     f06:	07 c0       	rjmp	.+14     	; 0xf16 <set_motor_power_raw+0x36>
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	0e 94 c7 0b 	call	0x178e	; 0x178e <write_PWM>
     f12:	73 98       	cbi	0x0e, 3	; 14
     f14:	08 95       	ret
     f16:	77 23       	and	r23, r23
     f18:	34 f4       	brge	.+12     	; 0xf26 <set_motor_power_raw+0x46>
     f1a:	72 99       	sbic	0x0e, 2	; 14
     f1c:	72 98       	cbi	0x0e, 2	; 14
     f1e:	71 95       	neg	r23
     f20:	61 95       	neg	r22
     f22:	71 09       	sbc	r23, r1
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <set_motor_power_raw+0x4a>
     f26:	72 9b       	sbis	0x0e, 2	; 14
     f28:	72 9a       	sbi	0x0e, 2	; 14
     f2a:	83 e0       	ldi	r24, 0x03	; 3
     f2c:	0e 94 c7 0b 	call	0x178e	; 0x178e <write_PWM>
     f30:	08 95       	ret

00000f32 <set_Kp>:
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	21 f0       	breq	.+8      	; 0xf3e <set_Kp+0xc>
     f36:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <Kp+0x1>
     f3a:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <Kp>
     f3e:	08 95       	ret

00000f40 <set_Ki>:
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	21 f0       	breq	.+8      	; 0xf4c <set_Ki+0xc>
     f44:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <Ki+0x1>
     f48:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <Ki>
     f4c:	08 95       	ret

00000f4e <set_Kd>:
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	21 f0       	breq	.+8      	; 0xf5a <set_Kd+0xc>
     f52:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <Kd+0x1>
     f56:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <Kd>
     f5a:	08 95       	ret

00000f5c <set_target_position>:
     f5c:	cf 92       	push	r12
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	6b 01       	movw	r12, r22
     f66:	7c 01       	movw	r14, r24
     f68:	ff 92       	push	r15
     f6a:	ef 92       	push	r14
     f6c:	df 92       	push	r13
     f6e:	6f 93       	push	r22
     f70:	89 ef       	ldi	r24, 0xF9	; 249
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	9f 93       	push	r25
     f76:	8f 93       	push	r24
     f78:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
     f7c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <motor_target_pos>
     f80:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <motor_target_pos+0x1>
     f84:	8c 19       	sub	r24, r12
     f86:	9d 09       	sbc	r25, r13
     f88:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <int_abs>
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	85 36       	cpi	r24, 0x65	; 101
     f9a:	91 05       	cpc	r25, r1
     f9c:	40 f0       	brcs	.+16     	; 0xfae <set_target_position+0x52>
     f9e:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <pos_i>
     fa2:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <pos_i+0x1>
     fa6:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <pos_i+0x2>
     faa:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pos_i+0x3>
     fae:	c0 92 6a 02 	sts	0x026A, r12	; 0x80026a <motor_target_pos>
     fb2:	d0 92 6b 02 	sts	0x026B, r13	; 0x80026b <motor_target_pos+0x1>
     fb6:	e0 92 6c 02 	sts	0x026C, r14	; 0x80026c <motor_target_pos+0x2>
     fba:	f0 92 6d 02 	sts	0x026D, r15	; 0x80026d <motor_target_pos+0x3>
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	df 90       	pop	r13
     fc4:	cf 90       	pop	r12
     fc6:	08 95       	ret

00000fc8 <set_target_velocity>:
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	ec 01       	movw	r28, r24
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	81 e1       	ldi	r24, 0x11	; 17
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	9f 93       	push	r25
     fd8:	8f 93       	push	r24
     fda:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
     fde:	d0 93 6f 02 	sts	0x026F, r29	; 0x80026f <motor_target_vel+0x1>
     fe2:	c0 93 6e 02 	sts	0x026E, r28	; 0x80026e <motor_target_vel>
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cd 37       	cpi	r28, 0x7D	; 125
     ff0:	d1 05       	cpc	r29, r1
     ff2:	c8 f4       	brcc	.+50     	; 0x1026 <set_target_velocity+0x5e>
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <slow>
     ffa:	8d e7       	ldi	r24, 0x7D	; 125
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	be 01       	movw	r22, r28
    1000:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__udivmodhi4>
    1004:	41 e0       	ldi	r20, 0x01	; 1
    1006:	9e 01       	movw	r18, r28
    1008:	36 95       	lsr	r19
    100a:	27 95       	ror	r18
    100c:	28 17       	cp	r18, r24
    100e:	39 07       	cpc	r19, r25
    1010:	08 f0       	brcs	.+2      	; 0x1014 <set_target_velocity+0x4c>
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	8d e7       	ldi	r24, 0x7D	; 125
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	be 01       	movw	r22, r28
    101a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__udivmodhi4>
    101e:	64 0f       	add	r22, r20
    1020:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <tgt_inc>
    1024:	15 c0       	rjmp	.+42     	; 0x1050 <set_target_velocity+0x88>
    1026:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <slow>
    102a:	9e 01       	movw	r18, r28
    102c:	af ea       	ldi	r26, 0xAF	; 175
    102e:	b7 e4       	ldi	r27, 0x47	; 71
    1030:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__umulhisi3>
    1034:	c8 1b       	sub	r28, r24
    1036:	d9 0b       	sbc	r29, r25
    1038:	d6 95       	lsr	r29
    103a:	c7 95       	ror	r28
    103c:	8c 0f       	add	r24, r28
    103e:	9d 1f       	adc	r25, r29
    1040:	92 95       	swap	r25
    1042:	82 95       	swap	r24
    1044:	8f 70       	andi	r24, 0x0F	; 15
    1046:	89 27       	eor	r24, r25
    1048:	9f 70       	andi	r25, 0x0F	; 15
    104a:	89 27       	eor	r24, r25
    104c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <tgt_inc>
    1050:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <tgt_inc>
    1054:	1f 92       	push	r1
    1056:	8f 93       	push	r24
    1058:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <slow>
    105c:	1f 92       	push	r1
    105e:	8f 93       	push	r24
    1060:	89 e2       	ldi	r24, 0x29	; 41
    1062:	92 e0       	ldi	r25, 0x02	; 2
    1064:	9f 93       	push	r25
    1066:	8f 93       	push	r24
    1068:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <init_motor>:
    107e:	73 98       	cbi	0x0e, 3	; 14
    1080:	6b 9a       	sbi	0x0d, 3	; 13
    1082:	6a 9a       	sbi	0x0d, 2	; 13
    1084:	72 9a       	sbi	0x0e, 2	; 14
    1086:	80 98       	cbi	0x10, 0	; 16
    1088:	74 9a       	sbi	0x0e, 4	; 14
    108a:	6d 9a       	sbi	0x0d, 5	; 13
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	8b b9       	out	0x0b, r24	; 11
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	94 e0       	ldi	r25, 0x04	; 4
    1094:	a0 e0       	ldi	r26, 0x00	; 0
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <motor_max_pos>
    109c:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <motor_max_pos+0x1>
    10a0:	a0 93 72 02 	sts	0x0272, r26	; 0x800272 <motor_max_pos+0x2>
    10a4:	b0 93 73 02 	sts	0x0273, r27	; 0x800273 <motor_max_pos+0x3>
    10a8:	88 e8       	ldi	r24, 0x88	; 136
    10aa:	93 e1       	ldi	r25, 0x13	; 19
    10ac:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <motor_max_current+0x1>
    10b0:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <motor_max_current>
    10b4:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <motor_target_pos>
    10b8:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <motor_target_pos+0x1>
    10bc:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <motor_target_pos+0x2>
    10c0:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <motor_target_pos+0x3>
    10c4:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <pid_runs+0x1>
    10c8:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <pid_runs>
    10cc:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <motor_power+0x1>
    10d0:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <motor_power>
    10d4:	8c e8       	ldi	r24, 0x8C	; 140
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <Kp+0x1>
    10dc:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <Kp>
    10e0:	84 e1       	ldi	r24, 0x14	; 20
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <Ki+0x1>
    10e8:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <Ki>
    10ec:	84 e6       	ldi	r24, 0x64	; 100
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <Kd+0x1>
    10f4:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <Kd>
    10f8:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <pid_target>
    10fc:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <pid_target+0x1>
    1100:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <pid_target+0x2>
    1104:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <pid_target+0x3>
    1108:	8a ef       	ldi	r24, 0xFA	; 250
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_target_velocity>
    1110:	0e 94 41 01 	call	0x282	; 0x282 <init_encoder>
    1114:	08 95       	ret

00001116 <enable_motor>:
    1116:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <motor_mode>
    111a:	81 60       	ori	r24, 0x01	; 1
    111c:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <motor_mode>
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
    1128:	08 95       	ret

0000112a <disable_motor>:
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 70 07 	call	0xee0	; 0xee0 <set_motor_power_raw>
    1132:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <motor_mode>
    1136:	8e 7f       	andi	r24, 0xFE	; 254
    1138:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <motor_mode>
    113c:	08 95       	ret

0000113e <set_motor_mode>:
    113e:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <motor_mode>
    1142:	08 95       	ret

00001144 <get_motor_mode>:
    1144:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <motor_mode>
    1148:	08 95       	ret

0000114a <get_motor_limit_switch_state>:
    114a:	29 b1       	in	r18, 0x09	; 9
    114c:	86 b1       	in	r24, 0x06	; 6
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	80 95       	com	r24
    1152:	90 95       	com	r25
    1154:	86 95       	lsr	r24
    1156:	81 70       	andi	r24, 0x01	; 1
    1158:	92 2f       	mov	r25, r18
    115a:	90 95       	com	r25
    115c:	92 70       	andi	r25, 0x02	; 2
    115e:	89 2b       	or	r24, r25
    1160:	08 95       	ret

00001162 <set_motor_power>:
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	ec 01       	movw	r28, r24
    1168:	0e 94 97 0c 	call	0x192e	; 0x192e <get_mS>
    116c:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <last_set>
    1170:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <last_set+0x1>
    1174:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <last_set+0x2>
    1178:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <last_set+0x3>
    117c:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <motor_mode>
    1180:	80 fd       	sbrc	r24, 0
    1182:	05 c0       	rjmp	.+10     	; 0x118e <set_motor_power+0x2c>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 70 07 	call	0xee0	; 0xee0 <set_motor_power_raw>
    118c:	2d c0       	rjmp	.+90     	; 0x11e8 <set_motor_power+0x86>
    118e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <reverse>
    1192:	88 23       	and	r24, r24
    1194:	19 f0       	breq	.+6      	; 0x119c <set_motor_power+0x3a>
    1196:	d1 95       	neg	r29
    1198:	c1 95       	neg	r28
    119a:	d1 09       	sbc	r29, r1
    119c:	d0 93 61 02 	sts	0x0261, r29	; 0x800261 <motor_power+0x1>
    11a0:	c0 93 60 02 	sts	0x0260, r28	; 0x800260 <motor_power>
    11a4:	0e 94 a5 08 	call	0x114a	; 0x114a <get_motor_limit_switch_state>
    11a8:	80 ff       	sbrs	r24, 0
    11aa:	0b c0       	rjmp	.+22     	; 0x11c2 <set_motor_power+0x60>
    11ac:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <motor_power>
    11b0:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <motor_power+0x1>
    11b4:	33 23       	and	r19, r19
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <set_motor_power+0x60>
    11b8:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <motor_power+0x1>
    11bc:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <motor_power>
    11c0:	0d c0       	rjmp	.+26     	; 0x11dc <set_motor_power+0x7a>
    11c2:	81 ff       	sbrs	r24, 1
    11c4:	0b c0       	rjmp	.+22     	; 0x11dc <set_motor_power+0x7a>
    11c6:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <motor_power>
    11ca:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <motor_power+0x1>
    11ce:	18 16       	cp	r1, r24
    11d0:	19 06       	cpc	r1, r25
    11d2:	24 f4       	brge	.+8      	; 0x11dc <set_motor_power+0x7a>
    11d4:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <motor_power+0x1>
    11d8:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <motor_power>
    11dc:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <motor_power>
    11e0:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <motor_power+0x1>
    11e4:	0e 94 70 07 	call	0xee0	; 0xee0 <set_motor_power_raw>
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <motor_control_tick>:
    11ee:	4f 92       	push	r4
    11f0:	5f 92       	push	r5
    11f2:	6f 92       	push	r6
    11f4:	7f 92       	push	r7
    11f6:	8f 92       	push	r8
    11f8:	9f 92       	push	r9
    11fa:	af 92       	push	r10
    11fc:	bf 92       	push	r11
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	00 d0       	rcall	.+0      	; 0x1210 <motor_control_tick+0x22>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <motor_control_tick+0x24>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <motor_mode>
    121a:	81 fd       	sbrc	r24, 1
    121c:	9d c2       	rjmp	.+1338   	; 0x1758 <motor_control_tick+0x56a>
    121e:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <PID_due>
    1222:	0e 94 2f 01 	call	0x25e	; 0x25e <get_encoder_ticks>
    1226:	6b 01       	movw	r12, r22
    1228:	7c 01       	movw	r14, r24
    122a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
    122e:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <__data_end+0x1>
    1232:	a0 91 4c 02 	lds	r26, 0x024C	; 0x80024c <__data_end+0x2>
    1236:	b0 91 4d 02 	lds	r27, 0x024D	; 0x80024d <__data_end+0x3>
    123a:	c8 16       	cp	r12, r24
    123c:	d9 06       	cpc	r13, r25
    123e:	ea 06       	cpc	r14, r26
    1240:	fb 06       	cpc	r15, r27
    1242:	c1 f0       	breq	.+48     	; 0x1274 <motor_control_tick+0x86>
    1244:	ff 92       	push	r15
    1246:	ef 92       	push	r14
    1248:	df 92       	push	r13
    124a:	cf 92       	push	r12
    124c:	8d e0       	ldi	r24, 0x0D	; 13
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	9f 93       	push	r25
    1252:	8f 93       	push	r24
    1254:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
    1258:	c0 92 4a 02 	sts	0x024A, r12	; 0x80024a <__data_end>
    125c:	d0 92 4b 02 	sts	0x024B, r13	; 0x80024b <__data_end+0x1>
    1260:	e0 92 4c 02 	sts	0x024C, r14	; 0x80024c <__data_end+0x2>
    1264:	f0 92 4d 02 	sts	0x024D, r15	; 0x80024d <__data_end+0x3>
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0e 94 97 0c 	call	0x192e	; 0x192e <get_mS>
    1278:	c0 90 7b 02 	lds	r12, 0x027B	; 0x80027b <last_set>
    127c:	d0 90 7c 02 	lds	r13, 0x027C	; 0x80027c <last_set+0x1>
    1280:	e0 90 7d 02 	lds	r14, 0x027D	; 0x80027d <last_set+0x2>
    1284:	f0 90 7e 02 	lds	r15, 0x027E	; 0x80027e <last_set+0x3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	8c 19       	sub	r24, r12
    128e:	9d 09       	sbc	r25, r13
    1290:	ae 09       	sbc	r26, r14
    1292:	bf 09       	sbc	r27, r15
    1294:	83 3e       	cpi	r24, 0xE3	; 227
    1296:	94 40       	sbci	r25, 0x04	; 4
    1298:	a1 05       	cpc	r26, r1
    129a:	b1 05       	cpc	r27, r1
    129c:	20 f0       	brcs	.+8      	; 0x12a6 <motor_control_tick+0xb8>
    129e:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <motor_power+0x1>
    12a2:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <motor_power>
    12a6:	64 99       	sbic	0x0c, 4	; 12
    12a8:	0a c0       	rjmp	.+20     	; 0x12be <motor_control_tick+0xd0>
    12aa:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <motor_power+0x1>
    12ae:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <motor_power>
    12b2:	0e 94 95 08 	call	0x112a	; 0x112a <disable_motor>
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <set_LED>
    12be:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <motor_mode>
    12c2:	81 ff       	sbrs	r24, 1
    12c4:	f9 c1       	rjmp	.+1010   	; 0x16b8 <motor_control_tick+0x4ca>
    12c6:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <PID_due>
    12ca:	88 23       	and	r24, r24
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <motor_control_tick+0xe2>
    12ce:	f4 c1       	rjmp	.+1000   	; 0x16b8 <motor_control_tick+0x4ca>
    12d0:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <slow>
    12d4:	88 23       	and	r24, r24
    12d6:	09 f4       	brne	.+2      	; 0x12da <motor_control_tick+0xec>
    12d8:	6f c0       	rjmp	.+222    	; 0x13b8 <motor_control_tick+0x1ca>
    12da:	60 91 81 02 	lds	r22, 0x0281	; 0x800281 <tgt_inc>
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <pid_runs>
    12e4:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <pid_runs+0x1>
    12e8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__udivmodhi4>
    12ec:	89 2b       	or	r24, r25
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <motor_control_tick+0x104>
    12f0:	c6 c0       	rjmp	.+396    	; 0x147e <motor_control_tick+0x290>
    12f2:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <motor_target_pos>
    12f6:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <motor_target_pos+0x1>
    12fa:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <motor_target_pos+0x2>
    12fe:	b0 91 6d 02 	lds	r27, 0x026D	; 0x80026d <motor_target_pos+0x3>
    1302:	40 91 76 02 	lds	r20, 0x0276	; 0x800276 <pid_target>
    1306:	50 91 77 02 	lds	r21, 0x0277	; 0x800277 <pid_target+0x1>
    130a:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <pid_target+0x2>
    130e:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <pid_target+0x3>
    1312:	48 17       	cp	r20, r24
    1314:	59 07       	cpc	r21, r25
    1316:	6a 07       	cpc	r22, r26
    1318:	7b 07       	cpc	r23, r27
    131a:	2c f5       	brge	.+74     	; 0x1366 <motor_control_tick+0x178>
    131c:	7c 01       	movw	r14, r24
    131e:	8d 01       	movw	r16, r26
    1320:	e4 1a       	sub	r14, r20
    1322:	f5 0a       	sbc	r15, r21
    1324:	06 0b       	sbc	r16, r22
    1326:	17 0b       	sbc	r17, r23
    1328:	a8 01       	movw	r20, r16
    132a:	97 01       	movw	r18, r14
    132c:	65 e0       	ldi	r22, 0x05	; 5
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <min>
    1338:	c0 90 76 02 	lds	r12, 0x0276	; 0x800276 <pid_target>
    133c:	d0 90 77 02 	lds	r13, 0x0277	; 0x800277 <pid_target+0x1>
    1340:	e0 90 78 02 	lds	r14, 0x0278	; 0x800278 <pid_target+0x2>
    1344:	f0 90 79 02 	lds	r15, 0x0279	; 0x800279 <pid_target+0x3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	8c 0d       	add	r24, r12
    134e:	9d 1d       	adc	r25, r13
    1350:	ae 1d       	adc	r26, r14
    1352:	bf 1d       	adc	r27, r15
    1354:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <pid_target>
    1358:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <pid_target+0x1>
    135c:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <pid_target+0x2>
    1360:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <pid_target+0x3>
    1364:	8c c0       	rjmp	.+280    	; 0x147e <motor_control_tick+0x290>
    1366:	84 17       	cp	r24, r20
    1368:	95 07       	cpc	r25, r21
    136a:	a6 07       	cpc	r26, r22
    136c:	b7 07       	cpc	r27, r23
    136e:	0c f0       	brlt	.+2      	; 0x1372 <motor_control_tick+0x184>
    1370:	86 c0       	rjmp	.+268    	; 0x147e <motor_control_tick+0x290>
    1372:	9a 01       	movw	r18, r20
    1374:	ab 01       	movw	r20, r22
    1376:	28 1b       	sub	r18, r24
    1378:	39 0b       	sbc	r19, r25
    137a:	4a 0b       	sbc	r20, r26
    137c:	5b 0b       	sbc	r21, r27
    137e:	65 e0       	ldi	r22, 0x05	; 5
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <min>
    138a:	c0 90 76 02 	lds	r12, 0x0276	; 0x800276 <pid_target>
    138e:	d0 90 77 02 	lds	r13, 0x0277	; 0x800277 <pid_target+0x1>
    1392:	e0 90 78 02 	lds	r14, 0x0278	; 0x800278 <pid_target+0x2>
    1396:	f0 90 79 02 	lds	r15, 0x0279	; 0x800279 <pid_target+0x3>
    139a:	97 01       	movw	r18, r14
    139c:	86 01       	movw	r16, r12
    139e:	06 1b       	sub	r16, r22
    13a0:	17 0b       	sbc	r17, r23
    13a2:	28 0b       	sbc	r18, r24
    13a4:	39 0b       	sbc	r19, r25
    13a6:	00 93 76 02 	sts	0x0276, r16	; 0x800276 <pid_target>
    13aa:	10 93 77 02 	sts	0x0277, r17	; 0x800277 <pid_target+0x1>
    13ae:	20 93 78 02 	sts	0x0278, r18	; 0x800278 <pid_target+0x2>
    13b2:	30 93 79 02 	sts	0x0279, r19	; 0x800279 <pid_target+0x3>
    13b6:	63 c0       	rjmp	.+198    	; 0x147e <motor_control_tick+0x290>
    13b8:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <motor_target_pos>
    13bc:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <motor_target_pos+0x1>
    13c0:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <motor_target_pos+0x2>
    13c4:	b0 91 6d 02 	lds	r27, 0x026D	; 0x80026d <motor_target_pos+0x3>
    13c8:	40 91 76 02 	lds	r20, 0x0276	; 0x800276 <pid_target>
    13cc:	50 91 77 02 	lds	r21, 0x0277	; 0x800277 <pid_target+0x1>
    13d0:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <pid_target+0x2>
    13d4:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <pid_target+0x3>
    13d8:	48 17       	cp	r20, r24
    13da:	59 07       	cpc	r21, r25
    13dc:	6a 07       	cpc	r22, r26
    13de:	7b 07       	cpc	r23, r27
    13e0:	34 f5       	brge	.+76     	; 0x142e <motor_control_tick+0x240>
    13e2:	7c 01       	movw	r14, r24
    13e4:	8d 01       	movw	r16, r26
    13e6:	e4 1a       	sub	r14, r20
    13e8:	f5 0a       	sbc	r15, r21
    13ea:	06 0b       	sbc	r16, r22
    13ec:	17 0b       	sbc	r17, r23
    13ee:	a8 01       	movw	r20, r16
    13f0:	97 01       	movw	r18, r14
    13f2:	60 91 81 02 	lds	r22, 0x0281	; 0x800281 <tgt_inc>
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <min>
    1400:	c0 90 76 02 	lds	r12, 0x0276	; 0x800276 <pid_target>
    1404:	d0 90 77 02 	lds	r13, 0x0277	; 0x800277 <pid_target+0x1>
    1408:	e0 90 78 02 	lds	r14, 0x0278	; 0x800278 <pid_target+0x2>
    140c:	f0 90 79 02 	lds	r15, 0x0279	; 0x800279 <pid_target+0x3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	8c 0d       	add	r24, r12
    1416:	9d 1d       	adc	r25, r13
    1418:	ae 1d       	adc	r26, r14
    141a:	bf 1d       	adc	r27, r15
    141c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <pid_target>
    1420:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <pid_target+0x1>
    1424:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <pid_target+0x2>
    1428:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <pid_target+0x3>
    142c:	28 c0       	rjmp	.+80     	; 0x147e <motor_control_tick+0x290>
    142e:	84 17       	cp	r24, r20
    1430:	95 07       	cpc	r25, r21
    1432:	a6 07       	cpc	r26, r22
    1434:	b7 07       	cpc	r27, r23
    1436:	1c f5       	brge	.+70     	; 0x147e <motor_control_tick+0x290>
    1438:	9a 01       	movw	r18, r20
    143a:	ab 01       	movw	r20, r22
    143c:	28 1b       	sub	r18, r24
    143e:	39 0b       	sbc	r19, r25
    1440:	4a 0b       	sbc	r20, r26
    1442:	5b 0b       	sbc	r21, r27
    1444:	60 91 81 02 	lds	r22, 0x0281	; 0x800281 <tgt_inc>
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <min>
    1452:	c0 90 76 02 	lds	r12, 0x0276	; 0x800276 <pid_target>
    1456:	d0 90 77 02 	lds	r13, 0x0277	; 0x800277 <pid_target+0x1>
    145a:	e0 90 78 02 	lds	r14, 0x0278	; 0x800278 <pid_target+0x2>
    145e:	f0 90 79 02 	lds	r15, 0x0279	; 0x800279 <pid_target+0x3>
    1462:	97 01       	movw	r18, r14
    1464:	86 01       	movw	r16, r12
    1466:	06 1b       	sub	r16, r22
    1468:	17 0b       	sbc	r17, r23
    146a:	28 0b       	sbc	r18, r24
    146c:	39 0b       	sbc	r19, r25
    146e:	00 93 76 02 	sts	0x0276, r16	; 0x800276 <pid_target>
    1472:	10 93 77 02 	sts	0x0277, r17	; 0x800277 <pid_target+0x1>
    1476:	20 93 78 02 	sts	0x0278, r18	; 0x800278 <pid_target+0x2>
    147a:	30 93 79 02 	sts	0x0279, r19	; 0x800279 <pid_target+0x3>
    147e:	0e 94 2f 01 	call	0x25e	; 0x25e <get_encoder_ticks>
    1482:	4b 01       	movw	r8, r22
    1484:	5c 01       	movw	r10, r24
    1486:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <pid_target>
    148a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <pid_target+0x1>
    148e:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <pid_target+0x2>
    1492:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <pid_target+0x3>
    1496:	75 01       	movw	r14, r10
    1498:	64 01       	movw	r12, r8
    149a:	c8 1a       	sub	r12, r24
    149c:	d9 0a       	sbc	r13, r25
    149e:	ea 0a       	sbc	r14, r26
    14a0:	fb 0a       	sbc	r15, r27
    14a2:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <last_pos_err>
    14a6:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <last_pos_err+0x1>
    14aa:	40 91 8c 02 	lds	r20, 0x028C	; 0x80028c <last_pos_err+0x2>
    14ae:	50 91 8d 02 	lds	r21, 0x028D	; 0x80028d <last_pos_err+0x3>
    14b2:	29 83       	std	Y+1, r18	; 0x01
    14b4:	3a 83       	std	Y+2, r19	; 0x02
    14b6:	4b 83       	std	Y+3, r20	; 0x03
    14b8:	5c 83       	std	Y+4, r21	; 0x04
    14ba:	c0 92 8a 02 	sts	0x028A, r12	; 0x80028a <last_pos_err>
    14be:	d0 92 8b 02 	sts	0x028B, r13	; 0x80028b <last_pos_err+0x1>
    14c2:	e0 92 8c 02 	sts	0x028C, r14	; 0x80028c <last_pos_err+0x2>
    14c6:	f0 92 8d 02 	sts	0x028D, r15	; 0x80028d <last_pos_err+0x3>
    14ca:	c6 01       	movw	r24, r12
    14cc:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <int_abs>
    14d0:	05 97       	sbiw	r24, 0x05	; 5
    14d2:	a0 f0       	brcs	.+40     	; 0x14fc <motor_control_tick+0x30e>
    14d4:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <pos_i>
    14d8:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <pos_i+0x1>
    14dc:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <pos_i+0x2>
    14e0:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <pos_i+0x3>
    14e4:	8c 0d       	add	r24, r12
    14e6:	9d 1d       	adc	r25, r13
    14e8:	ae 1d       	adc	r26, r14
    14ea:	bf 1d       	adc	r27, r15
    14ec:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <pos_i>
    14f0:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <pos_i+0x1>
    14f4:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <pos_i+0x2>
    14f8:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <pos_i+0x3>
    14fc:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <motor_target_pos>
    1500:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <motor_target_pos+0x1>
    1504:	a4 01       	movw	r20, r8
    1506:	48 1b       	sub	r20, r24
    1508:	59 0b       	sbc	r21, r25
    150a:	ca 01       	movw	r24, r20
    150c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <int_abs>
    1510:	04 97       	sbiw	r24, 0x04	; 4
    1512:	28 f4       	brcc	.+10     	; 0x151e <motor_control_tick+0x330>
    1514:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <motor_power+0x1>
    1518:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <motor_power>
    151c:	90 c0       	rjmp	.+288    	; 0x163e <motor_control_tick+0x450>
    151e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <pos_i>
    1522:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <pos_i+0x1>
    1526:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <pos_i+0x2>
    152a:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <pos_i+0x3>
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	53 e0       	ldi	r21, 0x03	; 3
    1532:	95 07       	cpc	r25, r21
    1534:	a1 05       	cpc	r26, r1
    1536:	b1 05       	cpc	r27, r1
    1538:	6c f0       	brlt	.+26     	; 0x1554 <motor_control_tick+0x366>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	93 e0       	ldi	r25, 0x03	; 3
    153e:	a0 e0       	ldi	r26, 0x00	; 0
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <pos_i>
    1546:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <pos_i+0x1>
    154a:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <pos_i+0x2>
    154e:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <pos_i+0x3>
    1552:	11 c0       	rjmp	.+34     	; 0x1576 <motor_control_tick+0x388>
    1554:	81 15       	cp	r24, r1
    1556:	9d 4f       	sbci	r25, 0xFD	; 253
    1558:	af 4f       	sbci	r26, 0xFF	; 255
    155a:	bf 4f       	sbci	r27, 0xFF	; 255
    155c:	64 f4       	brge	.+24     	; 0x1576 <motor_control_tick+0x388>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	9d ef       	ldi	r25, 0xFD	; 253
    1562:	af ef       	ldi	r26, 0xFF	; 255
    1564:	bf ef       	ldi	r27, 0xFF	; 255
    1566:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <pos_i>
    156a:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <pos_i+0x1>
    156e:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <pos_i+0x2>
    1572:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <pos_i+0x3>
    1576:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <Ki>
    157a:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <Ki+0x1>
    157e:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <pos_i>
    1582:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <pos_i+0x1>
    1586:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <pos_i+0x2>
    158a:	50 91 69 02 	lds	r21, 0x0269	; 0x800269 <pos_i+0x3>
    158e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__muluhisi3>
    1592:	24 e1       	ldi	r18, 0x14	; 20
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__divmodsi4>
    159e:	29 01       	movw	r4, r18
    15a0:	3a 01       	movw	r6, r20
    15a2:	a0 91 84 02 	lds	r26, 0x0284	; 0x800284 <Kp>
    15a6:	b0 91 85 02 	lds	r27, 0x0285	; 0x800285 <Kp+0x1>
    15aa:	a7 01       	movw	r20, r14
    15ac:	96 01       	movw	r18, r12
    15ae:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__muluhisi3>
    15b2:	24 e1       	ldi	r18, 0x14	; 20
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__divmodsi4>
    15be:	42 0e       	add	r4, r18
    15c0:	53 1e       	adc	r5, r19
    15c2:	64 1e       	adc	r6, r20
    15c4:	75 1e       	adc	r7, r21
    15c6:	a7 01       	movw	r20, r14
    15c8:	96 01       	movw	r18, r12
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	ab 81       	ldd	r26, Y+3	; 0x03
    15d0:	bc 81       	ldd	r27, Y+4	; 0x04
    15d2:	28 1b       	sub	r18, r24
    15d4:	39 0b       	sbc	r19, r25
    15d6:	4a 0b       	sbc	r20, r26
    15d8:	5b 0b       	sbc	r21, r27
    15da:	a0 91 82 02 	lds	r26, 0x0282	; 0x800282 <Kd>
    15de:	b0 91 83 02 	lds	r27, 0x0283	; 0x800283 <Kd+0x1>
    15e2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__muluhisi3>
    15e6:	24 e1       	ldi	r18, 0x14	; 20
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__divmodsi4>
    15f2:	42 0e       	add	r4, r18
    15f4:	53 1e       	adc	r5, r19
    15f6:	64 1e       	adc	r6, r20
    15f8:	75 1e       	adc	r7, r21
    15fa:	91 e8       	ldi	r25, 0x81	; 129
    15fc:	49 16       	cp	r4, r25
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	59 06       	cpc	r5, r25
    1602:	61 04       	cpc	r6, r1
    1604:	71 04       	cpc	r7, r1
    1606:	34 f0       	brlt	.+12     	; 0x1614 <motor_control_tick+0x426>
    1608:	41 2c       	mov	r4, r1
    160a:	51 2c       	mov	r5, r1
    160c:	32 01       	movw	r6, r4
    160e:	68 94       	set
    1610:	47 f8       	bld	r4, 7
    1612:	53 94       	inc	r5
    1614:	a0 e8       	ldi	r26, 0x80	; 128
    1616:	4a 16       	cp	r4, r26
    1618:	ae ef       	ldi	r26, 0xFE	; 254
    161a:	5a 06       	cpc	r5, r26
    161c:	af ef       	ldi	r26, 0xFF	; 255
    161e:	6a 06       	cpc	r6, r26
    1620:	7a 06       	cpc	r7, r26
    1622:	4c f4       	brge	.+18     	; 0x1636 <motor_control_tick+0x448>
    1624:	0f 2e       	mov	r0, r31
    1626:	f0 e8       	ldi	r31, 0x80	; 128
    1628:	4f 2e       	mov	r4, r31
    162a:	fe ef       	ldi	r31, 0xFE	; 254
    162c:	5f 2e       	mov	r5, r31
    162e:	66 24       	eor	r6, r6
    1630:	6a 94       	dec	r6
    1632:	76 2c       	mov	r7, r6
    1634:	f0 2d       	mov	r31, r0
    1636:	50 92 61 02 	sts	0x0261, r5	; 0x800261 <motor_power+0x1>
    163a:	40 92 60 02 	sts	0x0260, r4	; 0x800260 <motor_power>
    163e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <av>
    1642:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <av+0x1>
    1646:	9c 01       	movw	r18, r24
    1648:	22 0f       	add	r18, r18
    164a:	33 1f       	adc	r19, r19
    164c:	22 0f       	add	r18, r18
    164e:	33 1f       	adc	r19, r19
    1650:	22 0f       	add	r18, r18
    1652:	33 1f       	adc	r19, r19
    1654:	82 0f       	add	r24, r18
    1656:	93 1f       	adc	r25, r19
    1658:	6a e0       	ldi	r22, 0x0A	; 10
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__divmodhi4>
    1660:	7b 01       	movw	r14, r22
    1662:	0e 94 79 01 	call	0x2f2	; 0x2f2 <get_encoder_velocity>
    1666:	6a e0       	ldi	r22, 0x0A	; 10
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__divmodhi4>
    166e:	e6 0e       	add	r14, r22
    1670:	f7 1e       	adc	r15, r23
    1672:	f0 92 75 02 	sts	0x0275, r15	; 0x800275 <av+0x1>
    1676:	e0 92 74 02 	sts	0x0274, r14	; 0x800274 <av>
    167a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <motor_power+0x1>
    167e:	8f 93       	push	r24
    1680:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <motor_power>
    1684:	8f 93       	push	r24
    1686:	9f 92       	push	r9
    1688:	8f 92       	push	r8
    168a:	82 e4       	ldi	r24, 0x42	; 66
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	9f 93       	push	r25
    1690:	8f 93       	push	r24
    1692:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <tprintf>
    1696:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <pid_runs>
    169a:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <pid_runs+0x1>
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <pid_runs+0x1>
    16a4:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <pid_runs>
    16a8:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <PID_due>
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0e 94 a5 08 	call	0x114a	; 0x114a <get_motor_limit_switch_state>
    16bc:	f8 2e       	mov	r15, r24
    16be:	80 ff       	sbrs	r24, 0
    16c0:	27 c0       	rjmp	.+78     	; 0x1710 <motor_control_tick+0x522>
    16c2:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <motor_mode>
    16c6:	82 ff       	sbrs	r24, 2
    16c8:	03 c0       	rjmp	.+6      	; 0x16d0 <motor_control_tick+0x4e2>
    16ca:	8b 7f       	andi	r24, 0xFB	; 251
    16cc:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <motor_mode>
    16d0:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <motor_target_pos>
    16d4:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <motor_target_pos+0x1>
    16d8:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <motor_target_pos+0x2>
    16dc:	b0 91 6d 02 	lds	r27, 0x026D	; 0x80026d <motor_target_pos+0x3>
    16e0:	bb 23       	and	r27, r27
    16e2:	44 f4       	brge	.+16     	; 0x16f4 <motor_control_tick+0x506>
    16e4:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <motor_target_pos>
    16e8:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <motor_target_pos+0x1>
    16ec:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <motor_target_pos+0x2>
    16f0:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <motor_target_pos+0x3>
    16f4:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <motor_power>
    16f8:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <motor_power+0x1>
    16fc:	99 23       	and	r25, r25
    16fe:	44 f4       	brge	.+16     	; 0x1710 <motor_control_tick+0x522>
    1700:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <motor_power+0x1>
    1704:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <motor_power>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 70 07 	call	0xee0	; 0xee0 <set_motor_power_raw>
    1710:	f1 fe       	sbrs	r15, 1
    1712:	18 c0       	rjmp	.+48     	; 0x1744 <motor_control_tick+0x556>
    1714:	0e 94 60 01 	call	0x2c0	; 0x2c0 <reset_encoder>
    1718:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <motor_mode>
    171c:	82 ff       	sbrs	r24, 2
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <motor_control_tick+0x538>
    1720:	8b 7f       	andi	r24, 0xFB	; 251
    1722:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <motor_mode>
    1726:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <motor_power>
    172a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <motor_power+0x1>
    172e:	18 16       	cp	r1, r24
    1730:	19 06       	cpc	r1, r25
    1732:	44 f4       	brge	.+16     	; 0x1744 <motor_control_tick+0x556>
    1734:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <motor_power+0x1>
    1738:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <motor_power>
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 70 07 	call	0xee0	; 0xee0 <set_motor_power_raw>
    1744:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <motor_power>
    1748:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <motor_power+0x1>
    174c:	91 95       	neg	r25
    174e:	81 95       	neg	r24
    1750:	91 09       	sbc	r25, r1
    1752:	0e 94 70 07 	call	0xee0	; 0xee0 <set_motor_power_raw>
    1756:	03 c0       	rjmp	.+6      	; 0x175e <motor_control_tick+0x570>
    1758:	64 9b       	sbis	0x0c, 4	; 12
    175a:	a7 cd       	rjmp	.-1202   	; 0x12aa <motor_control_tick+0xbc>
    175c:	b4 cd       	rjmp	.-1176   	; 0x12c6 <motor_control_tick+0xd8>
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	df 90       	pop	r13
    1774:	cf 90       	pop	r12
    1776:	bf 90       	pop	r11
    1778:	af 90       	pop	r10
    177a:	9f 90       	pop	r9
    177c:	8f 90       	pop	r8
    177e:	7f 90       	pop	r7
    1780:	6f 90       	pop	r6
    1782:	5f 90       	pop	r5
    1784:	4f 90       	pop	r4
    1786:	08 95       	ret

00001788 <set_motor_reverse>:

void set_motor_reverse(uint8_t r){
	reverse = r;
    1788:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <reverse>
    178c:	08 95       	ret

0000178e <write_PWM>:
  uint8_t pin: The pin to set the PWM on (PE3, PE4, PE5)
  uint16_t pwm: 10-bit PWM value
*/
//void write_PWM(uint8_t port, uint8_t pin, uint16_t pwm){
void write_PWM(uint8_t pin, uint16_t pwm){
	pwm &= 1023;
    178e:	73 70       	andi	r23, 0x03	; 3
	switch(pin){
    1790:	84 30       	cpi	r24, 0x04	; 4
    1792:	71 f0       	breq	.+28     	; 0x17b0 <write_PWM+0x22>
    1794:	85 30       	cpi	r24, 0x05	; 5
    1796:	b1 f0       	breq	.+44     	; 0x17c4 <write_PWM+0x36>
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	e9 f4       	brne	.+58     	; 0x17d6 <write_PWM+0x48>
		case PE3:
			TCCR3A |= (1 << COM3A1);
    179c:	e0 e9       	ldi	r30, 0x90	; 144
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	80 68       	ori	r24, 0x80	; 128
    17a4:	80 83       	st	Z, r24
			OCR3A = pwm;
    17a6:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
    17aa:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
			break;
    17ae:	08 95       	ret
		case PE4:
			TCCR3A |= (1 << COM3B1);
    17b0:	e0 e9       	ldi	r30, 0x90	; 144
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 62       	ori	r24, 0x20	; 32
    17b8:	80 83       	st	Z, r24
			OCR3B = pwm;
    17ba:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7f809b>
    17be:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7f809a>
			break;
    17c2:	08 95       	ret
		case PE5:
			TCCR3A |= (1 << COM3C1);
    17c4:	e0 e9       	ldi	r30, 0x90	; 144
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	88 60       	ori	r24, 0x08	; 8
    17cc:	80 83       	st	Z, r24
			OCR3C = pwm;
    17ce:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__TEXT_REGION_LENGTH__+0x7f809d>
    17d2:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x7f809c>
    17d6:	08 95       	ret

000017d8 <__vector_13>:
}

void servo_high(){}

#else
ISR(TIMER1_COMPB_vect){
    17d8:	1f 92       	push	r1
    17da:	0f 92       	push	r0
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	0f 92       	push	r0
    17e0:	11 24       	eor	r1, r1
	PORTC &= ~(1<<4);
    17e2:	44 98       	cbi	0x08, 4	; 8
}
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <servo_high>:

void inline servo_high(){
	PORTC |= 1<<4;
    17ee:	44 9a       	sbi	0x08, 4	; 8
    17f0:	08 95       	ret

000017f2 <init_servo>:
}

void init_servo(){
	 TIMSK1 |= (1 << OCIE1B);
    17f2:	ef e6       	ldi	r30, 0x6F	; 111
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	84 60       	ori	r24, 0x04	; 4
    17fa:	80 83       	st	Z, r24
	 DDRC |= 1<<4;
    17fc:	3c 9a       	sbi	0x07, 4	; 7
	 OCR1B = 375;
    17fe:	87 e7       	ldi	r24, 0x77	; 119
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1806:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    180a:	08 95       	ret

0000180c <set_servo_position>:
}

void set_servo_position(int degrees){
	if(degrees > 180) return;
    180c:	85 3b       	cpi	r24, 0xB5	; 181
    180e:	91 05       	cpc	r25, r1
    1810:	ac f4       	brge	.+42     	; 0x183c <set_servo_position+0x30>
	if(degrees < 2) degrees = 2;
    1812:	82 30       	cpi	r24, 0x02	; 2
    1814:	91 05       	cpc	r25, r1
    1816:	14 f4       	brge	.+4      	; 0x181c <set_servo_position+0x10>
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	90 e0       	ldi	r25, 0x00	; 0
	OCR1B = degrees * 2 + degrees / 2;
    181c:	ac 01       	movw	r20, r24
    181e:	44 0f       	add	r20, r20
    1820:	55 1f       	adc	r21, r21
    1822:	9c 01       	movw	r18, r24
    1824:	99 23       	and	r25, r25
    1826:	14 f4       	brge	.+4      	; 0x182c <set_servo_position+0x20>
    1828:	2f 5f       	subi	r18, 0xFF	; 255
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	35 95       	asr	r19
    182e:	27 95       	ror	r18
    1830:	24 0f       	add	r18, r20
    1832:	35 1f       	adc	r19, r21
    1834:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1838:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    183c:	08 95       	ret

0000183e <__vector_15>:
	#ifdef REV_2
	return (TOF_Cnt * 20000) + (timer_ticks << 2);
	#else
	return (TOF_Cnt * 40000) + (timer_ticks << 2);
	#endif
}
    183e:	1f 92       	push	r1
    1840:	0f 92       	push	r0
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	0f 92       	push	r0
    1846:	11 24       	eor	r1, r1
    1848:	2f 93       	push	r18
    184a:	3f 93       	push	r19
    184c:	4f 93       	push	r20
    184e:	5f 93       	push	r21
    1850:	6f 93       	push	r22
    1852:	7f 93       	push	r23
    1854:	8f 93       	push	r24
    1856:	9f 93       	push	r25
    1858:	af 93       	push	r26
    185a:	bf 93       	push	r27
    185c:	ef 93       	push	r30
    185e:	ff 93       	push	r31
    1860:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <TOF_Cnt>
    1864:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <TOF_Cnt+0x1>
    1868:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <TOF_Cnt+0x2>
    186c:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <TOF_Cnt+0x3>
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	a1 1d       	adc	r26, r1
    1874:	b1 1d       	adc	r27, r1
    1876:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <TOF_Cnt>
    187a:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <TOF_Cnt+0x1>
    187e:	a0 93 92 02 	sts	0x0292, r26	; 0x800292 <TOF_Cnt+0x2>
    1882:	b0 93 93 02 	sts	0x0293, r27	; 0x800293 <TOF_Cnt+0x3>
    1886:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <TOF_Cnt>
    188a:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <TOF_Cnt+0x1>
    188e:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <TOF_Cnt+0x2>
    1892:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <TOF_Cnt+0x3>
    1896:	83 70       	andi	r24, 0x03	; 3
    1898:	99 27       	eor	r25, r25
    189a:	aa 27       	eor	r26, r26
    189c:	bb 27       	eor	r27, r27
    189e:	89 2b       	or	r24, r25
    18a0:	8a 2b       	or	r24, r26
    18a2:	8b 2b       	or	r24, r27
    18a4:	51 f4       	brne	.+20     	; 0x18ba <__vector_15+0x7c>
    18a6:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <TOF_Cnt>
    18aa:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <TOF_Cnt+0x1>
    18ae:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <TOF_Cnt+0x2>
    18b2:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <TOF_Cnt+0x3>
    18b6:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <update_LEDS>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <PID_due>
    18c0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <servo_high>
    18c4:	ff 91       	pop	r31
    18c6:	ef 91       	pop	r30
    18c8:	bf 91       	pop	r27
    18ca:	af 91       	pop	r26
    18cc:	9f 91       	pop	r25
    18ce:	8f 91       	pop	r24
    18d0:	7f 91       	pop	r23
    18d2:	6f 91       	pop	r22
    18d4:	5f 91       	pop	r21
    18d6:	4f 91       	pop	r20
    18d8:	3f 91       	pop	r19
    18da:	2f 91       	pop	r18
    18dc:	0f 90       	pop	r0
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	0f 90       	pop	r0
    18e2:	1f 90       	pop	r1
    18e4:	18 95       	reti

000018e6 <setup_timers>:
    18e6:	83 e4       	ldi	r24, 0x43	; 67
    18e8:	84 bd       	out	0x24, r24	; 36
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    18f0:	9b e1       	ldi	r25, 0x1B	; 27
    18f2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    18fc:	20 e1       	ldi	r18, 0x10	; 16
    18fe:	37 e2       	ldi	r19, 0x27	; 39
    1900:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1904:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1908:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    190c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1910:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1914:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1918:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    191c:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <TOF_Cnt>
    1920:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TOF_Cnt+0x1>
    1924:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <TOF_Cnt+0x2>
    1928:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <TOF_Cnt+0x3>
    192c:	08 95       	ret

0000192e <get_mS>:
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    193a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    193e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <TOF_Cnt>
    1942:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <TOF_Cnt+0x1>
    1946:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <TOF_Cnt+0x2>
    194a:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <TOF_Cnt+0x3>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	aa 1f       	adc	r26, r26
    1954:	bb 1f       	adc	r27, r27
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	aa 1f       	adc	r26, r26
    195c:	bb 1f       	adc	r27, r27
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	aa 1f       	adc	r26, r26
    1964:	bb 1f       	adc	r27, r27
    1966:	6c 01       	movw	r12, r24
    1968:	7d 01       	movw	r14, r26
    196a:	cc 0c       	add	r12, r12
    196c:	dd 1c       	adc	r13, r13
    196e:	ee 1c       	adc	r14, r14
    1970:	ff 1c       	adc	r15, r15
    1972:	cc 0c       	add	r12, r12
    1974:	dd 1c       	adc	r13, r13
    1976:	ee 1c       	adc	r14, r14
    1978:	ff 1c       	adc	r15, r15
    197a:	c8 0e       	add	r12, r24
    197c:	d9 1e       	adc	r13, r25
    197e:	ea 1e       	adc	r14, r26
    1980:	fb 1e       	adc	r15, r27
    1982:	36 95       	lsr	r19
    1984:	27 95       	ror	r18
    1986:	a3 e1       	ldi	r26, 0x13	; 19
    1988:	b3 e8       	ldi	r27, 0x83	; 131
    198a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__umulhisi3>
    198e:	00 24       	eor	r0, r0
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	00 1c       	adc	r0, r0
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	00 1c       	adc	r0, r0
    199c:	89 2f       	mov	r24, r25
    199e:	90 2d       	mov	r25, r0
    19a0:	a7 01       	movw	r20, r14
    19a2:	96 01       	movw	r18, r12
    19a4:	28 0f       	add	r18, r24
    19a6:	39 1f       	adc	r19, r25
    19a8:	41 1d       	adc	r20, r1
    19aa:	51 1d       	adc	r21, r1
    19ac:	ca 01       	movw	r24, r20
    19ae:	b9 01       	movw	r22, r18
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	08 95       	ret

000019ba <delay_mS>:

/*delay for the specified number of milliseconds*/
void delay_mS(uint16_t mS){
    19ba:	8f 92       	push	r8
    19bc:	9f 92       	push	r9
    19be:	af 92       	push	r10
    19c0:	bf 92       	push	r11
    19c2:	cf 92       	push	r12
    19c4:	df 92       	push	r13
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	6c 01       	movw	r12, r24
	uint32_t start = get_mS();
    19cc:	0e 94 97 0c 	call	0x192e	; 0x192e <get_mS>
    19d0:	4b 01       	movw	r8, r22
    19d2:	5c 01       	movw	r10, r24
	while(get_mS() - start < mS);
    19d4:	e1 2c       	mov	r14, r1
    19d6:	f1 2c       	mov	r15, r1
    19d8:	0e 94 97 0c 	call	0x192e	; 0x192e <get_mS>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	88 19       	sub	r24, r8
    19e2:	99 09       	sbc	r25, r9
    19e4:	aa 09       	sbc	r26, r10
    19e6:	bb 09       	sbc	r27, r11
    19e8:	8c 15       	cp	r24, r12
    19ea:	9d 05       	cpc	r25, r13
    19ec:	ae 05       	cpc	r26, r14
    19ee:	bf 05       	cpc	r27, r15
    19f0:	98 f3       	brcs	.-26     	; 0x19d8 <delay_mS+0x1e>
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	bf 90       	pop	r11
    19fc:	af 90       	pop	r10
    19fe:	9f 90       	pop	r9
    1a00:	8f 90       	pop	r8
    1a02:	08 95       	ret

00001a04 <__vector_32>:
}

/*Returns the number of bytes waiting in the USART receive buffer*/
int usart_available(){
	return rxbp;
}
    1a04:	1f 92       	push	r1
    1a06:	0f 92       	push	r0
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	0f 92       	push	r0
    1a0c:	11 24       	eor	r1, r1
    1a0e:	8f 93       	push	r24
    1a10:	ef 93       	push	r30
    1a12:	ff 93       	push	r31
    1a14:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <rxbp>
    1a18:	81 31       	cpi	r24, 0x11	; 17
    1a1a:	20 f0       	brcs	.+8      	; 0x1a24 <__vector_32+0x20>
    1a1c:	80 e1       	ldi	r24, 0x10	; 16
    1a1e:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <rxbp>
    1a22:	0c c0       	rjmp	.+24     	; 0x1a3c <__vector_32+0x38>
    1a24:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <rxbp>
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	8e 0f       	add	r24, r30
    1a2c:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <rxbp>
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    1a36:	ea 55       	subi	r30, 0x5A	; 90
    1a38:	fd 4f       	sbci	r31, 0xFD	; 253
    1a3a:	80 83       	st	Z, r24
    1a3c:	ff 91       	pop	r31
    1a3e:	ef 91       	pop	r30
    1a40:	8f 91       	pop	r24
    1a42:	0f 90       	pop	r0
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	0f 90       	pop	r0
    1a48:	1f 90       	pop	r1
    1a4a:	18 95       	reti

00001a4c <__vector_33>:
    1a4c:	1f 92       	push	r1
    1a4e:	0f 92       	push	r0
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	0f 92       	push	r0
    1a54:	11 24       	eor	r1, r1
    1a56:	8f 93       	push	r24
    1a58:	9f 93       	push	r25
    1a5a:	ef 93       	push	r30
    1a5c:	ff 93       	push	r31
    1a5e:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <txbp>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	8e 0f       	add	r24, r30
    1a66:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <txbp>
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	ec 56       	subi	r30, 0x6C	; 108
    1a6e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a70:	80 81       	ld	r24, Z
    1a72:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    1a76:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <txbp>
    1a7a:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <txend>
    1a7e:	98 17       	cp	r25, r24
    1a80:	20 f4       	brcc	.+8      	; 0x1a8a <__vector_33+0x3e>
    1a82:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <txbp>
    1a86:	81 31       	cpi	r24, 0x11	; 17
    1a88:	48 f0       	brcs	.+18     	; 0x1a9c <__vector_33+0x50>
    1a8a:	e9 ec       	ldi	r30, 0xC9	; 201
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 7d       	andi	r24, 0xDF	; 223
    1a92:	80 83       	st	Z, r24
    1a94:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <txend>
    1a98:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <txbp>
    1a9c:	ff 91       	pop	r31
    1a9e:	ef 91       	pop	r30
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0f 90       	pop	r0
    1aaa:	1f 90       	pop	r1
    1aac:	18 95       	reti

00001aae <usart_write>:
    1aae:	af 92       	push	r10
    1ab0:	bf 92       	push	r11
    1ab2:	cf 92       	push	r12
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	1f 92       	push	r1
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	5c 01       	movw	r10, r24
    1ac8:	16 2f       	mov	r17, r22
    1aca:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <txend>
    1ace:	88 23       	and	r24, r24
    1ad0:	29 f0       	breq	.+10     	; 0x1adc <usart_write+0x2e>
    1ad2:	e9 ec       	ldi	r30, 0xC9	; 201
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	80 62       	ori	r24, 0x20	; 32
    1ada:	80 83       	st	Z, r24
    1adc:	11 23       	and	r17, r17
    1ade:	a9 f1       	breq	.+106    	; 0x1b4a <usart_write+0x9c>
    1ae0:	68 94       	set
    1ae2:	cc 24       	eor	r12, r12
    1ae4:	c4 f8       	bld	r12, 4
    1ae6:	d1 2c       	mov	r13, r1
    1ae8:	0f 2e       	mov	r0, r31
    1aea:	f9 ec       	ldi	r31, 0xC9	; 201
    1aec:	ef 2e       	mov	r14, r31
    1aee:	f1 2c       	mov	r15, r1
    1af0:	f0 2d       	mov	r31, r0
    1af2:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <txend>
    1af6:	8f 30       	cpi	r24, 0x0F	; 15
    1af8:	e0 f7       	brcc	.-8      	; 0x1af2 <usart_write+0x44>
    1afa:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <txend>
    1afe:	21 2f       	mov	r18, r17
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	b6 01       	movw	r22, r12
    1b08:	68 1b       	sub	r22, r24
    1b0a:	71 09       	sbc	r23, r1
    1b0c:	07 2e       	mov	r0, r23
    1b0e:	00 0c       	add	r0, r0
    1b10:	88 0b       	sbc	r24, r24
    1b12:	99 0b       	sbc	r25, r25
    1b14:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <min>
    1b18:	69 83       	std	Y+1, r22	; 0x01
    1b1a:	49 81       	ldd	r20, Y+1	; 0x01
    1b1c:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <txend>
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	b5 01       	movw	r22, r10
    1b26:	8c 56       	subi	r24, 0x6C	; 108
    1b28:	9d 4f       	sbci	r25, 0xFD	; 253
    1b2a:	0e 94 04 10 	call	0x2008	; 0x2008 <memcpy>
    1b2e:	99 81       	ldd	r25, Y+1	; 0x01
    1b30:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <txend>
    1b34:	89 0f       	add	r24, r25
    1b36:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <txend>
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	18 1b       	sub	r17, r24
    1b3e:	f7 01       	movw	r30, r14
    1b40:	80 81       	ld	r24, Z
    1b42:	80 62       	ori	r24, 0x20	; 32
    1b44:	80 83       	st	Z, r24
    1b46:	11 11       	cpse	r17, r1
    1b48:	d4 cf       	rjmp	.-88     	; 0x1af2 <usart_write+0x44>
    1b4a:	0f 90       	pop	r0
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	1f 91       	pop	r17
    1b52:	ff 90       	pop	r15
    1b54:	ef 90       	pop	r14
    1b56:	df 90       	pop	r13
    1b58:	cf 90       	pop	r12
    1b5a:	bf 90       	pop	r11
    1b5c:	af 90       	pop	r10
    1b5e:	08 95       	ret

00001b60 <usart_init>:
    1b60:	9b 01       	movw	r18, r22
    1b62:	ac 01       	movw	r20, r24
    1b64:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <rxbp>
    1b68:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <txend>
    1b6c:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <txbp>
    1b70:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
    1b74:	60 e4       	ldi	r22, 0x40	; 64
    1b76:	72 e4       	ldi	r23, 0x42	; 66
    1b78:	8f e0       	ldi	r24, 0x0F	; 15
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__udivmodsi4>
    1b80:	21 50       	subi	r18, 0x01	; 1
    1b82:	31 09       	sbc	r19, r1
    1b84:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
    1b88:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
    1b8c:	86 e0       	ldi	r24, 0x06	; 6
    1b8e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
    1b92:	88 e9       	ldi	r24, 0x98	; 152
    1b94:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
    1b98:	08 95       	ret

00001b9a <usart_write_char>:
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	1f 92       	push	r1
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	8a 30       	cpi	r24, 0x0A	; 10
    1ba8:	19 f4       	brne	.+6      	; 0x1bb0 <usart_write_char+0x16>
    1baa:	8d e0       	ldi	r24, 0x0D	; 13
    1bac:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <usart_write_char>
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <usart_write>
    1bba:	0f 90       	pop	r0
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <usart_write_string>:
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	00 20       	and	r0, r0
    1bc8:	e9 f7       	brne	.-6      	; 0x1bc4 <usart_write_string+0x2>
    1bca:	31 97       	sbiw	r30, 0x01	; 1
    1bcc:	bf 01       	movw	r22, r30
    1bce:	68 1b       	sub	r22, r24
    1bd0:	79 0b       	sbc	r23, r25
    1bd2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <usart_write>
    1bd6:	08 95       	ret

00001bd8 <tprintf>:

/*Tiny implementation of prinf()*/
void tprintf(const char *fmt, ...){
    1bd8:	2f 92       	push	r2
    1bda:	3f 92       	push	r3
    1bdc:	4f 92       	push	r4
    1bde:	5f 92       	push	r5
    1be0:	6f 92       	push	r6
    1be2:	7f 92       	push	r7
    1be4:	8f 92       	push	r8
    1be6:	9f 92       	push	r9
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	2b 97       	sbiw	r28, 0x0b	; 11
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	b0 96       	adiw	r30, 0x20	; 32
    1c10:	e1 90       	ld	r14, Z+
    1c12:	f1 90       	ld	r15, Z+
	va_list va;
	va_start(va, fmt);
    1c14:	6f 01       	movw	r12, r30
	int i = 0;
	int32_t l;
	char buf[9],c;
	for(i = 0;c=fmt[i];i++){
    1c16:	f7 01       	movw	r30, r14
    1c18:	b0 80       	ld	r11, Z
    1c1a:	bb 20       	and	r11, r11
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <tprintf+0x48>
    1c1e:	d2 c0       	rjmp	.+420    	; 0x1dc4 <tprintf+0x1ec>
    1c20:	00 e0       	ldi	r16, 0x00	; 0
    1c22:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1c24:	0f 2e       	mov	r0, r31
    1c26:	f0 e1       	ldi	r31, 0x10	; 16
    1c28:	4f 2e       	mov	r4, r31
    1c2a:	f7 e2       	ldi	r31, 0x27	; 39
    1c2c:	5f 2e       	mov	r5, r31
    1c2e:	61 2c       	mov	r6, r1
    1c30:	71 2c       	mov	r7, r1
    1c32:	f0 2d       	mov	r31, r0
		if(c != '%'){
    1c34:	f5 e2       	ldi	r31, 0x25	; 37
    1c36:	bf 16       	cp	r11, r31
    1c38:	d1 f0       	breq	.+52     	; 0x1c6e <tprintf+0x96>
			usart_write_char(c);
    1c3a:	8b 2d       	mov	r24, r11
    1c3c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <usart_write_char>
		}
	if(c == '\\'){
    1c40:	2c e5       	ldi	r18, 0x5C	; 92
    1c42:	b2 12       	cpse	r11, r18
    1c44:	b7 c0       	rjmp	.+366    	; 0x1db4 <tprintf+0x1dc>
		c = fmt[++i];
    1c46:	0f 5f       	subi	r16, 0xFF	; 255
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	f7 01       	movw	r30, r14
    1c4c:	e0 0f       	add	r30, r16
    1c4e:	f1 1f       	adc	r31, r17
    1c50:	80 81       	ld	r24, Z
		switch(c){
    1c52:	8a 30       	cpi	r24, 0x0A	; 10
    1c54:	29 f0       	breq	.+10     	; 0x1c60 <tprintf+0x88>
    1c56:	8c 35       	cpi	r24, 0x5C	; 92
    1c58:	39 f4       	brne	.+14     	; 0x1c68 <tprintf+0x90>
			case '\\':
				usart_write_char('\\');
    1c5a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <usart_write_char>
				break;
    1c5e:	aa c0       	rjmp	.+340    	; 0x1db4 <tprintf+0x1dc>
			case '\n':
				usart_write_char('\n');
    1c60:	8a e0       	ldi	r24, 0x0A	; 10
    1c62:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <usart_write_char>
				break;
    1c66:	a6 c0       	rjmp	.+332    	; 0x1db4 <tprintf+0x1dc>
		}
	}
	if(c == '%'){
    1c68:	85 32       	cpi	r24, 0x25	; 37
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <tprintf+0x96>
    1c6c:	a3 c0       	rjmp	.+326    	; 0x1db4 <tprintf+0x1dc>
		c=fmt[++i];
    1c6e:	0f 5f       	subi	r16, 0xFF	; 255
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	f7 01       	movw	r30, r14
    1c74:	e0 0f       	add	r30, r16
    1c76:	f1 1f       	adc	r31, r17
		switch(c){
    1c78:	80 81       	ld	r24, Z
    1c7a:	84 36       	cpi	r24, 0x64	; 100
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <tprintf+0xa8>
    1c7e:	75 c0       	rjmp	.+234    	; 0x1d6a <tprintf+0x192>
    1c80:	38 f4       	brcc	.+14     	; 0x1c90 <tprintf+0xb8>
    1c82:	88 35       	cpi	r24, 0x58	; 88
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <tprintf+0xb0>
    1c86:	5e c0       	rjmp	.+188    	; 0x1d44 <tprintf+0x16c>
    1c88:	83 36       	cpi	r24, 0x63	; 99
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <tprintf+0xb6>
    1c8c:	88 c0       	rjmp	.+272    	; 0x1d9e <tprintf+0x1c6>
    1c8e:	8f c0       	rjmp	.+286    	; 0x1dae <tprintf+0x1d6>
    1c90:	8c 36       	cpi	r24, 0x6C	; 108
    1c92:	21 f0       	breq	.+8      	; 0x1c9c <tprintf+0xc4>
    1c94:	83 37       	cpi	r24, 0x73	; 115
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <tprintf+0xc2>
    1c98:	79 c0       	rjmp	.+242    	; 0x1d8c <tprintf+0x1b4>
    1c9a:	89 c0       	rjmp	.+274    	; 0x1dae <tprintf+0x1d6>
			case 'l':
				l = va_arg(va, int32_t);
    1c9c:	c6 01       	movw	r24, r12
    1c9e:	04 96       	adiw	r24, 0x04	; 4
    1ca0:	9b 87       	std	Y+11, r25	; 0x0b
    1ca2:	8a 87       	std	Y+10, r24	; 0x0a
    1ca4:	f6 01       	movw	r30, r12
    1ca6:	80 80       	ld	r8, Z
    1ca8:	91 80       	ldd	r9, Z+1	; 0x01
    1caa:	a2 80       	ldd	r10, Z+2	; 0x02
    1cac:	b3 80       	ldd	r11, Z+3	; 0x03
				if(l > 32767){
    1cae:	81 14       	cp	r8, r1
    1cb0:	f0 e8       	ldi	r31, 0x80	; 128
    1cb2:	9f 06       	cpc	r9, r31
    1cb4:	a1 04       	cpc	r10, r1
    1cb6:	b1 04       	cpc	r11, r1
    1cb8:	bc f1       	brlt	.+110    	; 0x1d28 <tprintf+0x150>
    1cba:	c5 01       	movw	r24, r10
    1cbc:	b4 01       	movw	r22, r8
    1cbe:	a3 01       	movw	r20, r6
    1cc0:	92 01       	movw	r18, r4
    1cc2:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__divmodsi4>
    1cc6:	49 01       	movw	r8, r18
    1cc8:	5a 01       	movw	r10, r20
    1cca:	c6 2e       	mov	r12, r22
    1ccc:	d7 2e       	mov	r13, r23
    1cce:	28 2e       	mov	r2, r24
    1cd0:	39 2e       	mov	r3, r25
    1cd2:	4a e0       	ldi	r20, 0x0A	; 10
    1cd4:	be 01       	movw	r22, r28
    1cd6:	6f 5f       	subi	r22, 0xFF	; 255
    1cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cda:	c4 01       	movw	r24, r8
    1cdc:	0e 94 0d 10 	call	0x201a	; 0x201a <__itoa_ncheck>
					itoa(l/10000, buf, 10);
					usart_write_string(buf);
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <usart_write_string>
					l %= 10000;
    1ce8:	8c 2c       	mov	r8, r12
    1cea:	9d 2c       	mov	r9, r13
    1cec:	a2 2c       	mov	r10, r2
    1cee:	b3 2c       	mov	r11, r3
					if(l < 1000){
    1cf0:	28 ee       	ldi	r18, 0xE8	; 232
    1cf2:	82 16       	cp	r8, r18
    1cf4:	23 e0       	ldi	r18, 0x03	; 3
    1cf6:	92 06       	cpc	r9, r18
    1cf8:	a1 04       	cpc	r10, r1
    1cfa:	b1 04       	cpc	r11, r1
    1cfc:	1c f4       	brge	.+6      	; 0x1d04 <tprintf+0x12c>
						usart_write_char('0');
    1cfe:	80 e3       	ldi	r24, 0x30	; 48
    1d00:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <usart_write_char>
					}
					if(l < 100){
    1d04:	84 e6       	ldi	r24, 0x64	; 100
    1d06:	88 16       	cp	r8, r24
    1d08:	91 04       	cpc	r9, r1
    1d0a:	a1 04       	cpc	r10, r1
    1d0c:	b1 04       	cpc	r11, r1
    1d0e:	1c f4       	brge	.+6      	; 0x1d16 <tprintf+0x13e>
						usart_write_char('0');
    1d10:	80 e3       	ldi	r24, 0x30	; 48
    1d12:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <usart_write_char>
					}
					if(l < 10){
    1d16:	9a e0       	ldi	r25, 0x0A	; 10
    1d18:	89 16       	cp	r8, r25
    1d1a:	91 04       	cpc	r9, r1
    1d1c:	a1 04       	cpc	r10, r1
    1d1e:	b1 04       	cpc	r11, r1
    1d20:	1c f4       	brge	.+6      	; 0x1d28 <tprintf+0x150>
						usart_write_char('0');
    1d22:	80 e3       	ldi	r24, 0x30	; 48
    1d24:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <usart_write_char>
    1d28:	4a e0       	ldi	r20, 0x0A	; 10
    1d2a:	be 01       	movw	r22, r28
    1d2c:	6f 5f       	subi	r22, 0xFF	; 255
    1d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d30:	c4 01       	movw	r24, r8
    1d32:	0e 94 0d 10 	call	0x201a	; 0x201a <__itoa_ncheck>
					}
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
    1d36:	ce 01       	movw	r24, r28
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <usart_write_string>
	}
	if(c == '%'){
		c=fmt[++i];
		switch(c){
			case 'l':
				l = va_arg(va, int32_t);
    1d3e:	ca 84       	ldd	r12, Y+10	; 0x0a
    1d40:	db 84       	ldd	r13, Y+11	; 0x0b
						usart_write_char('0');
					}
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
				break;
    1d42:	38 c0       	rjmp	.+112    	; 0x1db4 <tprintf+0x1dc>
			case 'X':
				itoa(va_arg(va, int32_t), buf, 16);
    1d44:	56 01       	movw	r10, r12
    1d46:	e4 e0       	ldi	r30, 0x04	; 4
    1d48:	ae 0e       	add	r10, r30
    1d4a:	b1 1c       	adc	r11, r1
    1d4c:	40 e1       	ldi	r20, 0x10	; 16
    1d4e:	be 01       	movw	r22, r28
    1d50:	6f 5f       	subi	r22, 0xFF	; 255
    1d52:	7f 4f       	sbci	r23, 0xFF	; 255
    1d54:	f6 01       	movw	r30, r12
    1d56:	80 81       	ld	r24, Z
    1d58:	91 81       	ldd	r25, Z+1	; 0x01
    1d5a:	0e 94 0d 10 	call	0x201a	; 0x201a <__itoa_ncheck>
				usart_write_string(buf);
    1d5e:	ce 01       	movw	r24, r28
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <usart_write_string>
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
				break;
			case 'X':
				itoa(va_arg(va, int32_t), buf, 16);
    1d66:	65 01       	movw	r12, r10
				usart_write_string(buf);
				break;
    1d68:	25 c0       	rjmp	.+74     	; 0x1db4 <tprintf+0x1dc>
			case 'd':
				itoa(va_arg(va, int), buf, 10);
    1d6a:	f6 01       	movw	r30, r12
    1d6c:	4a e0       	ldi	r20, 0x0A	; 10
    1d6e:	be 01       	movw	r22, r28
    1d70:	6f 5f       	subi	r22, 0xFF	; 255
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	f2 e0       	ldi	r31, 0x02	; 2
    1d7a:	cf 0e       	add	r12, r31
    1d7c:	d1 1c       	adc	r13, r1
    1d7e:	0e 94 0d 10 	call	0x201a	; 0x201a <__itoa_ncheck>
				usart_write_string(buf);
    1d82:	ce 01       	movw	r24, r28
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <usart_write_string>
				break;
    1d8a:	14 c0       	rjmp	.+40     	; 0x1db4 <tprintf+0x1dc>
			case 's':
				usart_write_string(va_arg(va, char*));
    1d8c:	f6 01       	movw	r30, r12
    1d8e:	80 81       	ld	r24, Z
    1d90:	91 81       	ldd	r25, Z+1	; 0x01
    1d92:	22 e0       	ldi	r18, 0x02	; 2
    1d94:	c2 0e       	add	r12, r18
    1d96:	d1 1c       	adc	r13, r1
    1d98:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <usart_write_string>
				break;
    1d9c:	0b c0       	rjmp	.+22     	; 0x1db4 <tprintf+0x1dc>
			case 'c':
				usart_write_char(va_arg(va, int));
    1d9e:	f6 01       	movw	r30, r12
    1da0:	80 81       	ld	r24, Z
    1da2:	92 e0       	ldi	r25, 0x02	; 2
    1da4:	c9 0e       	add	r12, r25
    1da6:	d1 1c       	adc	r13, r1
    1da8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <usart_write_char>
				break;
    1dac:	03 c0       	rjmp	.+6      	; 0x1db4 <tprintf+0x1dc>
			default:
				usart_write_char('?');
    1dae:	8f e3       	ldi	r24, 0x3F	; 63
    1db0:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <usart_write_char>
	va_list va;
	va_start(va, fmt);
	int i = 0;
	int32_t l;
	char buf[9],c;
	for(i = 0;c=fmt[i];i++){
    1db4:	0f 5f       	subi	r16, 0xFF	; 255
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	f7 01       	movw	r30, r14
    1dba:	e0 0f       	add	r30, r16
    1dbc:	f1 1f       	adc	r31, r17
    1dbe:	b0 80       	ld	r11, Z
    1dc0:	b1 10       	cpse	r11, r1
    1dc2:	38 cf       	rjmp	.-400    	; 0x1c34 <tprintf+0x5c>
				usart_write_char('?');
				break;
			}
		}
	}
    1dc4:	2b 96       	adiw	r28, 0x0b	; 11
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	ff 90       	pop	r15
    1dda:	ef 90       	pop	r14
    1ddc:	df 90       	pop	r13
    1dde:	cf 90       	pop	r12
    1de0:	bf 90       	pop	r11
    1de2:	af 90       	pop	r10
    1de4:	9f 90       	pop	r9
    1de6:	8f 90       	pop	r8
    1de8:	7f 90       	pop	r7
    1dea:	6f 90       	pop	r6
    1dec:	5f 90       	pop	r5
    1dee:	4f 90       	pop	r4
    1df0:	3f 90       	pop	r3
    1df2:	2f 90       	pop	r2
    1df4:	08 95       	ret

00001df6 <min>:
Returns:
the number of encoder ticks
*/
int16_t deg_to_ticks(int16_t d){
	return ((int32_t)d * (int32_t)ticks_per_degree_x10) / 10L;
}
    1df6:	62 17       	cp	r22, r18
    1df8:	73 07       	cpc	r23, r19
    1dfa:	84 07       	cpc	r24, r20
    1dfc:	95 07       	cpc	r25, r21
    1dfe:	14 f4       	brge	.+4      	; 0x1e04 <min+0xe>
    1e00:	9b 01       	movw	r18, r22
    1e02:	ac 01       	movw	r20, r24
    1e04:	ca 01       	movw	r24, r20
    1e06:	b9 01       	movw	r22, r18
    1e08:	08 95       	ret

00001e0a <set_LED>:
    1e0a:	84 30       	cpi	r24, 0x04	; 4
    1e0c:	f8 f4       	brcc	.+62     	; 0x1e4c <set_LED+0x42>
    1e0e:	64 30       	cpi	r22, 0x04	; 4
    1e10:	e8 f4       	brcc	.+58     	; 0x1e4c <set_LED+0x42>
    1e12:	9f ef       	ldi	r25, 0xFF	; 255
    1e14:	96 0f       	add	r25, r22
    1e16:	92 30       	cpi	r25, 0x02	; 2
    1e18:	18 f4       	brcc	.+6      	; 0x1e20 <set_LED+0x16>
    1e1a:	93 e0       	ldi	r25, 0x03	; 3
    1e1c:	96 1b       	sub	r25, r22
    1e1e:	69 2f       	mov	r22, r25
    1e20:	88 0f       	add	r24, r24
    1e22:	23 e0       	ldi	r18, 0x03	; 3
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	08 2e       	mov	r0, r24
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <set_LED+0x24>
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	0a 94       	dec	r0
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <set_LED+0x20>
    1e32:	20 95       	com	r18
    1e34:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <LED_states>
    1e38:	29 23       	and	r18, r25
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <set_LED+0x38>
    1e3e:	66 0f       	add	r22, r22
    1e40:	77 1f       	adc	r23, r23
    1e42:	8a 95       	dec	r24
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <set_LED+0x34>
    1e46:	62 2b       	or	r22, r18
    1e48:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <LED_states>
    1e4c:	08 95       	ret

00001e4e <int_abs>:
    1e4e:	99 23       	and	r25, r25
    1e50:	1c f4       	brge	.+6      	; 0x1e58 <int_abs+0xa>
    1e52:	91 95       	neg	r25
    1e54:	81 95       	neg	r24
    1e56:	91 09       	sbc	r25, r1
    1e58:	08 95       	ret

00001e5a <update_LEDS>:
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	7c 01       	movw	r14, r24
    1e68:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <LED_states>
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <update_LEDS+0x1a>
    1e70:	12 b8       	out	0x02, r1	; 2
    1e72:	3b c0       	rjmp	.+118    	; 0x1eea <update_LEDS+0x90>
    1e74:	e4 e0       	ldi	r30, 0x04	; 4
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	c0 e0       	ldi	r28, 0x00	; 0
    1e7a:	d0 e0       	ldi	r29, 0x00	; 0
    1e7c:	01 e0       	ldi	r16, 0x01	; 1
    1e7e:	10 e0       	ldi	r17, 0x00	; 0
    1e80:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <LED_states>
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0c 2e       	mov	r0, r28
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <update_LEDS+0x34>
    1e8a:	95 95       	asr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	0a 94       	dec	r0
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <update_LEDS+0x30>
    1e92:	28 2f       	mov	r18, r24
    1e94:	23 70       	andi	r18, 0x03	; 3
    1e96:	69 f0       	breq	.+26     	; 0x1eb2 <update_LEDS+0x58>
    1e98:	62 2f       	mov	r22, r18
    1e9a:	70 e0       	ldi	r23, 0x00	; 0
    1e9c:	66 0f       	add	r22, r22
    1e9e:	77 1f       	adc	r23, r23
    1ea0:	6f 5f       	subi	r22, 0xFF	; 255
    1ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea4:	c7 01       	movw	r24, r14
    1ea6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__udivmodhi4>
    1eaa:	89 2b       	or	r24, r25
    1eac:	79 f0       	breq	.+30     	; 0x1ecc <update_LEDS+0x72>
    1eae:	23 30       	cpi	r18, 0x03	; 3
    1eb0:	69 f0       	breq	.+26     	; 0x1ecc <update_LEDS+0x72>
    1eb2:	92 b1       	in	r25, 0x02	; 2
    1eb4:	98 01       	movw	r18, r16
    1eb6:	0e 2e       	mov	r0, r30
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <update_LEDS+0x64>
    1eba:	22 0f       	add	r18, r18
    1ebc:	33 1f       	adc	r19, r19
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <update_LEDS+0x60>
    1ec2:	82 2f       	mov	r24, r18
    1ec4:	80 95       	com	r24
    1ec6:	89 23       	and	r24, r25
    1ec8:	82 b9       	out	0x02, r24	; 2
    1eca:	0a c0       	rjmp	.+20     	; 0x1ee0 <update_LEDS+0x86>
    1ecc:	22 b1       	in	r18, 0x02	; 2
    1ece:	c8 01       	movw	r24, r16
    1ed0:	0e 2e       	mov	r0, r30
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <update_LEDS+0x7e>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	0a 94       	dec	r0
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <update_LEDS+0x7a>
    1edc:	82 2b       	or	r24, r18
    1ede:	82 b9       	out	0x02, r24	; 2
    1ee0:	22 96       	adiw	r28, 0x02	; 2
    1ee2:	31 96       	adiw	r30, 0x01	; 1
    1ee4:	e8 30       	cpi	r30, 0x08	; 8
    1ee6:	f1 05       	cpc	r31, r1
    1ee8:	59 f6       	brne	.-106    	; 0x1e80 <update_LEDS+0x26>
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	ff 90       	pop	r15
    1ef4:	ef 90       	pop	r14
    1ef6:	08 95       	ret

00001ef8 <set_ticks_per_10degrees>:
/*Sets a new ratio of ticks to degrees.
Parameters:
uint16_t tpd: the number of encoder ticks in 10 degrees of rotation
*/
void set_ticks_per_10degrees(uint16_t tpd){
	ticks_per_degree_x10 = tpd;
    1ef8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ticks_per_degree_x10+0x1>
    1efc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ticks_per_degree_x10>
    1f00:	08 95       	ret

00001f02 <__udivmodhi4>:
    1f02:	aa 1b       	sub	r26, r26
    1f04:	bb 1b       	sub	r27, r27
    1f06:	51 e1       	ldi	r21, 0x11	; 17
    1f08:	07 c0       	rjmp	.+14     	; 0x1f18 <__udivmodhi4_ep>

00001f0a <__udivmodhi4_loop>:
    1f0a:	aa 1f       	adc	r26, r26
    1f0c:	bb 1f       	adc	r27, r27
    1f0e:	a6 17       	cp	r26, r22
    1f10:	b7 07       	cpc	r27, r23
    1f12:	10 f0       	brcs	.+4      	; 0x1f18 <__udivmodhi4_ep>
    1f14:	a6 1b       	sub	r26, r22
    1f16:	b7 0b       	sbc	r27, r23

00001f18 <__udivmodhi4_ep>:
    1f18:	88 1f       	adc	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	5a 95       	dec	r21
    1f1e:	a9 f7       	brne	.-22     	; 0x1f0a <__udivmodhi4_loop>
    1f20:	80 95       	com	r24
    1f22:	90 95       	com	r25
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	08 95       	ret

00001f2a <__divmodhi4>:
    1f2a:	97 fb       	bst	r25, 7
    1f2c:	07 2e       	mov	r0, r23
    1f2e:	16 f4       	brtc	.+4      	; 0x1f34 <__divmodhi4+0xa>
    1f30:	00 94       	com	r0
    1f32:	07 d0       	rcall	.+14     	; 0x1f42 <__divmodhi4_neg1>
    1f34:	77 fd       	sbrc	r23, 7
    1f36:	09 d0       	rcall	.+18     	; 0x1f4a <__divmodhi4_neg2>
    1f38:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__udivmodhi4>
    1f3c:	07 fc       	sbrc	r0, 7
    1f3e:	05 d0       	rcall	.+10     	; 0x1f4a <__divmodhi4_neg2>
    1f40:	3e f4       	brtc	.+14     	; 0x1f50 <__divmodhi4_exit>

00001f42 <__divmodhi4_neg1>:
    1f42:	90 95       	com	r25
    1f44:	81 95       	neg	r24
    1f46:	9f 4f       	sbci	r25, 0xFF	; 255
    1f48:	08 95       	ret

00001f4a <__divmodhi4_neg2>:
    1f4a:	70 95       	com	r23
    1f4c:	61 95       	neg	r22
    1f4e:	7f 4f       	sbci	r23, 0xFF	; 255

00001f50 <__divmodhi4_exit>:
    1f50:	08 95       	ret

00001f52 <__udivmodsi4>:
    1f52:	a1 e2       	ldi	r26, 0x21	; 33
    1f54:	1a 2e       	mov	r1, r26
    1f56:	aa 1b       	sub	r26, r26
    1f58:	bb 1b       	sub	r27, r27
    1f5a:	fd 01       	movw	r30, r26
    1f5c:	0d c0       	rjmp	.+26     	; 0x1f78 <__udivmodsi4_ep>

00001f5e <__udivmodsi4_loop>:
    1f5e:	aa 1f       	adc	r26, r26
    1f60:	bb 1f       	adc	r27, r27
    1f62:	ee 1f       	adc	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	a2 17       	cp	r26, r18
    1f68:	b3 07       	cpc	r27, r19
    1f6a:	e4 07       	cpc	r30, r20
    1f6c:	f5 07       	cpc	r31, r21
    1f6e:	20 f0       	brcs	.+8      	; 0x1f78 <__udivmodsi4_ep>
    1f70:	a2 1b       	sub	r26, r18
    1f72:	b3 0b       	sbc	r27, r19
    1f74:	e4 0b       	sbc	r30, r20
    1f76:	f5 0b       	sbc	r31, r21

00001f78 <__udivmodsi4_ep>:
    1f78:	66 1f       	adc	r22, r22
    1f7a:	77 1f       	adc	r23, r23
    1f7c:	88 1f       	adc	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	1a 94       	dec	r1
    1f82:	69 f7       	brne	.-38     	; 0x1f5e <__udivmodsi4_loop>
    1f84:	60 95       	com	r22
    1f86:	70 95       	com	r23
    1f88:	80 95       	com	r24
    1f8a:	90 95       	com	r25
    1f8c:	9b 01       	movw	r18, r22
    1f8e:	ac 01       	movw	r20, r24
    1f90:	bd 01       	movw	r22, r26
    1f92:	cf 01       	movw	r24, r30
    1f94:	08 95       	ret

00001f96 <__divmodsi4>:
    1f96:	05 2e       	mov	r0, r21
    1f98:	97 fb       	bst	r25, 7
    1f9a:	1e f4       	brtc	.+6      	; 0x1fa2 <__divmodsi4+0xc>
    1f9c:	00 94       	com	r0
    1f9e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__negsi2>
    1fa2:	57 fd       	sbrc	r21, 7
    1fa4:	07 d0       	rcall	.+14     	; 0x1fb4 <__divmodsi4_neg2>
    1fa6:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__udivmodsi4>
    1faa:	07 fc       	sbrc	r0, 7
    1fac:	03 d0       	rcall	.+6      	; 0x1fb4 <__divmodsi4_neg2>
    1fae:	4e f4       	brtc	.+18     	; 0x1fc2 <__divmodsi4_exit>
    1fb0:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__negsi2>

00001fb4 <__divmodsi4_neg2>:
    1fb4:	50 95       	com	r21
    1fb6:	40 95       	com	r20
    1fb8:	30 95       	com	r19
    1fba:	21 95       	neg	r18
    1fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbe:	4f 4f       	sbci	r20, 0xFF	; 255
    1fc0:	5f 4f       	sbci	r21, 0xFF	; 255

00001fc2 <__divmodsi4_exit>:
    1fc2:	08 95       	ret

00001fc4 <__negsi2>:
    1fc4:	90 95       	com	r25
    1fc6:	80 95       	com	r24
    1fc8:	70 95       	com	r23
    1fca:	61 95       	neg	r22
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fce:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd2:	08 95       	ret

00001fd4 <__umulhisi3>:
    1fd4:	a2 9f       	mul	r26, r18
    1fd6:	b0 01       	movw	r22, r0
    1fd8:	b3 9f       	mul	r27, r19
    1fda:	c0 01       	movw	r24, r0
    1fdc:	a3 9f       	mul	r26, r19
    1fde:	70 0d       	add	r23, r0
    1fe0:	81 1d       	adc	r24, r1
    1fe2:	11 24       	eor	r1, r1
    1fe4:	91 1d       	adc	r25, r1
    1fe6:	b2 9f       	mul	r27, r18
    1fe8:	70 0d       	add	r23, r0
    1fea:	81 1d       	adc	r24, r1
    1fec:	11 24       	eor	r1, r1
    1fee:	91 1d       	adc	r25, r1
    1ff0:	08 95       	ret

00001ff2 <__muluhisi3>:
    1ff2:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__umulhisi3>
    1ff6:	a5 9f       	mul	r26, r21
    1ff8:	90 0d       	add	r25, r0
    1ffa:	b4 9f       	mul	r27, r20
    1ffc:	90 0d       	add	r25, r0
    1ffe:	a4 9f       	mul	r26, r20
    2000:	80 0d       	add	r24, r0
    2002:	91 1d       	adc	r25, r1
    2004:	11 24       	eor	r1, r1
    2006:	08 95       	ret

00002008 <memcpy>:
    2008:	fb 01       	movw	r30, r22
    200a:	dc 01       	movw	r26, r24
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <memcpy+0xa>
    200e:	01 90       	ld	r0, Z+
    2010:	0d 92       	st	X+, r0
    2012:	41 50       	subi	r20, 0x01	; 1
    2014:	50 40       	sbci	r21, 0x00	; 0
    2016:	d8 f7       	brcc	.-10     	; 0x200e <memcpy+0x6>
    2018:	08 95       	ret

0000201a <__itoa_ncheck>:
    201a:	bb 27       	eor	r27, r27
    201c:	4a 30       	cpi	r20, 0x0A	; 10
    201e:	31 f4       	brne	.+12     	; 0x202c <__itoa_ncheck+0x12>
    2020:	99 23       	and	r25, r25
    2022:	22 f4       	brpl	.+8      	; 0x202c <__itoa_ncheck+0x12>
    2024:	bd e2       	ldi	r27, 0x2D	; 45
    2026:	90 95       	com	r25
    2028:	81 95       	neg	r24
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__utoa_common>

00002030 <__utoa_ncheck>:
    2030:	bb 27       	eor	r27, r27

00002032 <__utoa_common>:
    2032:	fb 01       	movw	r30, r22
    2034:	55 27       	eor	r21, r21
    2036:	aa 27       	eor	r26, r26
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	aa 1f       	adc	r26, r26
    203e:	a4 17       	cp	r26, r20
    2040:	10 f0       	brcs	.+4      	; 0x2046 <__utoa_common+0x14>
    2042:	a4 1b       	sub	r26, r20
    2044:	83 95       	inc	r24
    2046:	50 51       	subi	r21, 0x10	; 16
    2048:	b9 f7       	brne	.-18     	; 0x2038 <__utoa_common+0x6>
    204a:	a0 5d       	subi	r26, 0xD0	; 208
    204c:	aa 33       	cpi	r26, 0x3A	; 58
    204e:	08 f0       	brcs	.+2      	; 0x2052 <__utoa_common+0x20>
    2050:	a9 5d       	subi	r26, 0xD9	; 217
    2052:	a1 93       	st	Z+, r26
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	79 f7       	brne	.-34     	; 0x2036 <__utoa_common+0x4>
    2058:	b1 11       	cpse	r27, r1
    205a:	b1 93       	st	Z+, r27
    205c:	11 92       	st	Z+, r1
    205e:	cb 01       	movw	r24, r22
    2060:	0c 94 32 10 	jmp	0x2064	; 0x2064 <strrev>

00002064 <strrev>:
    2064:	dc 01       	movw	r26, r24
    2066:	fc 01       	movw	r30, r24
    2068:	67 2f       	mov	r22, r23
    206a:	71 91       	ld	r23, Z+
    206c:	77 23       	and	r23, r23
    206e:	e1 f7       	brne	.-8      	; 0x2068 <strrev+0x4>
    2070:	32 97       	sbiw	r30, 0x02	; 2
    2072:	04 c0       	rjmp	.+8      	; 0x207c <strrev+0x18>
    2074:	7c 91       	ld	r23, X
    2076:	6d 93       	st	X+, r22
    2078:	70 83       	st	Z, r23
    207a:	62 91       	ld	r22, -Z
    207c:	ae 17       	cp	r26, r30
    207e:	bf 07       	cpc	r27, r31
    2080:	c8 f3       	brcs	.-14     	; 0x2074 <strrev+0x10>
    2082:	08 95       	ret

00002084 <_exit>:
    2084:	f8 94       	cli

00002086 <__stop_program>:
    2086:	ff cf       	rjmp	.-2      	; 0x2086 <__stop_program>
