
MotorControlBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d4  00800100  00001f2e  00001fc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  008001d4  008001d4  00002096  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002096  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000540  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049d0  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cf2  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027ac  00000000  00000000  00008d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e90  00000000  00000000  0000b4b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001201  00000000  00000000  0000c344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037a6  00000000  00000000  0000d545  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e0  00000000  00000000  00010ceb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_7>
      20:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_8>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_15>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_17>
      48:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__vector_18>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      80:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__vector_32>
      84:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__vector_33>
      88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ee e2       	ldi	r30, 0x2E	; 46
      a8:	ff e1       	ldi	r31, 0x1F	; 31
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a4 3d       	cpi	r26, 0xD4	; 212
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	22 e0       	ldi	r18, 0x02	; 2
      b8:	a4 ed       	ldi	r26, 0xD4	; 212
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a2 34       	cpi	r26, 0x42	; 66
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <main>
      ca:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <init_ADC>:
#include "adc.h"
#include "timers.h"

/*Initialize the ADC and prepare it for reading*/
void init_ADC(){
	ADMUX = (1<<6); //5V VREF
      d2:	80 e4       	ldi	r24, 0x40	; 64
      d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	#if F_CPU < 10000000
	ADCSRA = (1<<ADPS2) | (1<<ADPS0); //Up to 10MHz, prescale by 32
	#else
	ADCSRA = (1<<ADPS2) | (1<<ADPS1); //For faster clocks, prescale by 64
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	86 e0       	ldi	r24, 0x06	; 6
      de:	80 83       	st	Z, r24
	#endif
	ADCSRA |= (1<<ADEN); //Enable the ADC
      e0:	80 81       	ld	r24, Z
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	80 83       	st	Z, r24
      e6:	08 95       	ret

000000e8 <read_ADC>:
  Return value:
  The 10-bit ADC result
*/
uint16_t read_ADC(uint8_t pin){
	uint8_t l,h;
	ADMUX = (ADMUX & 0xC0) | (pin & 7); //Setup ADC, preserve REFS0
      e8:	ec e7       	ldi	r30, 0x7C	; 124
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	90 81       	ld	r25, Z
      ee:	90 7c       	andi	r25, 0xC0	; 192
      f0:	87 70       	andi	r24, 0x07	; 7
      f2:	89 2b       	or	r24, r25
      f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start the conversion
      f6:	ea e7       	ldi	r30, 0x7A	; 122
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //Wait for conversion
     100:	80 81       	ld	r24, Z
     102:	86 fd       	sbrc	r24, 6
     104:	fd cf       	rjmp	.-6      	; 0x100 <read_ADC+0x18>
	l = ADCL;  //Read and return 10 bit result
     106:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	h = ADCH;
     10a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return (h << 8)|l; 
     10e:	90 e0       	ldi	r25, 0x00	; 0
}
     110:	92 2b       	or	r25, r18
     112:	08 95       	ret

00000114 <internalAREF>:

/*Switches to the internal (2.56V) Vref*/
void internalAREF(){
	if((ADMUX & 0xC0) != 0xC0){
     114:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     118:	80 7c       	andi	r24, 0xC0	; 192
     11a:	80 3c       	cpi	r24, 0xC0	; 192
     11c:	61 f0       	breq	.+24     	; 0x136 <internalAREF+0x22>
		ADMUX |= 0xC0;
     11e:	ec e7       	ldi	r30, 0x7C	; 124
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	80 6c       	ori	r24, 0xC0	; 192
     126:	80 83       	st	Z, r24
		delay_mS(5);
     128:	85 e0       	ldi	r24, 0x05	; 5
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 2e 0c 	call	0x185c	; 0x185c <delay_mS>
		read_ADC(0); //As per the datasheet, discard the first reading after changing AREF
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 74 00 	call	0xe8	; 0xe8 <read_ADC>
     136:	08 95       	ret

00000138 <detect_board>:
/*Tries to detect the board revision
Return:
1 if it is likely a revision 1 board or 2 if it is a rev. 2 board
*/
uint8_t detect_board(){
	internalAREF();
     138:	0e 94 8a 00 	call	0x114	; 0x114 <internalAREF>
	uint16_t a = read_ADC(0);
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 74 00 	call	0xe8	; 0xe8 <read_ADC>
	if(a > 384 && a < 640){
     142:	81 58       	subi	r24, 0x81	; 129
     144:	91 40       	sbci	r25, 0x01	; 1
     146:	8f 3f       	cpi	r24, 0xFF	; 255
     148:	91 05       	cpc	r25, r1
     14a:	10 f0       	brcs	.+4      	; 0x150 <detect_board+0x18>
		return 2;
	}
	return 1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	08 95       	ret
*/
uint8_t detect_board(){
	internalAREF();
	uint16_t a = read_ADC(0);
	if(a > 384 && a < 640){
		return 2;
     150:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 1;
}
     152:	08 95       	ret

00000154 <do_board_specific_setup>:

/*Does setup specific to the board
  Parameters:
  the CAN address of the board
*/
void do_board_specific_setup(uint8_t addr){
     154:	cf 93       	push	r28
     156:	c8 2f       	mov	r28, r24
		set_LED(3, 3);
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
		set_Kp(120, 0);
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	88 e7       	ldi	r24, 0x78	; 120
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 10 05 	call	0xa20	; 0xa20 <set_Kp>
		set_Ki(20, 0);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	84 e1       	ldi	r24, 0x14	; 20
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 17 05 	call	0xa2e	; 0xa2e <set_Ki>
		set_Kd(170, 0);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	8a ea       	ldi	r24, 0xAA	; 170
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 1e 05 	call	0xa3c	; 0xa3c <set_Kd>
		switch(addr){
     184:	c2 30       	cpi	r28, 0x02	; 2
     186:	71 f0       	breq	.+28     	; 0x1a4 <do_board_specific_setup+0x50>
     188:	18 f4       	brcc	.+6      	; 0x190 <do_board_specific_setup+0x3c>
     18a:	cc 23       	and	r28, r28
     18c:	31 f0       	breq	.+12     	; 0x19a <do_board_specific_setup+0x46>
     18e:	1d c0       	rjmp	.+58     	; 0x1ca <do_board_specific_setup+0x76>
     190:	c3 30       	cpi	r28, 0x03	; 3
     192:	81 f0       	breq	.+32     	; 0x1b4 <do_board_specific_setup+0x60>
     194:	c6 30       	cpi	r28, 0x06	; 6
     196:	99 f0       	breq	.+38     	; 0x1be <do_board_specific_setup+0x6a>
     198:	18 c0       	rjmp	.+48     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x0: //Base rotation:
				set_ticks_per_10degrees(172);
     19a:	8c ea       	ldi	r24, 0xAC	; 172
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_ticks_per_10degrees>
				break;
     1a2:	13 c0       	rjmp	.+38     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x2: //Elbow
				set_motor_reverse(1);
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 38 09 	call	0x1270	; 0x1270 <set_motor_reverse>
				set_ticks_per_10degrees(85);
     1aa:	85 e5       	ldi	r24, 0x55	; 85
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_ticks_per_10degrees>
				break;
     1b2:	0b c0       	rjmp	.+22     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x3: //Forearm rotation
				set_ticks_per_10degrees(68);
     1b4:	84 e4       	ldi	r24, 0x44	; 68
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_ticks_per_10degrees>
				break;
     1bc:	06 c0       	rjmp	.+12     	; 0x1ca <do_board_specific_setup+0x76>
			case 0x6: //Hand
				init_servo();
     1be:	0e 94 47 0b 	call	0x168e	; 0x168e <init_servo>
				set_servo_position(0);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <set_servo_position>
				break;
		}
		#ifdef REV_2
		tprintf("REV. 2 firmware\n");
     1ca:	86 e0       	ldi	r24, 0x06	; 6
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	9f 93       	push	r25
     1d0:	8f 93       	push	r24
     1d2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <tprintf>
		#endif
		uint8_t rev = detect_board();
     1d6:	0e 94 9c 00 	call	0x138	; 0x138 <detect_board>
     1da:	c8 2f       	mov	r28, r24
		tprintf("Detecting board rev: %d\n", rev);
     1dc:	1f 92       	push	r1
     1de:	8f 93       	push	r24
     1e0:	87 e1       	ldi	r24, 0x17	; 23
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	9f 93       	push	r25
     1e6:	8f 93       	push	r24
     1e8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <tprintf>
		#ifdef REV_2
		if(rev != 2){
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	c2 30       	cpi	r28, 0x02	; 2
     1fa:	81 f0       	breq	.+32     	; 0x21c <do_board_specific_setup+0xc8>
			tprintf("***WARNING*** Rev. 2 firmware on Rev. 1 board\n");
     1fc:	80 e3       	ldi	r24, 0x30	; 48
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	9f 93       	push	r25
     202:	8f 93       	push	r24
     204:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <tprintf>
			set_LED(0, 3);
     208:	63 e0       	ldi	r22, 0x03	; 3
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
			delay_mS(1000);
     210:	88 ee       	ldi	r24, 0xE8	; 232
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	0e 94 2e 0c 	call	0x185c	; 0x185c <delay_mS>
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
			tprintf("***WARNING*** Rev. 1 firmware on Rev. 2 board\n")
			set_LED(0, 3);
			delay_mS(1000);
		}
		#endif
}
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <GetModeFromPacket>:
{
    packetToAssemble->id = ConstructCANID(PRIO_MOTOR_UNIT_ENC_PPJR_SET, targetDeviceGroup, targetDeviceSerial);
    packetToAssemble->dlc = DLC_MOTOR_UNIT_ENC_PPJR_SET;
    int nextByte = WritePacketIDOnly(packetToAssemble->data, ID_MOTOR_UNIT_ENC_PPJR_SET);
    PackIntIntoDataMSBFirst(packetToAssemble->data, pulses, nextByte);
}
     220:	fc 01       	movw	r30, r24
     222:	84 81       	ldd	r24, Z+4	; 0x04
     224:	08 95       	ret

00000226 <GetPWMFromPacket>:
     226:	42 e0       	ldi	r20, 0x02	; 2
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	03 96       	adiw	r24, 0x03	; 3
     230:	0e 94 30 01 	call	0x260	; 0x260 <DecodeBytesToIntMSBFirst>
     234:	08 95       	ret

00000236 <GetPIDTargetFromPacket>:
     236:	45 e0       	ldi	r20, 0x05	; 5
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	61 e0       	ldi	r22, 0x01	; 1
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	03 96       	adiw	r24, 0x03	; 3
     240:	0e 94 30 01 	call	0x260	; 0x260 <DecodeBytesToIntMSBFirst>
     244:	86 2f       	mov	r24, r22
     246:	08 95       	ret

00000248 <GetEncoderPPJRFromPacket>:

uint32_t GetEncoderPPJRFromPacket(CANPacket *packet)
{
    return DecodeBytesToIntMSBFirst(packet->data, 1, 4);
     248:	44 e0       	ldi	r20, 0x04	; 4
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	03 96       	adiw	r24, 0x03	; 3
     252:	0e 94 30 01 	call	0x260	; 0x260 <DecodeBytesToIntMSBFirst>
}
     256:	08 95       	ret

00000258 <GetPacketID>:
void PackShortIntoDataMSBFirst(uint8_t *data, int16_t dataToPack, int startIndex)
{
	data[startIndex + 0] = (dataToPack & 0xFF00) >> 8;
	data[startIndex + 1] = (dataToPack & 0x00FF);
}

     258:	fc 01       	movw	r30, r24
     25a:	83 81       	ldd	r24, Z+3	; 0x03
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	08 95       	ret

00000260 <DecodeBytesToIntMSBFirst>:
int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
    int length = 4;
    int32_t decodedData = 0; 
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29

    if (endIndex > 0 && startIndex >= 0) {
        length = endIndex - startIndex + 1;
        if (length > 4) { length = 4; }
     26c:	14 16       	cp	r1, r20
     26e:	15 06       	cpc	r1, r21
     270:	9c f4       	brge	.+38     	; 0x298 <DecodeBytesToIntMSBFirst+0x38>
     272:	77 23       	and	r23, r23
     274:	a4 f0       	brlt	.+40     	; 0x29e <DecodeBytesToIntMSBFirst+0x3e>
        if (length < 1) { length = 0; }
     276:	ea 01       	movw	r28, r20
     278:	c6 1b       	sub	r28, r22
     27a:	d7 0b       	sbc	r29, r23
     27c:	21 96       	adiw	r28, 0x01	; 1
     27e:	c5 30       	cpi	r28, 0x05	; 5
     280:	d1 05       	cpc	r29, r1
     282:	14 f0       	brlt	.+4      	; 0x288 <DecodeBytesToIntMSBFirst+0x28>
     284:	c4 e0       	ldi	r28, 0x04	; 4
     286:	d0 e0       	ldi	r29, 0x00	; 0
     288:	dd 23       	and	r29, r29
     28a:	14 f4       	brge	.+4      	; 0x290 <DecodeBytesToIntMSBFirst+0x30>
     28c:	c0 e0       	ldi	r28, 0x00	; 0
     28e:	d0 e0       	ldi	r29, 0x00	; 0
    }

    for (int i = 0; i < length; i++) 
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
     290:	1c 16       	cp	r1, r28
     292:	1d 06       	cpc	r1, r29
     294:	34 f0       	brlt	.+12     	; 0x2a2 <DecodeBytesToIntMSBFirst+0x42>
     296:	2d c0       	rjmp	.+90     	; 0x2f2 <DecodeBytesToIntMSBFirst+0x92>
     298:	c4 e0       	ldi	r28, 0x04	; 4
     29a:	d0 e0       	ldi	r29, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DecodeBytesToIntMSBFirst+0x42>
     29e:	c4 e0       	ldi	r28, 0x04	; 4
     2a0:	d0 e0       	ldi	r29, 0x00	; 0
     2a2:	dc 01       	movw	r26, r24
     2a4:	a6 0f       	add	r26, r22
     2a6:	b7 1f       	adc	r27, r23
     2a8:	9e 01       	movw	r18, r28
     2aa:	21 50       	subi	r18, 0x01	; 1
     2ac:	31 09       	sbc	r19, r1
     2ae:	22 0f       	add	r18, r18
     2b0:	33 1f       	adc	r19, r19
     2b2:	22 0f       	add	r18, r18
     2b4:	33 1f       	adc	r19, r19
     2b6:	22 0f       	add	r18, r18
     2b8:	33 1f       	adc	r19, r19
     2ba:	e0 e0       	ldi	r30, 0x00	; 0
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	c1 2c       	mov	r12, r1
     2c0:	d1 2c       	mov	r13, r1
     2c2:	76 01       	movw	r14, r12
    }
    return decodedData;
     2c4:	4d 91       	ld	r20, X+
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	02 2e       	mov	r0, r18
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DecodeBytesToIntMSBFirst+0x70>
     2cc:	44 0f       	add	r20, r20
     2ce:	55 1f       	adc	r21, r21
     2d0:	0a 94       	dec	r0
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DecodeBytesToIntMSBFirst+0x6c>
     2d4:	05 2e       	mov	r0, r21
     2d6:	00 0c       	add	r0, r0
     2d8:	66 0b       	sbc	r22, r22
     2da:	77 0b       	sbc	r23, r23
     2dc:	c4 2a       	or	r12, r20
     2de:	d5 2a       	or	r13, r21
     2e0:	e6 2a       	or	r14, r22
     2e2:	f7 2a       	or	r15, r23
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
     2e4:	31 96       	adiw	r30, 0x01	; 1
     2e6:	28 50       	subi	r18, 0x08	; 8
     2e8:	31 09       	sbc	r19, r1
     2ea:	ec 17       	cp	r30, r28
     2ec:	fd 07       	cpc	r31, r29
     2ee:	54 f3       	brlt	.-44     	; 0x2c4 <DecodeBytesToIntMSBFirst+0x64>
     2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <DecodeBytesToIntMSBFirst+0x98>
int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
    int length = 4;
    int32_t decodedData = 0; 

    if (endIndex > 0 && startIndex >= 0) {
     2f2:	c1 2c       	mov	r12, r1
     2f4:	d1 2c       	mov	r13, r1
     2f6:	76 01       	movw	r14, r12
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
    }
    return decodedData;
}
     2f8:	c7 01       	movw	r24, r14
     2fa:	b6 01       	movw	r22, r12
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	08 95       	ret

0000030a <__vector_17>:

#ifdef DEBOUNCE
volatile uint16_t lastA, lastB;
#endif

ISR(TIMER0_OVF_vect){
     30a:	1f 92       	push	r1
     30c:	0f 92       	push	r0
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	0f 92       	push	r0
     312:	11 24       	eor	r1, r1
     314:	8f 93       	push	r24
     316:	9f 93       	push	r25
	gate_control++;
     318:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <gate_control>
     31c:	8f 5f       	subi	r24, 0xFF	; 255
     31e:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <gate_control>
	if(gate_control == gate_control_top){
     322:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <gate_control>
     326:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <gate_control_top>
     32a:	98 13       	cpse	r25, r24
     32c:	0e c0       	rjmp	.+28     	; 0x34a <__vector_17+0x40>
		raw_velocity = vticks;
     32e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     332:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     336:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <raw_velocity+0x1>
     33a:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <raw_velocity>
		vticks = gate_control = 0;
     33e:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <gate_control>
     342:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <vticks+0x1>
     346:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <vticks>
	}
}
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <get_encoder_ticks>:

/*Returns the total number of encoder ticks since the last reset*/
int32_t get_encoder_ticks(){
	//return -19;
	//return 0;
	return encoder_ticks;
     358:	60 91 e1 01 	lds	r22, 0x01E1	; 0x8001e1 <encoder_ticks>
     35c:	70 91 e2 01 	lds	r23, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     360:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     364:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
	//return 255;
}
     368:	08 95       	ret

0000036a <set_encoder_ticks>:

/*Sets the encoder counter to the specified value*/
void set_encoder_ticks(int32_t ticks){
	encoder_ticks = ticks;
     36a:	60 93 e1 01 	sts	0x01E1, r22	; 0x8001e1 <encoder_ticks>
     36e:	70 93 e2 01 	sts	0x01E2, r23	; 0x8001e2 <encoder_ticks+0x1>
     372:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <encoder_ticks+0x2>
     376:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <encoder_ticks+0x3>
     37a:	08 95       	ret

0000037c <init_encoder>:
}

/*Initializes the encoder with A on PE6 and B on PE7*/
void init_encoder(){
	EIMSK &= 0x3F; //Disable pin change interrupts
     37c:	8d b3       	in	r24, 0x1d	; 29
     37e:	8f 73       	andi	r24, 0x3F	; 63
     380:	8d bb       	out	0x1d, r24	; 29
	DDRE &= 0x3F; //Set PE6, PE7 as inputs
     382:	8d b1       	in	r24, 0x0d	; 13
     384:	8f 73       	andi	r24, 0x3F	; 63
     386:	8d b9       	out	0x0d, r24	; 13
	PORTE |= 0xC0; //Enable pullups on PE6, PE7
     388:	8e b1       	in	r24, 0x0e	; 14
     38a:	80 6c       	ori	r24, 0xC0	; 192
     38c:	8e b9       	out	0x0e, r24	; 14
	encoder_ticks = 0; //Reset count
     38e:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <encoder_ticks>
     392:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <encoder_ticks+0x1>
     396:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <encoder_ticks+0x2>
     39a:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <encoder_ticks+0x3>
	gate_control_top = 24; //Short gate time
     39e:	88 e1       	ldi	r24, 0x18	; 24
     3a0:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <gate_control_top>
	EICRB |= 0x50; //Enable pin change interrupt on PE6, PE7
     3a4:	ea e6       	ldi	r30, 0x6A	; 106
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	80 65       	ori	r24, 0x50	; 80
     3ac:	80 83       	st	Z, r24
	EICRA = 0;
     3ae:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK |= 0xC0;
     3b2:	8d b3       	in	r24, 0x1d	; 29
     3b4:	80 6c       	ori	r24, 0xC0	; 192
     3b6:	8d bb       	out	0x1d, r24	; 29
     3b8:	08 95       	ret

000003ba <reset_encoder>:
}

/*Resets the encoder count*/
void reset_encoder(){
	EIMSK &= 0x3F; //Disable pin change interrupts
     3ba:	8d b3       	in	r24, 0x1d	; 29
     3bc:	8f 73       	andi	r24, 0x3F	; 63
     3be:	8d bb       	out	0x1d, r24	; 29
	encoder_ticks = 0; //Reset count
     3c0:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <encoder_ticks>
     3c4:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <encoder_ticks+0x1>
     3c8:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <encoder_ticks+0x2>
     3cc:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <encoder_ticks+0x3>
	vticks = 0;
     3d0:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <vticks+0x1>
     3d4:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <vticks>
	raw_velocity = 0;
     3d8:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <raw_velocity+0x1>
     3dc:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <raw_velocity>
	gate_control = 0;
     3e0:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <gate_control>
	EIMSK |= 0xC0; //Enable pin change interrupt on PE6, PE7
     3e4:	8d b3       	in	r24, 0x1d	; 29
     3e6:	80 6c       	ori	r24, 0xC0	; 192
     3e8:	8d bb       	out	0x1d, r24	; 29
     3ea:	08 95       	ret

000003ec <get_encoder_velocity>:
}

/*Returns the encoder velocity in ticks/second*/
int16_t get_encoder_velocity(){
	int16_t rv = raw_velocity;
     3ec:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <raw_velocity>
     3f0:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <raw_velocity+0x1>
	int16_t velocity;
	if(gate_control_top == 24){
     3f4:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <gate_control_top>
     3f8:	28 31       	cpi	r18, 0x18	; 24
     3fa:	59 f5       	brne	.+86     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
		if(rv < 5 && rv > -5){ //If it's slow, increase the gate time
     3fc:	9c 01       	movw	r18, r24
     3fe:	2c 5f       	subi	r18, 0xFC	; 252
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	29 30       	cpi	r18, 0x09	; 9
     404:	31 05       	cpc	r19, r1
     406:	18 f4       	brcc	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			gate_control_top = 122;
     408:	2a e7       	ldi	r18, 0x7A	; 122
     40a:	20 93 db 01 	sts	0x01DB, r18	; 0x8001db <gate_control_top>
			//tprintf("GCT=122\n");
		}
		velocity = (rv * 60)/4 + old_velocity/4; //Compute velocity and low pass filter
     40e:	4c e3       	ldi	r20, 0x3C	; 60
     410:	48 9f       	mul	r20, r24
     412:	90 01       	movw	r18, r0
     414:	49 9f       	mul	r20, r25
     416:	30 0d       	add	r19, r0
     418:	11 24       	eor	r1, r1
     41a:	33 23       	and	r19, r19
     41c:	14 f4       	brge	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     41e:	2d 5f       	subi	r18, 0xFD	; 253
     420:	3f 4f       	sbci	r19, 0xFF	; 255
     422:	35 95       	asr	r19
     424:	27 95       	ror	r18
     426:	35 95       	asr	r19
     428:	27 95       	ror	r18
     42a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <old_velocity>
     42e:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <old_velocity+0x1>
     432:	99 23       	and	r25, r25
     434:	0c f4       	brge	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     436:	03 96       	adiw	r24, 0x03	; 3
     438:	95 95       	asr	r25
     43a:	87 95       	ror	r24
     43c:	95 95       	asr	r25
     43e:	87 95       	ror	r24
     440:	28 0f       	add	r18, r24
     442:	39 1f       	adc	r19, r25
		old_velocity = velocity;
     444:	30 93 da 01 	sts	0x01DA, r19	; 0x8001da <old_velocity+0x1>
     448:	20 93 d9 01 	sts	0x01D9, r18	; 0x8001d9 <old_velocity>
		return velocity;
     44c:	82 2f       	mov	r24, r18
     44e:	93 2f       	mov	r25, r19
     450:	08 95       	ret
	} else if(gate_control_top == 122){ //If it's fast, decrease gate time
     452:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <gate_control_top>
     456:	2a 37       	cpi	r18, 0x7A	; 122
     458:	79 f5       	brne	.+94     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		if(rv > 80 || rv < -80){
     45a:	9c 01       	movw	r18, r24
     45c:	20 5b       	subi	r18, 0xB0	; 176
     45e:	3f 4f       	sbci	r19, 0xFF	; 255
     460:	21 3a       	cpi	r18, 0xA1	; 161
     462:	31 05       	cpc	r19, r1
     464:	18 f0       	brcs	.+6      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
			gate_control_top = 24;
     466:	28 e1       	ldi	r18, 0x18	; 24
     468:	20 93 db 01 	sts	0x01DB, r18	; 0x8001db <gate_control_top>
			//tprintf("GCT=24\n");
		}
		velocity = (rv * 12)/4 + old_velocity/4; //Compute velocity and LPF
     46c:	9c 01       	movw	r18, r24
     46e:	22 0f       	add	r18, r18
     470:	33 1f       	adc	r19, r19
     472:	82 0f       	add	r24, r18
     474:	93 1f       	adc	r25, r19
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	9c 01       	movw	r18, r24
     480:	99 23       	and	r25, r25
     482:	14 f4       	brge	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     484:	2d 5f       	subi	r18, 0xFD	; 253
     486:	3f 4f       	sbci	r19, 0xFF	; 255
     488:	35 95       	asr	r19
     48a:	27 95       	ror	r18
     48c:	35 95       	asr	r19
     48e:	27 95       	ror	r18
     490:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <old_velocity>
     494:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <old_velocity+0x1>
     498:	99 23       	and	r25, r25
     49a:	0c f4       	brge	.+2      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     49c:	03 96       	adiw	r24, 0x03	; 3
     49e:	95 95       	asr	r25
     4a0:	87 95       	ror	r24
     4a2:	95 95       	asr	r25
     4a4:	87 95       	ror	r24
     4a6:	28 0f       	add	r18, r24
     4a8:	39 1f       	adc	r19, r25
		old_velocity = velocity;
     4aa:	30 93 da 01 	sts	0x01DA, r19	; 0x8001da <old_velocity+0x1>
     4ae:	20 93 d9 01 	sts	0x01D9, r18	; 0x8001d9 <old_velocity>
		return velocity;
     4b2:	82 2f       	mov	r24, r18
     4b4:	93 2f       	mov	r25, r19
     4b6:	08 95       	ret
	}
	return -1;
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	9f ef       	ldi	r25, 0xFF	; 255
}
     4bc:	08 95       	ret

000004be <__vector_7>:

ISR(INT6_vect){ //PE6, A
     4be:	1f 92       	push	r1
     4c0:	0f 92       	push	r0
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	0f 92       	push	r0
     4c6:	11 24       	eor	r1, r1
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
     4cc:	af 93       	push	r26
     4ce:	bf 93       	push	r27
	#ifdef DEBOUNCE
	uint16_t tc = TCNT1;
	if(tc > lastA && tc - lastA < 400) return;
	lastA = tc;
	#endif
	uint8_t state = PINE;
     4d0:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE6)){ //A rising
     4d2:	86 ff       	sbrs	r24, 6
     4d4:	3c c0       	rjmp	.+120    	; 0x54e <__vector_7+0x90>
		if(state & (1<<PE7)){ //B high
     4d6:	88 23       	and	r24, r24
     4d8:	ec f4       	brge	.+58     	; 0x514 <__vector_7+0x56>
			encoder_ticks++;
     4da:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     4de:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     4e2:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     4e6:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	a1 1d       	adc	r26, r1
     4ee:	b1 1d       	adc	r27, r1
     4f0:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     4f4:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     4f8:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     4fc:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks++;
     500:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     504:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     50e:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     512:	58 c0       	rjmp	.+176    	; 0x5c4 <__vector_7+0x106>
		} else { //B low
			encoder_ticks--;
     514:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     518:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     51c:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     520:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	a1 09       	sbc	r26, r1
     528:	b1 09       	sbc	r27, r1
     52a:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     52e:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     532:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     536:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks--;
     53a:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     53e:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     542:	01 97       	sbiw	r24, 0x01	; 1
     544:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     548:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     54c:	3b c0       	rjmp	.+118    	; 0x5c4 <__vector_7+0x106>
		}
	} else { //A falling
		if(state & (1<<PE7)){ //B high
     54e:	88 23       	and	r24, r24
     550:	ec f4       	brge	.+58     	; 0x58c <__vector_7+0xce>
			encoder_ticks--;
     552:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     556:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     55a:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     55e:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	a1 09       	sbc	r26, r1
     566:	b1 09       	sbc	r27, r1
     568:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     56c:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     570:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     574:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks--;
     578:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     57c:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     586:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     58a:	1c c0       	rjmp	.+56     	; 0x5c4 <__vector_7+0x106>
		} else { //B low
			encoder_ticks++;
     58c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     590:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     594:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     598:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	a1 1d       	adc	r26, r1
     5a0:	b1 1d       	adc	r27, r1
     5a2:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     5a6:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     5aa:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     5ae:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks++;
     5b2:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     5b6:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     5c0:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
		}
	}
}
     5c4:	bf 91       	pop	r27
     5c6:	af 91       	pop	r26
     5c8:	9f 91       	pop	r25
     5ca:	8f 91       	pop	r24
     5cc:	0f 90       	pop	r0
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	0f 90       	pop	r0
     5d2:	1f 90       	pop	r1
     5d4:	18 95       	reti

000005d6 <__vector_8>:

ISR(INT7_vect){ //PE7, B
     5d6:	1f 92       	push	r1
     5d8:	0f 92       	push	r0
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	0f 92       	push	r0
     5de:	11 24       	eor	r1, r1
     5e0:	8f 93       	push	r24
     5e2:	9f 93       	push	r25
     5e4:	af 93       	push	r26
     5e6:	bf 93       	push	r27
	#ifdef DEBOUNCE
	uint16_t tc = TCNT1;
	if(tc > lastB && tc - lastB < 400) return;
	lastB = tc;
	#endif
	uint8_t state = PINE;
     5e8:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE7)){ //B rising
     5ea:	88 23       	and	r24, r24
     5ec:	e4 f5       	brge	.+120    	; 0x666 <__vector_8+0x90>
		if(state & (1<<PE6)){ //A high
     5ee:	86 ff       	sbrs	r24, 6
     5f0:	1d c0       	rjmp	.+58     	; 0x62c <__vector_8+0x56>
			encoder_ticks--;
     5f2:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     5f6:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     5fa:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     5fe:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	a1 09       	sbc	r26, r1
     606:	b1 09       	sbc	r27, r1
     608:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     60c:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     610:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     614:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks--;
     618:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     61c:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     626:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     62a:	58 c0       	rjmp	.+176    	; 0x6dc <__vector_8+0x106>
		} else { //A low
			encoder_ticks++;
     62c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     630:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     634:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     638:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	a1 1d       	adc	r26, r1
     640:	b1 1d       	adc	r27, r1
     642:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     646:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     64a:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     64e:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks++;
     652:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     656:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     660:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     664:	3b c0       	rjmp	.+118    	; 0x6dc <__vector_8+0x106>
		}
	} else { //B falling
		if(state & (1<<PE6)){ //A high
     666:	86 ff       	sbrs	r24, 6
     668:	1d c0       	rjmp	.+58     	; 0x6a4 <__vector_8+0xce>
			encoder_ticks++;
     66a:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     66e:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     672:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     676:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	a1 1d       	adc	r26, r1
     67e:	b1 1d       	adc	r27, r1
     680:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     684:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     688:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     68c:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks++;
     690:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     694:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     69e:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
     6a2:	1c c0       	rjmp	.+56     	; 0x6dc <__vector_8+0x106>
		} else { //A low
			encoder_ticks--;
     6a4:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <encoder_ticks>
     6a8:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <encoder_ticks+0x1>
     6ac:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <encoder_ticks+0x2>
     6b0:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <encoder_ticks+0x3>
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	a1 09       	sbc	r26, r1
     6b8:	b1 09       	sbc	r27, r1
     6ba:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <encoder_ticks>
     6be:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <encoder_ticks+0x1>
     6c2:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <encoder_ticks+0x2>
     6c6:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <encoder_ticks+0x3>
			vticks--;
     6ca:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <vticks>
     6ce:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <vticks+0x1>
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <vticks+0x1>
     6d8:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <vticks>
		}
	}
     6dc:	bf 91       	pop	r27
     6de:	af 91       	pop	r26
     6e0:	9f 91       	pop	r25
     6e2:	8f 91       	pop	r24
     6e4:	0f 90       	pop	r0
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	0f 90       	pop	r0
     6ea:	1f 90       	pop	r1
     6ec:	18 95       	reti

000006ee <get_dip_switch>:
#include "servo.h"
#include "usart.h"
#include "bss.h"

uint8_t get_dip_switch(){
	return (~PINA) & 0xF;
     6ee:	80 b1       	in	r24, 0x00	; 0
     6f0:	80 95       	com	r24
}
     6f2:	8f 70       	andi	r24, 0x0F	; 15
     6f4:	08 95       	ret

000006f6 <main>:

int main(){
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	2b 97       	sbiw	r28, 0x0b	; 11
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	de bf       	out	0x3e, r29	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	cd bf       	out	0x3d, r28	; 61
	CANPacket m;
	DDRA = 0xF0;
     70a:	80 ef       	ldi	r24, 0xF0	; 240
     70c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xF0;
     70e:	82 b9       	out	0x02, r24	; 2
	setup_timers();
     710:	0e 94 c8 0b 	call	0x1790	; 0x1790 <setup_timers>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     714:	2f ef       	ldi	r18, 0xFF	; 255
     716:	81 ee       	ldi	r24, 0xE1	; 225
     718:	94 e0       	ldi	r25, 0x04	; 4
     71a:	21 50       	subi	r18, 0x01	; 1
     71c:	80 40       	sbci	r24, 0x00	; 0
     71e:	90 40       	sbci	r25, 0x00	; 0
     720:	e1 f7       	brne	.-8      	; 0x71a <main+0x24>
     722:	00 c0       	rjmp	.+0      	; 0x724 <main+0x2e>
     724:	00 00       	nop
	_delay_ms(100);
	PORTA = 0;
     726:	12 b8       	out	0x02, r1	; 2
	set_LED(0, 3);
     728:	63 e0       	ldi	r22, 0x03	; 3
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
	sei();
     730:	78 94       	sei
	usart_init(19200); //Debug serial
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	7b e4       	ldi	r23, 0x4B	; 75
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <usart_init>
	set_LED(1, 3);
     73e:	63 e0       	ldi	r22, 0x03	; 3
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
	delay_mS(666); //Delay so one can connect to debug serial
     746:	8a e9       	ldi	r24, 0x9A	; 154
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	0e 94 2e 0c 	call	0x185c	; 0x185c <delay_mS>
	uint16_t my_address = getLocalDeviceSerial();
     74e:	0e 94 1f 0b 	call	0x163e	; 0x163e <getLocalDeviceSerial>
     752:	f8 2e       	mov	r15, r24
	tprintf("adr=%X\n", my_address);
     754:	c8 2e       	mov	r12, r24
     756:	d1 2c       	mov	r13, r1
     758:	1f 92       	push	r1
     75a:	8f 93       	push	r24
     75c:	8f e5       	ldi	r24, 0x5F	; 95
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <tprintf>
	delay_mS(250);
     768:	8a ef       	ldi	r24, 0xFA	; 250
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 2e 0c 	call	0x185c	; 0x185c <delay_mS>
	InitCAN(DEVICE_GROUP_MOTOR_CONTROL, my_address);
     770:	b6 01       	movw	r22, r12
     772:	84 e0       	ldi	r24, 0x04	; 4
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 81 0a 	call	0x1502	; 0x1502 <InitCAN>
	set_LED(2, 3);
     77a:	63 e0       	ldi	r22, 0x03	; 3
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
	init_encoder();
     782:	0e 94 be 01 	call	0x37c	; 0x37c <init_encoder>
	init_ADC();
     786:	0e 94 69 00 	call	0xd2	; 0xd2 <init_ADC>
	do_board_specific_setup(my_address);
     78a:	8f 2d       	mov	r24, r15
     78c:	0e 94 aa 00 	call	0x154	; 0x154 <do_board_specific_setup>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     790:	9f e0       	ldi	r25, 0x0F	; 15
     792:	88 e1       	ldi	r24, 0x18	; 24
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	a8 95       	wdr
     79a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	wdt_enable(WDTO_2S);
	init_motor();
     7a4:	0e 94 b6 05 	call	0xb6c	; 0xb6c <init_motor>
	//enable_motor();
	delay_mS(500);
     7a8:	84 ef       	ldi	r24, 0xF4	; 244
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 2e 0c 	call	0x185c	; 0x185c <delay_mS>
	set_LED(0, 0);
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
	set_LED(1, 0);
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
	set_LED(3, 0);
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
	while(1){
		if(PollAndReceiveCANPacket(&m) == 0){
			set_LED(3, 3);
			update_LEDS(get_mS()/40);
     7d0:	0f 2e       	mov	r0, r31
     7d2:	f8 e2       	ldi	r31, 0x28	; 40
     7d4:	cf 2e       	mov	r12, r31
     7d6:	d1 2c       	mov	r13, r1
     7d8:	e1 2c       	mov	r14, r1
     7da:	f1 2c       	mov	r15, r1
     7dc:	f0 2d       	mov	r31, r0
	delay_mS(500);
	set_LED(0, 0);
	set_LED(1, 0);
	set_LED(3, 0);
	while(1){
		if(PollAndReceiveCANPacket(&m) == 0){
     7de:	ce 01       	movw	r24, r28
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	0e 94 8a 0a 	call	0x1514	; 0x1514 <PollAndReceiveCANPacket>
     7e6:	89 2b       	or	r24, r25
     7e8:	a9 f4       	brne	.+42     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
			set_LED(3, 3);
     7ea:	63 e0       	ldi	r22, 0x03	; 3
     7ec:	83 e0       	ldi	r24, 0x03	; 3
     7ee:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
			update_LEDS(get_mS()/40);
     7f2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <get_mS>
     7f6:	a7 01       	movw	r20, r14
     7f8:	96 01       	movw	r18, r12
     7fa:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__udivmodsi4>
     7fe:	c9 01       	movw	r24, r18
     800:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <update_LEDS>
			handle_CAN_message(&m);
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	0e 94 23 04 	call	0x846	; 0x846 <handle_CAN_message>
			set_LED(3, 0);
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
		}
		if(get_motor_mode() & MOTOR_MODE_ENABLED){
     814:	0e 94 19 06 	call	0xc32	; 0xc32 <get_motor_mode>
     818:	80 ff       	sbrs	r24, 0
     81a:	09 c0       	rjmp	.+18     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
			set_LED(2, 3);
     81c:	63 e0       	ldi	r22, 0x03	; 3
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
			set_LED(1, 0);
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
     82c:	08 c0       	rjmp	.+16     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		} else {
			set_LED(1, 3);
     82e:	63 e0       	ldi	r22, 0x03	; 3
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
			set_LED(2, 0);
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
		}
		motor_control_tick();
     83e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <motor_control_tick>
		wdt_reset();
     842:	a8 95       	wdr
	}
     844:	cc cf       	rjmp	.-104    	; 0x7de <main+0xe8>

00000846 <handle_CAN_message>:
#include "CANMotorUnit.h"

uint32_t ppjr = 1;

/*Handle a received CAN message*/
void handle_CAN_message(CANPacket *m){
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	ec 01       	movw	r28, r24
	switch(GetPacketID(m)){
     84c:	0e 94 2c 01 	call	0x258	; 0x258 <GetPacketID>
     850:	8a 30       	cpi	r24, 0x0A	; 10
     852:	91 05       	cpc	r25, r1
     854:	09 f4       	brne	.+2      	; 0x858 <handle_CAN_message+0x12>
     856:	70 c0       	rjmp	.+224    	; 0x938 <__stack+0x39>
     858:	5c f4       	brge	.+22     	; 0x870 <handle_CAN_message+0x2a>
     85a:	83 30       	cpi	r24, 0x03	; 3
     85c:	91 05       	cpc	r25, r1
     85e:	79 f1       	breq	.+94     	; 0x8be <handle_CAN_message+0x78>
     860:	84 30       	cpi	r24, 0x04	; 4
     862:	91 05       	cpc	r25, r1
     864:	09 f4       	brne	.+2      	; 0x868 <handle_CAN_message+0x22>
     866:	45 c0       	rjmp	.+138    	; 0x8f2 <handle_CAN_message+0xac>
     868:	89 2b       	or	r24, r25
     86a:	09 f0       	breq	.+2      	; 0x86e <handle_CAN_message+0x28>
     86c:	8d c0       	rjmp	.+282    	; 0x988 <__stack+0x89>
     86e:	0c c0       	rjmp	.+24     	; 0x888 <handle_CAN_message+0x42>
     870:	80 3f       	cpi	r24, 0xF0	; 240
     872:	91 05       	cpc	r25, r1
     874:	09 f4       	brne	.+2      	; 0x878 <handle_CAN_message+0x32>
     876:	57 c0       	rjmp	.+174    	; 0x926 <__stack+0x27>
     878:	8f 3f       	cpi	r24, 0xFF	; 255
     87a:	91 05       	cpc	r25, r1
     87c:	09 f4       	brne	.+2      	; 0x880 <handle_CAN_message+0x3a>
     87e:	68 c0       	rjmp	.+208    	; 0x950 <__stack+0x51>
     880:	0c 97       	sbiw	r24, 0x0c	; 12
     882:	09 f0       	breq	.+2      	; 0x886 <handle_CAN_message+0x40>
     884:	81 c0       	rjmp	.+258    	; 0x988 <__stack+0x89>
     886:	52 c0       	rjmp	.+164    	; 0x92c <__stack+0x2d>
		case ID_MOTOR_UNIT_MODE_SEL:; //Set Mode
			uint8_t mode = GetModeFromPacket(m);
     888:	ce 01       	movw	r24, r28
     88a:	0e 94 10 01 	call	0x220	; 0x220 <GetModeFromPacket>
			if(mode == MOTOR_UNIT_MODE_PID){
     88e:	81 30       	cpi	r24, 0x01	; 1
     890:	61 f4       	brne	.+24     	; 0x8aa <handle_CAN_message+0x64>
				set_motor_mode(get_motor_mode() | MOTOR_MODE_PID);
     892:	0e 94 19 06 	call	0xc32	; 0xc32 <get_motor_mode>
     896:	82 60       	ori	r24, 0x02	; 2
     898:	0e 94 16 06 	call	0xc2c	; 0xc2c <set_motor_mode>
				set_target_position(get_encoder_ticks());
     89c:	0e 94 ac 01 	call	0x358	; 0x358 <get_encoder_ticks>
     8a0:	0e 94 25 05 	call	0xa4a	; 0xa4a <set_target_position>
				enable_motor();
     8a4:	0e 94 02 06 	call	0xc04	; 0xc04 <enable_motor>
     8a8:	8f c0       	rjmp	.+286    	; 0x9c8 <__stack+0xc9>
			} else if(mode == MOTOR_UNIT_MODE_PWM){
     8aa:	81 11       	cpse	r24, r1
     8ac:	8d c0       	rjmp	.+282    	; 0x9c8 <__stack+0xc9>
				set_motor_mode(get_motor_mode() & ~MOTOR_MODE_PID);
     8ae:	0e 94 19 06 	call	0xc32	; 0xc32 <get_motor_mode>
     8b2:	8d 7f       	andi	r24, 0xFD	; 253
     8b4:	0e 94 16 06 	call	0xc2c	; 0xc2c <set_motor_mode>
				enable_motor();
     8b8:	0e 94 02 06 	call	0xc04	; 0xc04 <enable_motor>
     8bc:	85 c0       	rjmp	.+266    	; 0x9c8 <__stack+0xc9>
			}
			break;
		case ID_MOTOR_UNIT_PWM_DIR_SET: //Set PWM/Direction
			if(!(get_motor_mode() & MOTOR_MODE_PID)){
     8be:	0e 94 19 06 	call	0xc32	; 0xc32 <get_motor_mode>
     8c2:	81 fd       	sbrc	r24, 1
     8c4:	81 c0       	rjmp	.+258    	; 0x9c8 <__stack+0xc9>
				int16_t mp = GetPWMFromPacket(m) / 32;
     8c6:	ce 01       	movw	r24, r28
     8c8:	0e 94 13 01 	call	0x226	; 0x226 <GetPWMFromPacket>
				set_motor_power(mp);
     8cc:	99 23       	and	r25, r25
     8ce:	24 f4       	brge	.+8      	; 0x8d8 <handle_CAN_message+0x92>
     8d0:	61 5e       	subi	r22, 0xE1	; 225
     8d2:	7f 4f       	sbci	r23, 0xFF	; 255
     8d4:	8f 4f       	sbci	r24, 0xFF	; 255
     8d6:	9f 4f       	sbci	r25, 0xFF	; 255
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	68 94       	set
     8de:	14 f8       	bld	r1, 4
     8e0:	b5 95       	asr	r27
     8e2:	a7 95       	ror	r26
     8e4:	97 95       	ror	r25
     8e6:	87 95       	ror	r24
     8e8:	16 94       	lsr	r1
     8ea:	d1 f7       	brne	.-12     	; 0x8e0 <handle_CAN_message+0x9a>
     8ec:	0e 94 25 06 	call	0xc4a	; 0xc4a <set_motor_power>
     8f0:	6b c0       	rjmp	.+214    	; 0x9c8 <__stack+0xc9>
			}
			break;
		case ID_MOTOR_UNIT_PID_POS_TGT_SET: //Set angle + velocity
			set_target_position(((GetPIDTargetFromPacket(m) * ppjr) / 360LL) / 1000LL);
     8f2:	ce 01       	movw	r24, r28
     8f4:	0e 94 1b 01 	call	0x236	; 0x236 <GetPIDTargetFromPacket>
     8f8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8fc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     900:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     904:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     908:	a8 2f       	mov	r26, r24
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__muluhisi3>
     910:	20 e4       	ldi	r18, 0x40	; 64
     912:	3e e7       	ldi	r19, 0x7E	; 126
     914:	45 e0       	ldi	r20, 0x05	; 5
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__udivmodsi4>
     91c:	ca 01       	movw	r24, r20
     91e:	b9 01       	movw	r22, r18
     920:	0e 94 25 05 	call	0xa4a	; 0xa4a <set_target_position>
			//set_target_velocity(param2);
			break;
     924:	51 c0       	rjmp	.+162    	; 0x9c8 <__stack+0xc9>
		case ID_ESTOP:
			disable_motor();
     926:	0e 94 0c 06 	call	0xc18	; 0xc18 <disable_motor>
			break;
     92a:	4e c0       	rjmp	.+156    	; 0x9c8 <__stack+0xc9>
		case ID_MOTOR_UNIT_ENC_INIT:
			set_encoder_ticks(0);
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	cb 01       	movw	r24, r22
     932:	0e 94 b5 01 	call	0x36a	; 0x36a <set_encoder_ticks>
			break;
     936:	48 c0       	rjmp	.+144    	; 0x9c8 <__stack+0xc9>
		case ID_MOTOR_UNIT_ENC_PPJR_SET:
			ppjr = GetEncoderPPJRFromPacket(m);
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 24 01 	call	0x248	; 0x248 <GetEncoderPPJRFromPacket>
     93e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     942:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     946:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     94a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			break;
     94e:	3c c0       	rjmp	.+120    	; 0x9c8 <__stack+0xc9>
			} else {
				DDRC &= ~2;
			}
			break;*/
		case 0xFF: /*error*/
			tprintf("Error\n");
     950:	87 e6       	ldi	r24, 0x67	; 103
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	9f 93       	push	r25
     956:	8f 93       	push	r24
     958:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <tprintf>
			set_LED(0, 2);
     95c:	62 e0       	ldi	r22, 0x02	; 2
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
			update_LEDS(get_mS()/40);
     964:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <get_mS>
     968:	28 e2       	ldi	r18, 0x28	; 40
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__udivmodsi4>
     974:	c9 01       	movw	r24, r18
     976:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <update_LEDS>
			set_LED(0, 0);
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
			break;
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	20 c0       	rjmp	.+64     	; 0x9c8 <__stack+0xc9>
			break;
		default:
			tprintf("Unknown CAN code %d\n", m->data[0]);
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	1f 92       	push	r1
     98c:	8f 93       	push	r24
     98e:	8e e6       	ldi	r24, 0x6E	; 110
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	9f 93       	push	r25
     994:	8f 93       	push	r24
     996:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <tprintf>
			set_LED(0, 2);
     99a:	62 e0       	ldi	r22, 0x02	; 2
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
			update_LEDS(get_mS()/40);
     9a2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <get_mS>
     9a6:	28 e2       	ldi	r18, 0x28	; 40
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__udivmodsi4>
     9b2:	c9 01       	movw	r24, r18
     9b4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <update_LEDS>
			set_LED(0, 0);
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
			break;
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
	}
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <set_motor_power_raw>:
}

/*Gets the motor maximum position*/
uint32_t get_motor_max_position(){
	return motor_max_pos;
}
     9ce:	81 15       	cp	r24, r1
     9d0:	24 e0       	ldi	r18, 0x04	; 4
     9d2:	92 07       	cpc	r25, r18
     9d4:	14 f0       	brlt	.+4      	; 0x9da <set_motor_power_raw+0xc>
     9d6:	8f ef       	ldi	r24, 0xFF	; 255
     9d8:	93 e0       	ldi	r25, 0x03	; 3
     9da:	bc 01       	movw	r22, r24
     9dc:	61 30       	cpi	r22, 0x01	; 1
     9de:	8c ef       	ldi	r24, 0xFC	; 252
     9e0:	78 07       	cpc	r23, r24
     9e2:	14 f4       	brge	.+4      	; 0x9e8 <set_motor_power_raw+0x1a>
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	7c ef       	ldi	r23, 0xFC	; 252
     9e8:	61 15       	cp	r22, r1
     9ea:	71 05       	cpc	r23, r1
     9ec:	21 f0       	breq	.+8      	; 0x9f6 <set_motor_power_raw+0x28>
     9ee:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <motor_mode>
     9f2:	80 fd       	sbrc	r24, 0
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <set_motor_power_raw+0x36>
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	83 e0       	ldi	r24, 0x03	; 3
     9fc:	0e 94 22 0b 	call	0x1644	; 0x1644 <write_PWM>
     a00:	73 98       	cbi	0x0e, 3	; 14
     a02:	08 95       	ret
     a04:	77 23       	and	r23, r23
     a06:	34 f4       	brge	.+12     	; 0xa14 <set_motor_power_raw+0x46>
     a08:	72 99       	sbic	0x0e, 2	; 14
     a0a:	72 98       	cbi	0x0e, 2	; 14
     a0c:	71 95       	neg	r23
     a0e:	61 95       	neg	r22
     a10:	71 09       	sbc	r23, r1
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <set_motor_power_raw+0x4a>
     a14:	72 9b       	sbis	0x0e, 2	; 14
     a16:	72 9a       	sbi	0x0e, 2	; 14
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	0e 94 22 0b 	call	0x1644	; 0x1644 <write_PWM>
     a1e:	08 95       	ret

00000a20 <set_Kp>:
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	21 f0       	breq	.+8      	; 0xa2c <set_Kp+0xc>
     a24:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <Kp+0x1>
     a28:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <Kp>
     a2c:	08 95       	ret

00000a2e <set_Ki>:
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	21 f0       	breq	.+8      	; 0xa3a <set_Ki+0xc>
     a32:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <Ki+0x1>
     a36:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <Ki>
     a3a:	08 95       	ret

00000a3c <set_Kd>:
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	21 f0       	breq	.+8      	; 0xa48 <set_Kd+0xc>
     a40:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <Kd+0x1>
     a44:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Kd>
     a48:	08 95       	ret

00000a4a <set_target_position>:
     a4a:	cf 92       	push	r12
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	6b 01       	movw	r12, r22
     a54:	7c 01       	movw	r14, r24
     a56:	ff 92       	push	r15
     a58:	ef 92       	push	r14
     a5a:	df 92       	push	r13
     a5c:	6f 93       	push	r22
     a5e:	83 e8       	ldi	r24, 0x83	; 131
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	9f 93       	push	r25
     a64:	8f 93       	push	r24
     a66:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <tprintf>
     a6a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <motor_target_pos>
     a6e:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <motor_target_pos+0x1>
     a72:	8c 19       	sub	r24, r12
     a74:	9d 09       	sbc	r25, r13
     a76:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <int_abs>
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	85 36       	cpi	r24, 0x65	; 101
     a88:	91 05       	cpc	r25, r1
     a8a:	40 f0       	brcs	.+16     	; 0xa9c <set_target_position+0x52>
     a8c:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <pos_i>
     a90:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <pos_i+0x1>
     a94:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <pos_i+0x2>
     a98:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <pos_i+0x3>
     a9c:	c0 92 ef 01 	sts	0x01EF, r12	; 0x8001ef <motor_target_pos>
     aa0:	d0 92 f0 01 	sts	0x01F0, r13	; 0x8001f0 <motor_target_pos+0x1>
     aa4:	e0 92 f1 01 	sts	0x01F1, r14	; 0x8001f1 <motor_target_pos+0x2>
     aa8:	f0 92 f2 01 	sts	0x01F2, r15	; 0x8001f2 <motor_target_pos+0x3>
     aac:	ff 90       	pop	r15
     aae:	ef 90       	pop	r14
     ab0:	df 90       	pop	r13
     ab2:	cf 90       	pop	r12
     ab4:	08 95       	ret

00000ab6 <set_target_velocity>:
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	ec 01       	movw	r28, r24
     abc:	df 93       	push	r29
     abe:	cf 93       	push	r28
     ac0:	8b e9       	ldi	r24, 0x9B	; 155
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <tprintf>
     acc:	d0 93 f4 01 	sts	0x01F4, r29	; 0x8001f4 <motor_target_vel+0x1>
     ad0:	c0 93 f3 01 	sts	0x01F3, r28	; 0x8001f3 <motor_target_vel>
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	cd 37       	cpi	r28, 0x7D	; 125
     ade:	d1 05       	cpc	r29, r1
     ae0:	c8 f4       	brcc	.+50     	; 0xb14 <set_target_velocity+0x5e>
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <slow>
     ae8:	8d e7       	ldi	r24, 0x7D	; 125
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	be 01       	movw	r22, r28
     aee:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__udivmodhi4>
     af2:	41 e0       	ldi	r20, 0x01	; 1
     af4:	9e 01       	movw	r18, r28
     af6:	36 95       	lsr	r19
     af8:	27 95       	ror	r18
     afa:	28 17       	cp	r18, r24
     afc:	39 07       	cpc	r19, r25
     afe:	08 f0       	brcs	.+2      	; 0xb02 <set_target_velocity+0x4c>
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	8d e7       	ldi	r24, 0x7D	; 125
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	be 01       	movw	r22, r28
     b08:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__udivmodhi4>
     b0c:	64 0f       	add	r22, r20
     b0e:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <tgt_inc>
     b12:	15 c0       	rjmp	.+42     	; 0xb3e <set_target_velocity+0x88>
     b14:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <slow>
     b18:	9e 01       	movw	r18, r28
     b1a:	af ea       	ldi	r26, 0xAF	; 175
     b1c:	b7 e4       	ldi	r27, 0x47	; 71
     b1e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <__umulhisi3>
     b22:	c8 1b       	sub	r28, r24
     b24:	d9 0b       	sbc	r29, r25
     b26:	d6 95       	lsr	r29
     b28:	c7 95       	ror	r28
     b2a:	8c 0f       	add	r24, r28
     b2c:	9d 1f       	adc	r25, r29
     b2e:	92 95       	swap	r25
     b30:	82 95       	swap	r24
     b32:	8f 70       	andi	r24, 0x0F	; 15
     b34:	89 27       	eor	r24, r25
     b36:	9f 70       	andi	r25, 0x0F	; 15
     b38:	89 27       	eor	r24, r25
     b3a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <tgt_inc>
     b3e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <tgt_inc>
     b42:	1f 92       	push	r1
     b44:	8f 93       	push	r24
     b46:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <slow>
     b4a:	1f 92       	push	r1
     b4c:	8f 93       	push	r24
     b4e:	83 eb       	ldi	r24, 0xB3	; 179
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	9f 93       	push	r25
     b54:	8f 93       	push	r24
     b56:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <tprintf>
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <init_motor>:
     b6c:	73 98       	cbi	0x0e, 3	; 14
     b6e:	6b 9a       	sbi	0x0d, 3	; 13
     b70:	6a 9a       	sbi	0x0d, 2	; 13
     b72:	72 9a       	sbi	0x0e, 2	; 14
     b74:	80 98       	cbi	0x10, 0	; 16
     b76:	74 9a       	sbi	0x0e, 4	; 14
     b78:	6d 9a       	sbi	0x0d, 5	; 13
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	8b b9       	out	0x0b, r24	; 11
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	94 e0       	ldi	r25, 0x04	; 4
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <motor_max_pos>
     b8a:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <motor_max_pos+0x1>
     b8e:	a0 93 f7 01 	sts	0x01F7, r26	; 0x8001f7 <motor_max_pos+0x2>
     b92:	b0 93 f8 01 	sts	0x01F8, r27	; 0x8001f8 <motor_max_pos+0x3>
     b96:	88 e8       	ldi	r24, 0x88	; 136
     b98:	93 e1       	ldi	r25, 0x13	; 19
     b9a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <motor_max_current+0x1>
     b9e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <motor_max_current>
     ba2:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <motor_target_pos>
     ba6:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <motor_target_pos+0x1>
     baa:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <motor_target_pos+0x2>
     bae:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <motor_target_pos+0x3>
     bb2:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <pid_runs+0x1>
     bb6:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <pid_runs>
     bba:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <motor_power+0x1>
     bbe:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <motor_power>
     bc2:	8c e8       	ldi	r24, 0x8C	; 140
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <Kp+0x1>
     bca:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <Kp>
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <Ki+0x1>
     bd6:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <Ki>
     bda:	84 e6       	ldi	r24, 0x64	; 100
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <Kd+0x1>
     be2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Kd>
     be6:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <pid_target>
     bea:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <pid_target+0x1>
     bee:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <pid_target+0x2>
     bf2:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <pid_target+0x3>
     bf6:	8a ef       	ldi	r24, 0xFA	; 250
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 5b 05 	call	0xab6	; 0xab6 <set_target_velocity>
     bfe:	0e 94 be 01 	call	0x37c	; 0x37c <init_encoder>
     c02:	08 95       	ret

00000c04 <enable_motor>:
     c04:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <motor_mode>
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <motor_mode>
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
     c16:	08 95       	ret

00000c18 <disable_motor>:
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <set_motor_power_raw>
     c20:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <motor_mode>
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <motor_mode>
     c2a:	08 95       	ret

00000c2c <set_motor_mode>:
     c2c:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <motor_mode>
     c30:	08 95       	ret

00000c32 <get_motor_mode>:
     c32:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <motor_mode>
     c36:	08 95       	ret

00000c38 <get_motor_limit_switch_state>:
     c38:	89 b1       	in	r24, 0x09	; 9
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	80 95       	com	r24
     c3e:	90 95       	com	r25
     c40:	86 70       	andi	r24, 0x06	; 6
     c42:	99 27       	eor	r25, r25
     c44:	95 95       	asr	r25
     c46:	87 95       	ror	r24
     c48:	08 95       	ret

00000c4a <set_motor_power>:
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	ec 01       	movw	r28, r24
     c50:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <get_mS>
     c54:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <last_set>
     c58:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <last_set+0x1>
     c5c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <last_set+0x2>
     c60:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <last_set+0x3>
     c64:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <motor_mode>
     c68:	80 fd       	sbrc	r24, 0
     c6a:	05 c0       	rjmp	.+10     	; 0xc76 <set_motor_power+0x2c>
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 e7 04 	call	0x9ce	; 0x9ce <set_motor_power_raw>
     c74:	2d c0       	rjmp	.+90     	; 0xcd0 <set_motor_power+0x86>
     c76:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <reverse>
     c7a:	88 23       	and	r24, r24
     c7c:	19 f0       	breq	.+6      	; 0xc84 <set_motor_power+0x3a>
     c7e:	d1 95       	neg	r29
     c80:	c1 95       	neg	r28
     c82:	d1 09       	sbc	r29, r1
     c84:	d0 93 e6 01 	sts	0x01E6, r29	; 0x8001e6 <motor_power+0x1>
     c88:	c0 93 e5 01 	sts	0x01E5, r28	; 0x8001e5 <motor_power>
     c8c:	0e 94 1c 06 	call	0xc38	; 0xc38 <get_motor_limit_switch_state>
     c90:	80 ff       	sbrs	r24, 0
     c92:	0b c0       	rjmp	.+22     	; 0xcaa <set_motor_power+0x60>
     c94:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <motor_power>
     c98:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <motor_power+0x1>
     c9c:	33 23       	and	r19, r19
     c9e:	2c f4       	brge	.+10     	; 0xcaa <set_motor_power+0x60>
     ca0:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <motor_power+0x1>
     ca4:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <motor_power>
     ca8:	0d c0       	rjmp	.+26     	; 0xcc4 <set_motor_power+0x7a>
     caa:	81 ff       	sbrs	r24, 1
     cac:	0b c0       	rjmp	.+22     	; 0xcc4 <set_motor_power+0x7a>
     cae:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <motor_power>
     cb2:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <motor_power+0x1>
     cb6:	18 16       	cp	r1, r24
     cb8:	19 06       	cpc	r1, r25
     cba:	24 f4       	brge	.+8      	; 0xcc4 <set_motor_power+0x7a>
     cbc:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <motor_power+0x1>
     cc0:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <motor_power>
     cc4:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <motor_power>
     cc8:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <motor_power+0x1>
     ccc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <set_motor_power_raw>
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <motor_control_tick>:
     cd6:	4f 92       	push	r4
     cd8:	5f 92       	push	r5
     cda:	6f 92       	push	r6
     cdc:	7f 92       	push	r7
     cde:	8f 92       	push	r8
     ce0:	9f 92       	push	r9
     ce2:	af 92       	push	r10
     ce4:	bf 92       	push	r11
     ce6:	cf 92       	push	r12
     ce8:	df 92       	push	r13
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <motor_control_tick+0x22>
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <motor_control_tick+0x24>
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <motor_mode>
     d02:	81 fd       	sbrc	r24, 1
     d04:	9d c2       	rjmp	.+1338   	; 0x1240 <motor_control_tick+0x56a>
     d06:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PID_due>
     d0a:	0e 94 ac 01 	call	0x358	; 0x358 <get_encoder_ticks>
     d0e:	6b 01       	movw	r12, r22
     d10:	7c 01       	movw	r14, r24
     d12:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end>
     d16:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <__data_end+0x1>
     d1a:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <__data_end+0x2>
     d1e:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <__data_end+0x3>
     d22:	c8 16       	cp	r12, r24
     d24:	d9 06       	cpc	r13, r25
     d26:	ea 06       	cpc	r14, r26
     d28:	fb 06       	cpc	r15, r27
     d2a:	c1 f0       	breq	.+48     	; 0xd5c <motor_control_tick+0x86>
     d2c:	ff 92       	push	r15
     d2e:	ef 92       	push	r14
     d30:	df 92       	push	r13
     d32:	cf 92       	push	r12
     d34:	87 e9       	ldi	r24, 0x97	; 151
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	9f 93       	push	r25
     d3a:	8f 93       	push	r24
     d3c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <tprintf>
     d40:	c0 92 d4 01 	sts	0x01D4, r12	; 0x8001d4 <__data_end>
     d44:	d0 92 d5 01 	sts	0x01D5, r13	; 0x8001d5 <__data_end+0x1>
     d48:	e0 92 d6 01 	sts	0x01D6, r14	; 0x8001d6 <__data_end+0x2>
     d4c:	f0 92 d7 01 	sts	0x01D7, r15	; 0x8001d7 <__data_end+0x3>
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <get_mS>
     d60:	c0 90 00 02 	lds	r12, 0x0200	; 0x800200 <last_set>
     d64:	d0 90 01 02 	lds	r13, 0x0201	; 0x800201 <last_set+0x1>
     d68:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <last_set+0x2>
     d6c:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <last_set+0x3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	8c 19       	sub	r24, r12
     d76:	9d 09       	sbc	r25, r13
     d78:	ae 09       	sbc	r26, r14
     d7a:	bf 09       	sbc	r27, r15
     d7c:	83 3e       	cpi	r24, 0xE3	; 227
     d7e:	94 40       	sbci	r25, 0x04	; 4
     d80:	a1 05       	cpc	r26, r1
     d82:	b1 05       	cpc	r27, r1
     d84:	20 f0       	brcs	.+8      	; 0xd8e <motor_control_tick+0xb8>
     d86:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <motor_power+0x1>
     d8a:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <motor_power>
     d8e:	64 99       	sbic	0x0c, 4	; 12
     d90:	0a c0       	rjmp	.+20     	; 0xda6 <motor_control_tick+0xd0>
     d92:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <motor_power+0x1>
     d96:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <motor_power>
     d9a:	0e 94 0c 06 	call	0xc18	; 0xc18 <disable_motor>
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <set_LED>
     da6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <motor_mode>
     daa:	81 ff       	sbrs	r24, 1
     dac:	f9 c1       	rjmp	.+1010   	; 0x11a0 <motor_control_tick+0x4ca>
     dae:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PID_due>
     db2:	88 23       	and	r24, r24
     db4:	09 f4       	brne	.+2      	; 0xdb8 <motor_control_tick+0xe2>
     db6:	f4 c1       	rjmp	.+1000   	; 0x11a0 <motor_control_tick+0x4ca>
     db8:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <slow>
     dbc:	88 23       	and	r24, r24
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <motor_control_tick+0xec>
     dc0:	6f c0       	rjmp	.+222    	; 0xea0 <motor_control_tick+0x1ca>
     dc2:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <tgt_inc>
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <pid_runs>
     dcc:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <pid_runs+0x1>
     dd0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__udivmodhi4>
     dd4:	89 2b       	or	r24, r25
     dd6:	09 f0       	breq	.+2      	; 0xdda <motor_control_tick+0x104>
     dd8:	c6 c0       	rjmp	.+396    	; 0xf66 <motor_control_tick+0x290>
     dda:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <motor_target_pos>
     dde:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <motor_target_pos+0x1>
     de2:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <motor_target_pos+0x2>
     de6:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <motor_target_pos+0x3>
     dea:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <pid_target>
     dee:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <pid_target+0x1>
     df2:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <pid_target+0x2>
     df6:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <pid_target+0x3>
     dfa:	48 17       	cp	r20, r24
     dfc:	59 07       	cpc	r21, r25
     dfe:	6a 07       	cpc	r22, r26
     e00:	7b 07       	cpc	r23, r27
     e02:	2c f5       	brge	.+74     	; 0xe4e <motor_control_tick+0x178>
     e04:	7c 01       	movw	r14, r24
     e06:	8d 01       	movw	r16, r26
     e08:	e4 1a       	sub	r14, r20
     e0a:	f5 0a       	sbc	r15, r21
     e0c:	06 0b       	sbc	r16, r22
     e0e:	17 0b       	sbc	r17, r23
     e10:	a8 01       	movw	r20, r16
     e12:	97 01       	movw	r18, r14
     e14:	65 e0       	ldi	r22, 0x05	; 5
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <min>
     e20:	c0 90 fb 01 	lds	r12, 0x01FB	; 0x8001fb <pid_target>
     e24:	d0 90 fc 01 	lds	r13, 0x01FC	; 0x8001fc <pid_target+0x1>
     e28:	e0 90 fd 01 	lds	r14, 0x01FD	; 0x8001fd <pid_target+0x2>
     e2c:	f0 90 fe 01 	lds	r15, 0x01FE	; 0x8001fe <pid_target+0x3>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	8c 0d       	add	r24, r12
     e36:	9d 1d       	adc	r25, r13
     e38:	ae 1d       	adc	r26, r14
     e3a:	bf 1d       	adc	r27, r15
     e3c:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <pid_target>
     e40:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <pid_target+0x1>
     e44:	a0 93 fd 01 	sts	0x01FD, r26	; 0x8001fd <pid_target+0x2>
     e48:	b0 93 fe 01 	sts	0x01FE, r27	; 0x8001fe <pid_target+0x3>
     e4c:	8c c0       	rjmp	.+280    	; 0xf66 <motor_control_tick+0x290>
     e4e:	84 17       	cp	r24, r20
     e50:	95 07       	cpc	r25, r21
     e52:	a6 07       	cpc	r26, r22
     e54:	b7 07       	cpc	r27, r23
     e56:	0c f0       	brlt	.+2      	; 0xe5a <motor_control_tick+0x184>
     e58:	86 c0       	rjmp	.+268    	; 0xf66 <motor_control_tick+0x290>
     e5a:	9a 01       	movw	r18, r20
     e5c:	ab 01       	movw	r20, r22
     e5e:	28 1b       	sub	r18, r24
     e60:	39 0b       	sbc	r19, r25
     e62:	4a 0b       	sbc	r20, r26
     e64:	5b 0b       	sbc	r21, r27
     e66:	65 e0       	ldi	r22, 0x05	; 5
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <min>
     e72:	c0 90 fb 01 	lds	r12, 0x01FB	; 0x8001fb <pid_target>
     e76:	d0 90 fc 01 	lds	r13, 0x01FC	; 0x8001fc <pid_target+0x1>
     e7a:	e0 90 fd 01 	lds	r14, 0x01FD	; 0x8001fd <pid_target+0x2>
     e7e:	f0 90 fe 01 	lds	r15, 0x01FE	; 0x8001fe <pid_target+0x3>
     e82:	97 01       	movw	r18, r14
     e84:	86 01       	movw	r16, r12
     e86:	06 1b       	sub	r16, r22
     e88:	17 0b       	sbc	r17, r23
     e8a:	28 0b       	sbc	r18, r24
     e8c:	39 0b       	sbc	r19, r25
     e8e:	00 93 fb 01 	sts	0x01FB, r16	; 0x8001fb <pid_target>
     e92:	10 93 fc 01 	sts	0x01FC, r17	; 0x8001fc <pid_target+0x1>
     e96:	20 93 fd 01 	sts	0x01FD, r18	; 0x8001fd <pid_target+0x2>
     e9a:	30 93 fe 01 	sts	0x01FE, r19	; 0x8001fe <pid_target+0x3>
     e9e:	63 c0       	rjmp	.+198    	; 0xf66 <motor_control_tick+0x290>
     ea0:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <motor_target_pos>
     ea4:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <motor_target_pos+0x1>
     ea8:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <motor_target_pos+0x2>
     eac:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <motor_target_pos+0x3>
     eb0:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <pid_target>
     eb4:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <pid_target+0x1>
     eb8:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <pid_target+0x2>
     ebc:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <pid_target+0x3>
     ec0:	48 17       	cp	r20, r24
     ec2:	59 07       	cpc	r21, r25
     ec4:	6a 07       	cpc	r22, r26
     ec6:	7b 07       	cpc	r23, r27
     ec8:	34 f5       	brge	.+76     	; 0xf16 <motor_control_tick+0x240>
     eca:	7c 01       	movw	r14, r24
     ecc:	8d 01       	movw	r16, r26
     ece:	e4 1a       	sub	r14, r20
     ed0:	f5 0a       	sbc	r15, r21
     ed2:	06 0b       	sbc	r16, r22
     ed4:	17 0b       	sbc	r17, r23
     ed6:	a8 01       	movw	r20, r16
     ed8:	97 01       	movw	r18, r14
     eda:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <tgt_inc>
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <min>
     ee8:	c0 90 fb 01 	lds	r12, 0x01FB	; 0x8001fb <pid_target>
     eec:	d0 90 fc 01 	lds	r13, 0x01FC	; 0x8001fc <pid_target+0x1>
     ef0:	e0 90 fd 01 	lds	r14, 0x01FD	; 0x8001fd <pid_target+0x2>
     ef4:	f0 90 fe 01 	lds	r15, 0x01FE	; 0x8001fe <pid_target+0x3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	8c 0d       	add	r24, r12
     efe:	9d 1d       	adc	r25, r13
     f00:	ae 1d       	adc	r26, r14
     f02:	bf 1d       	adc	r27, r15
     f04:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <pid_target>
     f08:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <pid_target+0x1>
     f0c:	a0 93 fd 01 	sts	0x01FD, r26	; 0x8001fd <pid_target+0x2>
     f10:	b0 93 fe 01 	sts	0x01FE, r27	; 0x8001fe <pid_target+0x3>
     f14:	28 c0       	rjmp	.+80     	; 0xf66 <motor_control_tick+0x290>
     f16:	84 17       	cp	r24, r20
     f18:	95 07       	cpc	r25, r21
     f1a:	a6 07       	cpc	r26, r22
     f1c:	b7 07       	cpc	r27, r23
     f1e:	1c f5       	brge	.+70     	; 0xf66 <motor_control_tick+0x290>
     f20:	9a 01       	movw	r18, r20
     f22:	ab 01       	movw	r20, r22
     f24:	28 1b       	sub	r18, r24
     f26:	39 0b       	sbc	r19, r25
     f28:	4a 0b       	sbc	r20, r26
     f2a:	5b 0b       	sbc	r21, r27
     f2c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <tgt_inc>
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <min>
     f3a:	c0 90 fb 01 	lds	r12, 0x01FB	; 0x8001fb <pid_target>
     f3e:	d0 90 fc 01 	lds	r13, 0x01FC	; 0x8001fc <pid_target+0x1>
     f42:	e0 90 fd 01 	lds	r14, 0x01FD	; 0x8001fd <pid_target+0x2>
     f46:	f0 90 fe 01 	lds	r15, 0x01FE	; 0x8001fe <pid_target+0x3>
     f4a:	97 01       	movw	r18, r14
     f4c:	86 01       	movw	r16, r12
     f4e:	06 1b       	sub	r16, r22
     f50:	17 0b       	sbc	r17, r23
     f52:	28 0b       	sbc	r18, r24
     f54:	39 0b       	sbc	r19, r25
     f56:	00 93 fb 01 	sts	0x01FB, r16	; 0x8001fb <pid_target>
     f5a:	10 93 fc 01 	sts	0x01FC, r17	; 0x8001fc <pid_target+0x1>
     f5e:	20 93 fd 01 	sts	0x01FD, r18	; 0x8001fd <pid_target+0x2>
     f62:	30 93 fe 01 	sts	0x01FE, r19	; 0x8001fe <pid_target+0x3>
     f66:	0e 94 ac 01 	call	0x358	; 0x358 <get_encoder_ticks>
     f6a:	4b 01       	movw	r8, r22
     f6c:	5c 01       	movw	r10, r24
     f6e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <pid_target>
     f72:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <pid_target+0x1>
     f76:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <pid_target+0x2>
     f7a:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <pid_target+0x3>
     f7e:	75 01       	movw	r14, r10
     f80:	64 01       	movw	r12, r8
     f82:	c8 1a       	sub	r12, r24
     f84:	d9 0a       	sbc	r13, r25
     f86:	ea 0a       	sbc	r14, r26
     f88:	fb 0a       	sbc	r15, r27
     f8a:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <last_pos_err>
     f8e:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <last_pos_err+0x1>
     f92:	40 91 11 02 	lds	r20, 0x0211	; 0x800211 <last_pos_err+0x2>
     f96:	50 91 12 02 	lds	r21, 0x0212	; 0x800212 <last_pos_err+0x3>
     f9a:	29 83       	std	Y+1, r18	; 0x01
     f9c:	3a 83       	std	Y+2, r19	; 0x02
     f9e:	4b 83       	std	Y+3, r20	; 0x03
     fa0:	5c 83       	std	Y+4, r21	; 0x04
     fa2:	c0 92 0f 02 	sts	0x020F, r12	; 0x80020f <last_pos_err>
     fa6:	d0 92 10 02 	sts	0x0210, r13	; 0x800210 <last_pos_err+0x1>
     faa:	e0 92 11 02 	sts	0x0211, r14	; 0x800211 <last_pos_err+0x2>
     fae:	f0 92 12 02 	sts	0x0212, r15	; 0x800212 <last_pos_err+0x3>
     fb2:	c6 01       	movw	r24, r12
     fb4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <int_abs>
     fb8:	05 97       	sbiw	r24, 0x05	; 5
     fba:	a0 f0       	brcs	.+40     	; 0xfe4 <motor_control_tick+0x30e>
     fbc:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <pos_i>
     fc0:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <pos_i+0x1>
     fc4:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <pos_i+0x2>
     fc8:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <pos_i+0x3>
     fcc:	8c 0d       	add	r24, r12
     fce:	9d 1d       	adc	r25, r13
     fd0:	ae 1d       	adc	r26, r14
     fd2:	bf 1d       	adc	r27, r15
     fd4:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <pos_i>
     fd8:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <pos_i+0x1>
     fdc:	a0 93 ed 01 	sts	0x01ED, r26	; 0x8001ed <pos_i+0x2>
     fe0:	b0 93 ee 01 	sts	0x01EE, r27	; 0x8001ee <pos_i+0x3>
     fe4:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <motor_target_pos>
     fe8:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <motor_target_pos+0x1>
     fec:	a4 01       	movw	r20, r8
     fee:	48 1b       	sub	r20, r24
     ff0:	59 0b       	sbc	r21, r25
     ff2:	ca 01       	movw	r24, r20
     ff4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <int_abs>
     ff8:	04 97       	sbiw	r24, 0x04	; 4
     ffa:	28 f4       	brcc	.+10     	; 0x1006 <motor_control_tick+0x330>
     ffc:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <motor_power+0x1>
    1000:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <motor_power>
    1004:	90 c0       	rjmp	.+288    	; 0x1126 <motor_control_tick+0x450>
    1006:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <pos_i>
    100a:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <pos_i+0x1>
    100e:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <pos_i+0x2>
    1012:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <pos_i+0x3>
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	53 e0       	ldi	r21, 0x03	; 3
    101a:	95 07       	cpc	r25, r21
    101c:	a1 05       	cpc	r26, r1
    101e:	b1 05       	cpc	r27, r1
    1020:	6c f0       	brlt	.+26     	; 0x103c <motor_control_tick+0x366>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	93 e0       	ldi	r25, 0x03	; 3
    1026:	a0 e0       	ldi	r26, 0x00	; 0
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <pos_i>
    102e:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <pos_i+0x1>
    1032:	a0 93 ed 01 	sts	0x01ED, r26	; 0x8001ed <pos_i+0x2>
    1036:	b0 93 ee 01 	sts	0x01EE, r27	; 0x8001ee <pos_i+0x3>
    103a:	11 c0       	rjmp	.+34     	; 0x105e <motor_control_tick+0x388>
    103c:	81 15       	cp	r24, r1
    103e:	9d 4f       	sbci	r25, 0xFD	; 253
    1040:	af 4f       	sbci	r26, 0xFF	; 255
    1042:	bf 4f       	sbci	r27, 0xFF	; 255
    1044:	64 f4       	brge	.+24     	; 0x105e <motor_control_tick+0x388>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	9d ef       	ldi	r25, 0xFD	; 253
    104a:	af ef       	ldi	r26, 0xFF	; 255
    104c:	bf ef       	ldi	r27, 0xFF	; 255
    104e:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <pos_i>
    1052:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <pos_i+0x1>
    1056:	a0 93 ed 01 	sts	0x01ED, r26	; 0x8001ed <pos_i+0x2>
    105a:	b0 93 ee 01 	sts	0x01EE, r27	; 0x8001ee <pos_i+0x3>
    105e:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <Ki>
    1062:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <Ki+0x1>
    1066:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <pos_i>
    106a:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <pos_i+0x1>
    106e:	40 91 ed 01 	lds	r20, 0x01ED	; 0x8001ed <pos_i+0x2>
    1072:	50 91 ee 01 	lds	r21, 0x01EE	; 0x8001ee <pos_i+0x3>
    1076:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__muluhisi3>
    107a:	24 e1       	ldi	r18, 0x14	; 20
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__divmodsi4>
    1086:	29 01       	movw	r4, r18
    1088:	3a 01       	movw	r6, r20
    108a:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <Kp>
    108e:	b0 91 0a 02 	lds	r27, 0x020A	; 0x80020a <Kp+0x1>
    1092:	a7 01       	movw	r20, r14
    1094:	96 01       	movw	r18, r12
    1096:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__muluhisi3>
    109a:	24 e1       	ldi	r18, 0x14	; 20
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__divmodsi4>
    10a6:	42 0e       	add	r4, r18
    10a8:	53 1e       	adc	r5, r19
    10aa:	64 1e       	adc	r6, r20
    10ac:	75 1e       	adc	r7, r21
    10ae:	a7 01       	movw	r20, r14
    10b0:	96 01       	movw	r18, r12
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	ab 81       	ldd	r26, Y+3	; 0x03
    10b8:	bc 81       	ldd	r27, Y+4	; 0x04
    10ba:	28 1b       	sub	r18, r24
    10bc:	39 0b       	sbc	r19, r25
    10be:	4a 0b       	sbc	r20, r26
    10c0:	5b 0b       	sbc	r21, r27
    10c2:	a0 91 07 02 	lds	r26, 0x0207	; 0x800207 <Kd>
    10c6:	b0 91 08 02 	lds	r27, 0x0208	; 0x800208 <Kd+0x1>
    10ca:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__muluhisi3>
    10ce:	24 e1       	ldi	r18, 0x14	; 20
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__divmodsi4>
    10da:	42 0e       	add	r4, r18
    10dc:	53 1e       	adc	r5, r19
    10de:	64 1e       	adc	r6, r20
    10e0:	75 1e       	adc	r7, r21
    10e2:	91 e8       	ldi	r25, 0x81	; 129
    10e4:	49 16       	cp	r4, r25
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	59 06       	cpc	r5, r25
    10ea:	61 04       	cpc	r6, r1
    10ec:	71 04       	cpc	r7, r1
    10ee:	34 f0       	brlt	.+12     	; 0x10fc <motor_control_tick+0x426>
    10f0:	41 2c       	mov	r4, r1
    10f2:	51 2c       	mov	r5, r1
    10f4:	32 01       	movw	r6, r4
    10f6:	68 94       	set
    10f8:	47 f8       	bld	r4, 7
    10fa:	53 94       	inc	r5
    10fc:	a0 e8       	ldi	r26, 0x80	; 128
    10fe:	4a 16       	cp	r4, r26
    1100:	ae ef       	ldi	r26, 0xFE	; 254
    1102:	5a 06       	cpc	r5, r26
    1104:	af ef       	ldi	r26, 0xFF	; 255
    1106:	6a 06       	cpc	r6, r26
    1108:	7a 06       	cpc	r7, r26
    110a:	4c f4       	brge	.+18     	; 0x111e <motor_control_tick+0x448>
    110c:	0f 2e       	mov	r0, r31
    110e:	f0 e8       	ldi	r31, 0x80	; 128
    1110:	4f 2e       	mov	r4, r31
    1112:	fe ef       	ldi	r31, 0xFE	; 254
    1114:	5f 2e       	mov	r5, r31
    1116:	66 24       	eor	r6, r6
    1118:	6a 94       	dec	r6
    111a:	76 2c       	mov	r7, r6
    111c:	f0 2d       	mov	r31, r0
    111e:	50 92 e6 01 	sts	0x01E6, r5	; 0x8001e6 <motor_power+0x1>
    1122:	40 92 e5 01 	sts	0x01E5, r4	; 0x8001e5 <motor_power>
    1126:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <av>
    112a:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <av+0x1>
    112e:	9c 01       	movw	r18, r24
    1130:	22 0f       	add	r18, r18
    1132:	33 1f       	adc	r19, r19
    1134:	22 0f       	add	r18, r18
    1136:	33 1f       	adc	r19, r19
    1138:	22 0f       	add	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	82 0f       	add	r24, r18
    113e:	93 1f       	adc	r25, r19
    1140:	6a e0       	ldi	r22, 0x0A	; 10
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__divmodhi4>
    1148:	7b 01       	movw	r14, r22
    114a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <get_encoder_velocity>
    114e:	6a e0       	ldi	r22, 0x0A	; 10
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__divmodhi4>
    1156:	e6 0e       	add	r14, r22
    1158:	f7 1e       	adc	r15, r23
    115a:	f0 92 fa 01 	sts	0x01FA, r15	; 0x8001fa <av+0x1>
    115e:	e0 92 f9 01 	sts	0x01F9, r14	; 0x8001f9 <av>
    1162:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <motor_power+0x1>
    1166:	8f 93       	push	r24
    1168:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <motor_power>
    116c:	8f 93       	push	r24
    116e:	9f 92       	push	r9
    1170:	8f 92       	push	r8
    1172:	8c ec       	ldi	r24, 0xCC	; 204
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	9f 93       	push	r25
    1178:	8f 93       	push	r24
    117a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <tprintf>
    117e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <pid_runs>
    1182:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <pid_runs+0x1>
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <pid_runs+0x1>
    118c:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <pid_runs>
    1190:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PID_due>
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0e 94 1c 06 	call	0xc38	; 0xc38 <get_motor_limit_switch_state>
    11a4:	f8 2e       	mov	r15, r24
    11a6:	80 ff       	sbrs	r24, 0
    11a8:	27 c0       	rjmp	.+78     	; 0x11f8 <motor_control_tick+0x522>
    11aa:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <motor_mode>
    11ae:	82 ff       	sbrs	r24, 2
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <motor_control_tick+0x4e2>
    11b2:	8b 7f       	andi	r24, 0xFB	; 251
    11b4:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <motor_mode>
    11b8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <motor_target_pos>
    11bc:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <motor_target_pos+0x1>
    11c0:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <motor_target_pos+0x2>
    11c4:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <motor_target_pos+0x3>
    11c8:	bb 23       	and	r27, r27
    11ca:	44 f4       	brge	.+16     	; 0x11dc <motor_control_tick+0x506>
    11cc:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <motor_target_pos>
    11d0:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <motor_target_pos+0x1>
    11d4:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <motor_target_pos+0x2>
    11d8:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <motor_target_pos+0x3>
    11dc:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <motor_power>
    11e0:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <motor_power+0x1>
    11e4:	99 23       	and	r25, r25
    11e6:	44 f4       	brge	.+16     	; 0x11f8 <motor_control_tick+0x522>
    11e8:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <motor_power+0x1>
    11ec:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <motor_power>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <set_motor_power_raw>
    11f8:	f1 fe       	sbrs	r15, 1
    11fa:	18 c0       	rjmp	.+48     	; 0x122c <motor_control_tick+0x556>
    11fc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <reset_encoder>
    1200:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <motor_mode>
    1204:	82 ff       	sbrs	r24, 2
    1206:	03 c0       	rjmp	.+6      	; 0x120e <motor_control_tick+0x538>
    1208:	8b 7f       	andi	r24, 0xFB	; 251
    120a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <motor_mode>
    120e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <motor_power>
    1212:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <motor_power+0x1>
    1216:	18 16       	cp	r1, r24
    1218:	19 06       	cpc	r1, r25
    121a:	44 f4       	brge	.+16     	; 0x122c <motor_control_tick+0x556>
    121c:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <motor_power+0x1>
    1220:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <motor_power>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 e7 04 	call	0x9ce	; 0x9ce <set_motor_power_raw>
    122c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <motor_power>
    1230:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <motor_power+0x1>
    1234:	91 95       	neg	r25
    1236:	81 95       	neg	r24
    1238:	91 09       	sbc	r25, r1
    123a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <set_motor_power_raw>
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <motor_control_tick+0x570>
    1240:	64 9b       	sbis	0x0c, 4	; 12
    1242:	a7 cd       	rjmp	.-1202   	; 0xd92 <motor_control_tick+0xbc>
    1244:	b4 cd       	rjmp	.-1176   	; 0xdae <motor_control_tick+0xd8>
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	9f 90       	pop	r9
    1264:	8f 90       	pop	r8
    1266:	7f 90       	pop	r7
    1268:	6f 90       	pop	r6
    126a:	5f 90       	pop	r5
    126c:	4f 90       	pop	r4
    126e:	08 95       	ret

00001270 <set_motor_reverse>:

void set_motor_reverse(uint8_t r){
	reverse = r;
    1270:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <reverse>
    1274:	08 95       	ret

00001276 <disable_mob_interrupt>:
	CANIDT2 = ((packetToSend->id & 7) << 5);
	CANIDT1 = ((packetToSend->id & 0x7F8) >> 3);
	CANCDMOB |= (1<<CONMOB0);
	enable_mob_interrupt(mob); //Enable MOb interrupt
	return 0;
}
    1276:	88 30       	cpi	r24, 0x08	; 8
    1278:	80 f4       	brcc	.+32     	; 0x129a <disable_mob_interrupt+0x24>
    127a:	ee ed       	ldi	r30, 0xDE	; 222
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	40 81       	ld	r20, Z
    1280:	21 e0       	ldi	r18, 0x01	; 1
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	b9 01       	movw	r22, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <disable_mob_interrupt+0x16>
    1288:	66 0f       	add	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	8a 95       	dec	r24
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <disable_mob_interrupt+0x12>
    1290:	cb 01       	movw	r24, r22
    1292:	80 95       	com	r24
    1294:	84 23       	and	r24, r20
    1296:	80 83       	st	Z, r24
    1298:	08 95       	ret
    129a:	ef ed       	ldi	r30, 0xDF	; 223
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	40 81       	ld	r20, Z
    12a0:	88 50       	subi	r24, 0x08	; 8
    12a2:	21 e0       	ldi	r18, 0x01	; 1
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	b9 01       	movw	r22, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <disable_mob_interrupt+0x38>
    12aa:	66 0f       	add	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	8a 95       	dec	r24
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <disable_mob_interrupt+0x34>
    12b2:	cb 01       	movw	r24, r22
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	80 83       	st	Z, r24
    12ba:	08 95       	ret

000012bc <enable_mob_interrupt>:
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	78 f4       	brcc	.+30     	; 0x12de <enable_mob_interrupt+0x22>
    12c0:	ee ed       	ldi	r30, 0xDE	; 222
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	40 81       	ld	r20, Z
    12c6:	21 e0       	ldi	r18, 0x01	; 1
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	b9 01       	movw	r22, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <enable_mob_interrupt+0x16>
    12ce:	66 0f       	add	r22, r22
    12d0:	77 1f       	adc	r23, r23
    12d2:	8a 95       	dec	r24
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <enable_mob_interrupt+0x12>
    12d6:	cb 01       	movw	r24, r22
    12d8:	84 2b       	or	r24, r20
    12da:	80 83       	st	Z, r24
    12dc:	08 95       	ret
    12de:	ef ed       	ldi	r30, 0xDF	; 223
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	40 81       	ld	r20, Z
    12e4:	88 50       	subi	r24, 0x08	; 8
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	b9 01       	movw	r22, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <enable_mob_interrupt+0x36>
    12ee:	66 0f       	add	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	8a 95       	dec	r24
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <enable_mob_interrupt+0x32>
    12f6:	cb 01       	movw	r24, r22
    12f8:	84 2b       	or	r24, r20
    12fa:	80 83       	st	Z, r24
    12fc:	08 95       	ret

000012fe <__vector_18>:
    12fe:	1f 92       	push	r1
    1300:	0f 92       	push	r0
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	0f 92       	push	r0
    1306:	11 24       	eor	r1, r1
    1308:	2f 93       	push	r18
    130a:	3f 93       	push	r19
    130c:	4f 93       	push	r20
    130e:	5f 93       	push	r21
    1310:	6f 93       	push	r22
    1312:	7f 93       	push	r23
    1314:	8f 93       	push	r24
    1316:	9f 93       	push	r25
    1318:	af 93       	push	r26
    131a:	bf 93       	push	r27
    131c:	cf 93       	push	r28
    131e:	ef 93       	push	r30
    1320:	ff 93       	push	r31
    1322:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1326:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    132a:	80 7f       	andi	r24, 0xF0	; 240
    132c:	80 3f       	cpi	r24, 0xF0	; 240
    132e:	b1 f1       	breq	.+108    	; 0x139c <__vector_18+0x9e>
    1330:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1334:	82 95       	swap	r24
    1336:	8f 70       	andi	r24, 0x0F	; 15
    1338:	90 e1       	ldi	r25, 0x10	; 16
    133a:	89 9f       	mul	r24, r25
    133c:	90 01       	movw	r18, r0
    133e:	11 24       	eor	r1, r1
    1340:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1344:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    1348:	96 ff       	sbrs	r25, 6
    134a:	09 c0       	rjmp	.+18     	; 0x135e <__vector_18+0x60>
    134c:	ee ee       	ldi	r30, 0xEE	; 238
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	90 81       	ld	r25, Z
    1352:	10 82       	st	Z, r1
    1354:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
    1358:	0e 94 5e 09 	call	0x12bc	; 0x12bc <enable_mob_interrupt>
    135c:	23 c0       	rjmp	.+70     	; 0x13a4 <__vector_18+0xa6>
    135e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <msgs_av>
    1362:	9f 5f       	subi	r25, 0xFF	; 255
    1364:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <msgs_av>
    1368:	e8 2f       	mov	r30, r24
    136a:	e6 95       	lsr	r30
    136c:	e6 95       	lsr	r30
    136e:	e6 95       	lsr	r30
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	eb 5e       	subi	r30, 0xEB	; 235
    1374:	fd 4f       	sbci	r31, 0xFD	; 253
    1376:	90 81       	ld	r25, Z
    1378:	48 2f       	mov	r20, r24
    137a:	47 70       	andi	r20, 0x07	; 7
    137c:	21 e0       	ldi	r18, 0x01	; 1
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <__vector_18+0x88>
    1382:	22 0f       	add	r18, r18
    1384:	33 1f       	adc	r19, r19
    1386:	4a 95       	dec	r20
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <__vector_18+0x84>
    138a:	29 2b       	or	r18, r25
    138c:	20 83       	st	Z, r18
    138e:	ee ee       	ldi	r30, 0xEE	; 238
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	90 81       	ld	r25, Z
    1394:	10 82       	st	Z, r1
    1396:	0e 94 3b 09 	call	0x1276	; 0x1276 <disable_mob_interrupt>
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <__vector_18+0xa6>
    139c:	ea ed       	ldi	r30, 0xDA	; 218
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 83       	st	Z, r24
    13a4:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    13a8:	ff 91       	pop	r31
    13aa:	ef 91       	pop	r30
    13ac:	cf 91       	pop	r28
    13ae:	bf 91       	pop	r27
    13b0:	af 91       	pop	r26
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	7f 91       	pop	r23
    13b8:	6f 91       	pop	r22
    13ba:	5f 91       	pop	r21
    13bc:	4f 91       	pop	r20
    13be:	3f 91       	pop	r19
    13c0:	2f 91       	pop	r18
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	0f 90       	pop	r0
    13c8:	1f 90       	pop	r1
    13ca:	18 95       	reti

000013cc <set_mob_rx_filter>:
    13cc:	9c 01       	movw	r18, r24
    13ce:	33 27       	eor	r19, r19
    13d0:	22 95       	swap	r18
    13d2:	32 95       	swap	r19
    13d4:	30 7f       	andi	r19, 0xF0	; 240
    13d6:	32 27       	eor	r19, r18
    13d8:	20 7f       	andi	r18, 0xF0	; 240
    13da:	32 27       	eor	r19, r18
    13dc:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    13e0:	9c 01       	movw	r18, r24
    13e2:	21 50       	subi	r18, 0x01	; 1
    13e4:	31 09       	sbc	r19, r1
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	38 f4       	brcc	.+14     	; 0x13fa <set_mob_rx_filter+0x2e>
    13ec:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <devGrp>
    13f0:	20 e4       	ldi	r18, 0x40	; 64
    13f2:	82 9f       	mul	r24, r18
    13f4:	c0 01       	movw	r24, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	0f c0       	rjmp	.+30     	; 0x1418 <set_mob_rx_filter+0x4c>
    13fa:	03 97       	sbiw	r24, 0x03	; 3
    13fc:	02 97       	sbiw	r24, 0x02	; 2
    13fe:	50 f4       	brcc	.+20     	; 0x1414 <set_mob_rx_filter+0x48>
    1400:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <devGrp>
    1404:	20 e4       	ldi	r18, 0x40	; 64
    1406:	82 9f       	mul	r24, r18
    1408:	c0 01       	movw	r24, r0
    140a:	11 24       	eor	r1, r1
    140c:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <devSer>
    1410:	82 2b       	or	r24, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <set_mob_rx_filter+0x4c>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    141c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    1420:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1424:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1428:	28 2f       	mov	r18, r24
    142a:	22 95       	swap	r18
    142c:	22 0f       	add	r18, r18
    142e:	20 7e       	andi	r18, 0xE0	; 224
    1430:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1434:	88 7f       	andi	r24, 0xF8	; 248
    1436:	97 70       	andi	r25, 0x07	; 7
    1438:	96 95       	lsr	r25
    143a:	87 95       	ror	r24
    143c:	96 95       	lsr	r25
    143e:	87 95       	ror	r24
    1440:	96 95       	lsr	r25
    1442:	87 95       	ror	r24
    1444:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    1448:	80 ee       	ldi	r24, 0xE0	; 224
    144a:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    144e:	8f e7       	ldi	r24, 0x7F	; 127
    1450:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
    1454:	08 95       	ret

00001456 <init_CAN>:
    1456:	df 92       	push	r13
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	e8 ed       	ldi	r30, 0xD8	; 216
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	90 81       	ld	r25, Z
    146a:	91 60       	ori	r25, 0x01	; 1
    146c:	90 83       	st	Z, r25
    146e:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <devGrp>
    1472:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <devSer>
    1476:	2f ef       	ldi	r18, 0xFF	; 255
    1478:	31 ee       	ldi	r19, 0xE1	; 225
    147a:	94 e0       	ldi	r25, 0x04	; 4
    147c:	21 50       	subi	r18, 0x01	; 1
    147e:	30 40       	sbci	r19, 0x00	; 0
    1480:	90 40       	sbci	r25, 0x00	; 0
    1482:	e1 f7       	brne	.-8      	; 0x147c <init_CAN+0x26>
    1484:	00 c0       	rjmp	.+0      	; 0x1486 <init_CAN+0x30>
    1486:	00 00       	nop
    1488:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    148c:	70 93 e3 00 	sts	0x00E3, r23	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    1490:	60 93 e4 00 	sts	0x00E4, r22	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1494:	80 eb       	ldi	r24, 0xB0	; 176
    1496:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    14a0:	e5 e1       	ldi	r30, 0x15	; 21
    14a2:	f2 e0       	ldi	r31, 0x02	; 2
    14a4:	11 82       	std	Z+1, r1	; 0x01
    14a6:	10 82       	st	Z, r1
    14a8:	c0 e0       	ldi	r28, 0x00	; 0
    14aa:	d0 e0       	ldi	r29, 0x00	; 0
    14ac:	0f ee       	ldi	r16, 0xEF	; 239
    14ae:	10 e0       	ldi	r17, 0x00	; 0
    14b0:	0f 2e       	mov	r0, r31
    14b2:	fe ee       	ldi	r31, 0xEE	; 238
    14b4:	ef 2e       	mov	r14, r31
    14b6:	f1 2c       	mov	r15, r1
    14b8:	f0 2d       	mov	r31, r0
    14ba:	68 94       	set
    14bc:	dd 24       	eor	r13, r13
    14be:	d7 f8       	bld	r13, 7
    14c0:	c5 30       	cpi	r28, 0x05	; 5
    14c2:	60 f4       	brcc	.+24     	; 0x14dc <init_CAN+0x86>
    14c4:	f7 01       	movw	r30, r14
    14c6:	80 81       	ld	r24, Z
    14c8:	10 82       	st	Z, r1
    14ca:	ce 01       	movw	r24, r28
    14cc:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_mob_rx_filter>
    14d0:	f8 01       	movw	r30, r16
    14d2:	d0 82       	st	Z, r13
    14d4:	8c 2f       	mov	r24, r28
    14d6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <enable_mob_interrupt>
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <init_CAN+0x8a>
    14dc:	f8 01       	movw	r30, r16
    14de:	10 82       	st	Z, r1
    14e0:	21 96       	adiw	r28, 0x01	; 1
    14e2:	cf 30       	cpi	r28, 0x0F	; 15
    14e4:	d1 05       	cpc	r29, r1
    14e6:	61 f7       	brne	.-40     	; 0x14c0 <init_CAN+0x6a>
    14e8:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <msgs_av>
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	08 95       	ret

00001502 <InitCAN>:
    1502:	9b 01       	movw	r18, r22
    1504:	ac 01       	movw	r20, r24
    1506:	63 e1       	ldi	r22, 0x13	; 19
    1508:	74 e0       	ldi	r23, 0x04	; 4
    150a:	8e e1       	ldi	r24, 0x1E	; 30
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <init_CAN>
    1512:	08 95       	ret

00001514 <PollAndReceiveCANPacket>:

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
	if(receivedPacket == NULL){
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	09 f4       	brne	.+2      	; 0x1520 <PollAndReceiveCANPacket+0xc>
    151e:	83 c0       	rjmp	.+262    	; 0x1626 <PollAndReceiveCANPacket+0x112>
	CANGCON = (1 << ENASTB);
}

/*Returns the number of CAN messages waiting*/
uint8_t inline CAN_msg_available(){
	return msgs_av;
    1520:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <msgs_av>
	if(receivedPacket == NULL){
		return 0x02;
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
    1524:	22 23       	and	r18, r18
    1526:	09 f4       	brne	.+2      	; 0x152a <PollAndReceiveCANPacket+0x16>
    1528:	81 c0       	rjmp	.+258    	; 0x162c <PollAndReceiveCANPacket+0x118>

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
    152a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
    152e:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <rxed_mobs>
    1532:	20 fd       	sbrc	r18, 0
    1534:	25 c0       	rjmp	.+74     	; 0x1580 <PollAndReceiveCANPacket+0x6c>
    1536:	21 e0       	ldi	r18, 0x01	; 1
    1538:	30 e0       	ldi	r19, 0x00	; 0

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
    153a:	ad ee       	ldi	r26, 0xED	; 237
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	12 2f       	mov	r17, r18
    1540:	a9 01       	movw	r20, r18
    1542:	42 95       	swap	r20
    1544:	52 95       	swap	r21
    1546:	50 7f       	andi	r21, 0xF0	; 240
    1548:	54 27       	eor	r21, r20
    154a:	40 7f       	andi	r20, 0xF0	; 240
    154c:	54 27       	eor	r21, r20
    154e:	4c 93       	st	X, r20
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
    1550:	23 fb       	bst	r18, 3
    1552:	66 27       	eor	r22, r22
    1554:	60 f9       	bld	r22, 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	fb 01       	movw	r30, r22
    155a:	eb 5e       	subi	r30, 0xEB	; 235
    155c:	fd 4f       	sbci	r31, 0xFD	; 253
    155e:	40 81       	ld	r20, Z
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	e2 2f       	mov	r30, r18
    1564:	e7 70       	andi	r30, 0x07	; 7
    1566:	02 c0       	rjmp	.+4      	; 0x156c <PollAndReceiveCANPacket+0x58>
    1568:	55 95       	asr	r21
    156a:	47 95       	ror	r20
    156c:	ea 95       	dec	r30
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <PollAndReceiveCANPacket+0x54>
    1570:	40 fd       	sbrc	r20, 0
    1572:	07 c0       	rjmp	.+14     	; 0x1582 <PollAndReceiveCANPacket+0x6e>
    1574:	2f 5f       	subi	r18, 0xFF	; 255
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
	if(!CAN_msg_available()){
		return 0x01;
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
    1578:	2f 30       	cpi	r18, 0x0F	; 15
    157a:	31 05       	cpc	r19, r1
    157c:	01 f7       	brne	.-64     	; 0x153e <PollAndReceiveCANPacket+0x2a>
    157e:	59 c0       	rjmp	.+178    	; 0x1632 <PollAndReceiveCANPacket+0x11e>
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
    1580:	10 e0       	ldi	r17, 0x00	; 0
			break;
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
    1582:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
    1586:	2f 70       	andi	r18, 0x0F	; 15
    1588:	fc 01       	movw	r30, r24
    158a:	22 83       	std	Z+2, r18	; 0x02
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
    158c:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1590:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    1594:	32 95       	swap	r19
    1596:	36 95       	lsr	r19
    1598:	37 70       	andi	r19, 0x07	; 7
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	44 0f       	add	r20, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	44 0f       	add	r20, r20
    15a2:	55 1f       	adc	r21, r21
    15a4:	44 0f       	add	r20, r20
    15a6:	55 1f       	adc	r21, r21
    15a8:	43 2b       	or	r20, r19
    15aa:	51 83       	std	Z+1, r21	; 0x01
    15ac:	40 83       	st	Z, r20
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
    15ae:	22 23       	and	r18, r18
    15b0:	91 f0       	breq	.+36     	; 0x15d6 <PollAndReceiveCANPacket+0xc2>
    15b2:	33 96       	adiw	r30, 0x03	; 3
    15b4:	21 50       	subi	r18, 0x01	; 1
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	2c 5f       	subi	r18, 0xFC	; 252
    15ba:	3f 4f       	sbci	r19, 0xFF	; 255
    15bc:	28 0f       	add	r18, r24
    15be:	39 1f       	adc	r19, r25
    15c0:	0b 96       	adiw	r24, 0x0b	; 11
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
    15c2:	aa ef       	ldi	r26, 0xFA	; 250
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	4c 91       	ld	r20, X
    15c8:	41 93       	st	Z+, r20
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
    15ca:	e2 17       	cp	r30, r18
    15cc:	f3 07       	cpc	r31, r19
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <PollAndReceiveCANPacket+0xc2>
    15d0:	8e 17       	cp	r24, r30
    15d2:	9f 07       	cpc	r25, r31
    15d4:	c1 f7       	brne	.-16     	; 0x15c6 <PollAndReceiveCANPacket+0xb2>
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
	}
	//Atomically decrement the number of messages available
	cli();
    15d6:	f8 94       	cli
	msgs_av--;
    15d8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <msgs_av>
    15dc:	81 50       	subi	r24, 0x01	; 1
    15de:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <msgs_av>
	sei();
    15e2:	78 94       	sei
	/*Reset the MOb*/
	set_mob_rx_filter(mob);
    15e4:	81 2f       	mov	r24, r17
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_mob_rx_filter>
	enable_mob_interrupt(mob);
    15ec:	81 2f       	mov	r24, r17
    15ee:	0e 94 5e 09 	call	0x12bc	; 0x12bc <enable_mob_interrupt>
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
    15f2:	13 fb       	bst	r17, 3
    15f4:	ff 27       	eor	r31, r31
    15f6:	f0 f9       	bld	r31, 0
    15f8:	cf 2f       	mov	r28, r31
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	d8 2f       	mov	r29, r24
    15fe:	cb 5e       	subi	r28, 0xEB	; 235
    1600:	dd 4f       	sbci	r29, 0xFD	; 253
    1602:	28 81       	ld	r18, Y
    1604:	17 70       	andi	r17, 0x07	; 7
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <PollAndReceiveCANPacket+0xfc>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	1a 95       	dec	r17
    1612:	e2 f7       	brpl	.-8      	; 0x160c <PollAndReceiveCANPacket+0xf8>
    1614:	80 95       	com	r24
    1616:	82 23       	and	r24, r18
    1618:	88 83       	st	Y, r24
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
    161a:	80 e8       	ldi	r24, 0x80	; 128
    161c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
	return 0;
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	08 c0       	rjmp	.+16     	; 0x1636 <PollAndReceiveCANPacket+0x122>
}

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
	if(receivedPacket == NULL){
		return 0x02;
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	05 c0       	rjmp	.+10     	; 0x1636 <PollAndReceiveCANPacket+0x122>
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
		return 0x01;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <PollAndReceiveCANPacket+0x122>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
	enable_mob_interrupt(mob);
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
	return 0;
    
}
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	08 95       	ret

0000163e <getLocalDeviceSerial>:

uint8_t getLocalDeviceSerial()
{
    /*Return the DIP switch value*/
    return get_dip_switch();
    163e:	0e 94 77 03 	call	0x6ee	; 0x6ee <get_dip_switch>
}
    1642:	08 95       	ret

00001644 <write_PWM>:
  uint8_t pin: The pin to set the PWM on (PE3, PE4, PE5)
  uint16_t pwm: 10-bit PWM value
*/
//void write_PWM(uint8_t port, uint8_t pin, uint16_t pwm){
void write_PWM(uint8_t pin, uint16_t pwm){
	pwm &= 1023;
    1644:	73 70       	andi	r23, 0x03	; 3
	switch(pin){
    1646:	84 30       	cpi	r24, 0x04	; 4
    1648:	71 f0       	breq	.+28     	; 0x1666 <write_PWM+0x22>
    164a:	85 30       	cpi	r24, 0x05	; 5
    164c:	b1 f0       	breq	.+44     	; 0x167a <write_PWM+0x36>
    164e:	83 30       	cpi	r24, 0x03	; 3
    1650:	e9 f4       	brne	.+58     	; 0x168c <write_PWM+0x48>
		case PE3:
			TCCR3A |= (1 << COM3A1);
    1652:	e0 e9       	ldi	r30, 0x90	; 144
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 68       	ori	r24, 0x80	; 128
    165a:	80 83       	st	Z, r24
			OCR3A = pwm;
    165c:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
    1660:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
			break;
    1664:	08 95       	ret
		case PE4:
			TCCR3A |= (1 << COM3B1);
    1666:	e0 e9       	ldi	r30, 0x90	; 144
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 62       	ori	r24, 0x20	; 32
    166e:	80 83       	st	Z, r24
			OCR3B = pwm;
    1670:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7f809b>
    1674:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7f809a>
			break;
    1678:	08 95       	ret
		case PE5:
			TCCR3A |= (1 << COM3C1);
    167a:	e0 e9       	ldi	r30, 0x90	; 144
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	88 60       	ori	r24, 0x08	; 8
    1682:	80 83       	st	Z, r24
			OCR3C = pwm;
    1684:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__TEXT_REGION_LENGTH__+0x7f809d>
    1688:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x7f809c>
    168c:	08 95       	ret

0000168e <init_servo>:
#include <config.h>
#include <servo.h>

#ifdef REV_2
void init_servo(){
	DDRB |= 1<<6;
    168e:	26 9a       	sbi	0x04, 6	; 4
	TCCR1A |= (1 << COM1B1);
    1690:	e0 e8       	ldi	r30, 0x80	; 128
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	80 62       	ori	r24, 0x20	; 32
    1698:	80 83       	st	Z, r24
//	TCCR1A &= ~(1 << COM1B0);
	OCR1B = 375;
    169a:	87 e7       	ldi	r24, 0x77	; 119
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    16a2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    16a6:	08 95       	ret

000016a8 <set_servo_position>:
}

void set_servo_position(int degrees){
    16a8:	84 3b       	cpi	r24, 0xB4	; 180
    16aa:	91 05       	cpc	r25, r1
    16ac:	14 f0       	brlt	.+4      	; 0x16b2 <set_servo_position+0xa>
    16ae:	83 eb       	ldi	r24, 0xB3	; 179
    16b0:	90 e0       	ldi	r25, 0x00	; 0
	if(degrees > 179) degrees = 179;
	if(degrees < 1) degrees = 1;
    16b2:	18 16       	cp	r1, r24
    16b4:	19 06       	cpc	r1, r25
    16b6:	14 f0       	brlt	.+4      	; 0x16bc <set_servo_position+0x14>
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
	OCR1B = 250 + degrees + degrees / 3;
    16bc:	9c 01       	movw	r18, r24
    16be:	26 50       	subi	r18, 0x06	; 6
    16c0:	3f 4f       	sbci	r19, 0xFF	; 255
    16c2:	63 e0       	ldi	r22, 0x03	; 3
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__divmodhi4>
    16ca:	62 0f       	add	r22, r18
    16cc:	73 1f       	adc	r23, r19
    16ce:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    16d2:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    16d6:	08 95       	ret

000016d8 <__vector_15>:
	#ifdef REV_2
	return (TOF_Cnt * 20000) + (timer_ticks << 2);
	#else
	return (TOF_Cnt * 40000) + (timer_ticks << 2);
	#endif
}
    16d8:	1f 92       	push	r1
    16da:	0f 92       	push	r0
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	0f 92       	push	r0
    16e0:	11 24       	eor	r1, r1
    16e2:	2f 93       	push	r18
    16e4:	3f 93       	push	r19
    16e6:	4f 93       	push	r20
    16e8:	5f 93       	push	r21
    16ea:	6f 93       	push	r22
    16ec:	7f 93       	push	r23
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
    16fa:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TOF_Cnt>
    16fe:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TOF_Cnt+0x1>
    1702:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <TOF_Cnt+0x2>
    1706:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <TOF_Cnt+0x3>
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	a1 1d       	adc	r26, r1
    170e:	b1 1d       	adc	r27, r1
    1710:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <TOF_Cnt>
    1714:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <TOF_Cnt+0x1>
    1718:	a0 93 1c 02 	sts	0x021C, r26	; 0x80021c <TOF_Cnt+0x2>
    171c:	b0 93 1d 02 	sts	0x021D, r27	; 0x80021d <TOF_Cnt+0x3>
    1720:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TOF_Cnt>
    1724:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TOF_Cnt+0x1>
    1728:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <TOF_Cnt+0x2>
    172c:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <TOF_Cnt+0x3>
    1730:	87 70       	andi	r24, 0x07	; 7
    1732:	99 27       	eor	r25, r25
    1734:	aa 27       	eor	r26, r26
    1736:	bb 27       	eor	r27, r27
    1738:	89 2b       	or	r24, r25
    173a:	8a 2b       	or	r24, r26
    173c:	8b 2b       	or	r24, r27
    173e:	51 f4       	brne	.+20     	; 0x1754 <__vector_15+0x7c>
    1740:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TOF_Cnt>
    1744:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TOF_Cnt+0x1>
    1748:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <TOF_Cnt+0x2>
    174c:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <TOF_Cnt+0x3>
    1750:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <update_LEDS>
    1754:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TOF_Cnt>
    1758:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TOF_Cnt+0x1>
    175c:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <TOF_Cnt+0x2>
    1760:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <TOF_Cnt+0x3>
    1764:	80 fd       	sbrc	r24, 0
    1766:	03 c0       	rjmp	.+6      	; 0x176e <__vector_15+0x96>
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <PID_due>
    176e:	ff 91       	pop	r31
    1770:	ef 91       	pop	r30
    1772:	bf 91       	pop	r27
    1774:	af 91       	pop	r26
    1776:	9f 91       	pop	r25
    1778:	8f 91       	pop	r24
    177a:	7f 91       	pop	r23
    177c:	6f 91       	pop	r22
    177e:	5f 91       	pop	r21
    1780:	4f 91       	pop	r20
    1782:	3f 91       	pop	r19
    1784:	2f 91       	pop	r18
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	0f 90       	pop	r0
    178c:	1f 90       	pop	r1
    178e:	18 95       	reti

00001790 <setup_timers>:
    1790:	83 e4       	ldi	r24, 0x43	; 67
    1792:	84 bd       	out	0x24, r24	; 36
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    179a:	9b e1       	ldi	r25, 0x1B	; 27
    179c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    17a0:	93 e0       	ldi	r25, 0x03	; 3
    17a2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    17a6:	28 e8       	ldi	r18, 0x88	; 136
    17a8:	33 e1       	ldi	r19, 0x13	; 19
    17aa:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    17ae:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    17b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    17b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    17ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    17be:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    17c2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    17c6:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <TOF_Cnt>
    17ca:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <TOF_Cnt+0x1>
    17ce:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <TOF_Cnt+0x2>
    17d2:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <TOF_Cnt+0x3>
    17d6:	08 95       	ret

000017d8 <get_mS>:
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    17e4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    17e8:	c0 90 1a 02 	lds	r12, 0x021A	; 0x80021a <TOF_Cnt>
    17ec:	d0 90 1b 02 	lds	r13, 0x021B	; 0x80021b <TOF_Cnt+0x1>
    17f0:	e0 90 1c 02 	lds	r14, 0x021C	; 0x80021c <TOF_Cnt+0x2>
    17f4:	f0 90 1d 02 	lds	r15, 0x021D	; 0x80021d <TOF_Cnt+0x3>
    17f8:	cc 0c       	add	r12, r12
    17fa:	dd 1c       	adc	r13, r13
    17fc:	ee 1c       	adc	r14, r14
    17fe:	ff 1c       	adc	r15, r15
    1800:	cc 0c       	add	r12, r12
    1802:	dd 1c       	adc	r13, r13
    1804:	ee 1c       	adc	r14, r14
    1806:	ff 1c       	adc	r15, r15
    1808:	d7 01       	movw	r26, r14
    180a:	c6 01       	movw	r24, r12
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	aa 1f       	adc	r26, r26
    1812:	bb 1f       	adc	r27, r27
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	aa 1f       	adc	r26, r26
    181a:	bb 1f       	adc	r27, r27
    181c:	c8 0e       	add	r12, r24
    181e:	d9 1e       	adc	r13, r25
    1820:	ea 1e       	adc	r14, r26
    1822:	fb 1e       	adc	r15, r27
    1824:	36 95       	lsr	r19
    1826:	27 95       	ror	r18
    1828:	a3 e1       	ldi	r26, 0x13	; 19
    182a:	b3 e8       	ldi	r27, 0x83	; 131
    182c:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <__umulhisi3>
    1830:	00 24       	eor	r0, r0
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	00 1c       	adc	r0, r0
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	00 1c       	adc	r0, r0
    183e:	89 2f       	mov	r24, r25
    1840:	90 2d       	mov	r25, r0
    1842:	a7 01       	movw	r20, r14
    1844:	96 01       	movw	r18, r12
    1846:	28 0f       	add	r18, r24
    1848:	39 1f       	adc	r19, r25
    184a:	41 1d       	adc	r20, r1
    184c:	51 1d       	adc	r21, r1
    184e:	ca 01       	movw	r24, r20
    1850:	b9 01       	movw	r22, r18
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	df 90       	pop	r13
    1858:	cf 90       	pop	r12
    185a:	08 95       	ret

0000185c <delay_mS>:

/*delay for the specified number of milliseconds*/
void delay_mS(uint16_t mS){
    185c:	8f 92       	push	r8
    185e:	9f 92       	push	r9
    1860:	af 92       	push	r10
    1862:	bf 92       	push	r11
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	6c 01       	movw	r12, r24
	uint32_t start = get_mS();
    186e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <get_mS>
    1872:	4b 01       	movw	r8, r22
    1874:	5c 01       	movw	r10, r24
	while(get_mS() - start < mS);
    1876:	e1 2c       	mov	r14, r1
    1878:	f1 2c       	mov	r15, r1
    187a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <get_mS>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	88 19       	sub	r24, r8
    1884:	99 09       	sbc	r25, r9
    1886:	aa 09       	sbc	r26, r10
    1888:	bb 09       	sbc	r27, r11
    188a:	8c 15       	cp	r24, r12
    188c:	9d 05       	cpc	r25, r13
    188e:	ae 05       	cpc	r26, r14
    1890:	bf 05       	cpc	r27, r15
    1892:	98 f3       	brcs	.-26     	; 0x187a <delay_mS+0x1e>
    1894:	ff 90       	pop	r15
    1896:	ef 90       	pop	r14
    1898:	df 90       	pop	r13
    189a:	cf 90       	pop	r12
    189c:	bf 90       	pop	r11
    189e:	af 90       	pop	r10
    18a0:	9f 90       	pop	r9
    18a2:	8f 90       	pop	r8
    18a4:	08 95       	ret

000018a6 <__vector_32>:
}

/*Returns the number of bytes waiting in the USART receive buffer*/
int usart_available(){
	return rxbp;
}
    18a6:	1f 92       	push	r1
    18a8:	0f 92       	push	r0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	0f 92       	push	r0
    18ae:	11 24       	eor	r1, r1
    18b0:	8f 93       	push	r24
    18b2:	ef 93       	push	r30
    18b4:	ff 93       	push	r31
    18b6:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <rxbp>
    18ba:	81 31       	cpi	r24, 0x11	; 17
    18bc:	20 f0       	brcs	.+8      	; 0x18c6 <__vector_32+0x20>
    18be:	80 e1       	ldi	r24, 0x10	; 16
    18c0:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <rxbp>
    18c4:	0c c0       	rjmp	.+24     	; 0x18de <__vector_32+0x38>
    18c6:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <rxbp>
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	8e 0f       	add	r24, r30
    18ce:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <rxbp>
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    18d8:	e0 5d       	subi	r30, 0xD0	; 208
    18da:	fd 4f       	sbci	r31, 0xFD	; 253
    18dc:	80 83       	st	Z, r24
    18de:	ff 91       	pop	r31
    18e0:	ef 91       	pop	r30
    18e2:	8f 91       	pop	r24
    18e4:	0f 90       	pop	r0
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	0f 90       	pop	r0
    18ea:	1f 90       	pop	r1
    18ec:	18 95       	reti

000018ee <__vector_33>:
    18ee:	1f 92       	push	r1
    18f0:	0f 92       	push	r0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	0f 92       	push	r0
    18f6:	11 24       	eor	r1, r1
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	ef 93       	push	r30
    18fe:	ff 93       	push	r31
    1900:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <txbp>
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	8e 0f       	add	r24, r30
    1908:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <txbp>
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	e2 5e       	subi	r30, 0xE2	; 226
    1910:	fd 4f       	sbci	r31, 0xFD	; 253
    1912:	80 81       	ld	r24, Z
    1914:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    1918:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <txbp>
    191c:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    1920:	98 17       	cp	r25, r24
    1922:	20 f4       	brcc	.+8      	; 0x192c <__vector_33+0x3e>
    1924:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <txbp>
    1928:	81 31       	cpi	r24, 0x11	; 17
    192a:	48 f0       	brcs	.+18     	; 0x193e <__vector_33+0x50>
    192c:	e9 ec       	ldi	r30, 0xC9	; 201
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	8f 7d       	andi	r24, 0xDF	; 223
    1934:	80 83       	st	Z, r24
    1936:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <txend>
    193a:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <txbp>
    193e:	ff 91       	pop	r31
    1940:	ef 91       	pop	r30
    1942:	9f 91       	pop	r25
    1944:	8f 91       	pop	r24
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	0f 90       	pop	r0
    194c:	1f 90       	pop	r1
    194e:	18 95       	reti

00001950 <usart_write>:
    1950:	af 92       	push	r10
    1952:	bf 92       	push	r11
    1954:	cf 92       	push	r12
    1956:	df 92       	push	r13
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	1f 92       	push	r1
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	5c 01       	movw	r10, r24
    196a:	16 2f       	mov	r17, r22
    196c:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    1970:	88 23       	and	r24, r24
    1972:	29 f0       	breq	.+10     	; 0x197e <usart_write+0x2e>
    1974:	e9 ec       	ldi	r30, 0xC9	; 201
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	80 62       	ori	r24, 0x20	; 32
    197c:	80 83       	st	Z, r24
    197e:	11 23       	and	r17, r17
    1980:	a9 f1       	breq	.+106    	; 0x19ec <usart_write+0x9c>
    1982:	68 94       	set
    1984:	cc 24       	eor	r12, r12
    1986:	c4 f8       	bld	r12, 4
    1988:	d1 2c       	mov	r13, r1
    198a:	0f 2e       	mov	r0, r31
    198c:	f9 ec       	ldi	r31, 0xC9	; 201
    198e:	ef 2e       	mov	r14, r31
    1990:	f1 2c       	mov	r15, r1
    1992:	f0 2d       	mov	r31, r0
    1994:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    1998:	8f 30       	cpi	r24, 0x0F	; 15
    199a:	e0 f7       	brcc	.-8      	; 0x1994 <usart_write+0x44>
    199c:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    19a0:	21 2f       	mov	r18, r17
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	b6 01       	movw	r22, r12
    19aa:	68 1b       	sub	r22, r24
    19ac:	71 09       	sbc	r23, r1
    19ae:	07 2e       	mov	r0, r23
    19b0:	00 0c       	add	r0, r0
    19b2:	88 0b       	sbc	r24, r24
    19b4:	99 0b       	sbc	r25, r25
    19b6:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <min>
    19ba:	69 83       	std	Y+1, r22	; 0x01
    19bc:	49 81       	ldd	r20, Y+1	; 0x01
    19be:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	b5 01       	movw	r22, r10
    19c8:	82 5e       	subi	r24, 0xE2	; 226
    19ca:	9d 4f       	sbci	r25, 0xFD	; 253
    19cc:	0e 94 57 0f 	call	0x1eae	; 0x1eae <memcpy>
    19d0:	99 81       	ldd	r25, Y+1	; 0x01
    19d2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <txend>
    19d6:	89 0f       	add	r24, r25
    19d8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <txend>
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	18 1b       	sub	r17, r24
    19e0:	f7 01       	movw	r30, r14
    19e2:	80 81       	ld	r24, Z
    19e4:	80 62       	ori	r24, 0x20	; 32
    19e6:	80 83       	st	Z, r24
    19e8:	11 11       	cpse	r17, r1
    19ea:	d4 cf       	rjmp	.-88     	; 0x1994 <usart_write+0x44>
    19ec:	0f 90       	pop	r0
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	1f 91       	pop	r17
    19f4:	ff 90       	pop	r15
    19f6:	ef 90       	pop	r14
    19f8:	df 90       	pop	r13
    19fa:	cf 90       	pop	r12
    19fc:	bf 90       	pop	r11
    19fe:	af 90       	pop	r10
    1a00:	08 95       	ret

00001a02 <usart_init>:
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <rxbp>
    1a0a:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <txend>
    1a0e:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <txbp>
    1a12:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
    1a16:	60 e4       	ldi	r22, 0x40	; 64
    1a18:	72 e4       	ldi	r23, 0x42	; 66
    1a1a:	8f e0       	ldi	r24, 0x0F	; 15
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__udivmodsi4>
    1a22:	21 50       	subi	r18, 0x01	; 1
    1a24:	31 09       	sbc	r19, r1
    1a26:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
    1a2a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
    1a2e:	86 e0       	ldi	r24, 0x06	; 6
    1a30:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
    1a34:	88 e9       	ldi	r24, 0x98	; 152
    1a36:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
    1a3a:	08 95       	ret

00001a3c <usart_write_char>:
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	1f 92       	push	r1
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	8a 30       	cpi	r24, 0x0A	; 10
    1a4a:	19 f4       	brne	.+6      	; 0x1a52 <usart_write_char+0x16>
    1a4c:	8d e0       	ldi	r24, 0x0D	; 13
    1a4e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <usart_write_char>
    1a52:	61 e0       	ldi	r22, 0x01	; 1
    1a54:	ce 01       	movw	r24, r28
    1a56:	01 96       	adiw	r24, 0x01	; 1
    1a58:	0e 94 a8 0c 	call	0x1950	; 0x1950 <usart_write>
    1a5c:	0f 90       	pop	r0
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <usart_write_string>:
    1a64:	fc 01       	movw	r30, r24
    1a66:	01 90       	ld	r0, Z+
    1a68:	00 20       	and	r0, r0
    1a6a:	e9 f7       	brne	.-6      	; 0x1a66 <usart_write_string+0x2>
    1a6c:	31 97       	sbiw	r30, 0x01	; 1
    1a6e:	bf 01       	movw	r22, r30
    1a70:	68 1b       	sub	r22, r24
    1a72:	79 0b       	sbc	r23, r25
    1a74:	0e 94 a8 0c 	call	0x1950	; 0x1950 <usart_write>
    1a78:	08 95       	ret

00001a7a <tprintf>:

/*Tiny implementation of prinf()*/
void tprintf(const char *fmt, ...){
    1a7a:	2f 92       	push	r2
    1a7c:	3f 92       	push	r3
    1a7e:	4f 92       	push	r4
    1a80:	5f 92       	push	r5
    1a82:	6f 92       	push	r6
    1a84:	7f 92       	push	r7
    1a86:	8f 92       	push	r8
    1a88:	9f 92       	push	r9
    1a8a:	af 92       	push	r10
    1a8c:	bf 92       	push	r11
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	2b 97       	sbiw	r28, 0x0b	; 11
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	fe 01       	movw	r30, r28
    1ab0:	b0 96       	adiw	r30, 0x20	; 32
    1ab2:	e1 90       	ld	r14, Z+
    1ab4:	f1 90       	ld	r15, Z+
	va_list va;
	va_start(va, fmt);
    1ab6:	6f 01       	movw	r12, r30
	int i = 0;
	int32_t l;
	char buf[9],c;
	for(i = 0;c=fmt[i];i++){
    1ab8:	f7 01       	movw	r30, r14
    1aba:	b0 80       	ld	r11, Z
    1abc:	bb 20       	and	r11, r11
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <tprintf+0x48>
    1ac0:	d2 c0       	rjmp	.+420    	; 0x1c66 <tprintf+0x1ec>
    1ac2:	00 e0       	ldi	r16, 0x00	; 0
    1ac4:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1ac6:	0f 2e       	mov	r0, r31
    1ac8:	f0 e1       	ldi	r31, 0x10	; 16
    1aca:	4f 2e       	mov	r4, r31
    1acc:	f7 e2       	ldi	r31, 0x27	; 39
    1ace:	5f 2e       	mov	r5, r31
    1ad0:	61 2c       	mov	r6, r1
    1ad2:	71 2c       	mov	r7, r1
    1ad4:	f0 2d       	mov	r31, r0
		if(c != '%'){
    1ad6:	f5 e2       	ldi	r31, 0x25	; 37
    1ad8:	bf 16       	cp	r11, r31
    1ada:	d1 f0       	breq	.+52     	; 0x1b10 <tprintf+0x96>
			usart_write_char(c);
    1adc:	8b 2d       	mov	r24, r11
    1ade:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <usart_write_char>
		}
	if(c == '\\'){
    1ae2:	2c e5       	ldi	r18, 0x5C	; 92
    1ae4:	b2 12       	cpse	r11, r18
    1ae6:	b7 c0       	rjmp	.+366    	; 0x1c56 <tprintf+0x1dc>
		c = fmt[++i];
    1ae8:	0f 5f       	subi	r16, 0xFF	; 255
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
    1aec:	f7 01       	movw	r30, r14
    1aee:	e0 0f       	add	r30, r16
    1af0:	f1 1f       	adc	r31, r17
    1af2:	80 81       	ld	r24, Z
		switch(c){
    1af4:	8a 30       	cpi	r24, 0x0A	; 10
    1af6:	29 f0       	breq	.+10     	; 0x1b02 <tprintf+0x88>
    1af8:	8c 35       	cpi	r24, 0x5C	; 92
    1afa:	39 f4       	brne	.+14     	; 0x1b0a <tprintf+0x90>
			case '\\':
				usart_write_char('\\');
    1afc:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <usart_write_char>
				break;
    1b00:	aa c0       	rjmp	.+340    	; 0x1c56 <tprintf+0x1dc>
			case '\n':
				usart_write_char('\n');
    1b02:	8a e0       	ldi	r24, 0x0A	; 10
    1b04:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <usart_write_char>
				break;
    1b08:	a6 c0       	rjmp	.+332    	; 0x1c56 <tprintf+0x1dc>
		}
	}
	if(c == '%'){
    1b0a:	85 32       	cpi	r24, 0x25	; 37
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <tprintf+0x96>
    1b0e:	a3 c0       	rjmp	.+326    	; 0x1c56 <tprintf+0x1dc>
		c=fmt[++i];
    1b10:	0f 5f       	subi	r16, 0xFF	; 255
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	f7 01       	movw	r30, r14
    1b16:	e0 0f       	add	r30, r16
    1b18:	f1 1f       	adc	r31, r17
		switch(c){
    1b1a:	80 81       	ld	r24, Z
    1b1c:	84 36       	cpi	r24, 0x64	; 100
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <tprintf+0xa8>
    1b20:	75 c0       	rjmp	.+234    	; 0x1c0c <tprintf+0x192>
    1b22:	38 f4       	brcc	.+14     	; 0x1b32 <tprintf+0xb8>
    1b24:	88 35       	cpi	r24, 0x58	; 88
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <tprintf+0xb0>
    1b28:	5e c0       	rjmp	.+188    	; 0x1be6 <tprintf+0x16c>
    1b2a:	83 36       	cpi	r24, 0x63	; 99
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <tprintf+0xb6>
    1b2e:	88 c0       	rjmp	.+272    	; 0x1c40 <tprintf+0x1c6>
    1b30:	8f c0       	rjmp	.+286    	; 0x1c50 <tprintf+0x1d6>
    1b32:	8c 36       	cpi	r24, 0x6C	; 108
    1b34:	21 f0       	breq	.+8      	; 0x1b3e <tprintf+0xc4>
    1b36:	83 37       	cpi	r24, 0x73	; 115
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <tprintf+0xc2>
    1b3a:	79 c0       	rjmp	.+242    	; 0x1c2e <tprintf+0x1b4>
    1b3c:	89 c0       	rjmp	.+274    	; 0x1c50 <tprintf+0x1d6>
			case 'l':
				l = va_arg(va, int32_t);
    1b3e:	c6 01       	movw	r24, r12
    1b40:	04 96       	adiw	r24, 0x04	; 4
    1b42:	9b 87       	std	Y+11, r25	; 0x0b
    1b44:	8a 87       	std	Y+10, r24	; 0x0a
    1b46:	f6 01       	movw	r30, r12
    1b48:	80 80       	ld	r8, Z
    1b4a:	91 80       	ldd	r9, Z+1	; 0x01
    1b4c:	a2 80       	ldd	r10, Z+2	; 0x02
    1b4e:	b3 80       	ldd	r11, Z+3	; 0x03
				if(l > 32767){
    1b50:	81 14       	cp	r8, r1
    1b52:	f0 e8       	ldi	r31, 0x80	; 128
    1b54:	9f 06       	cpc	r9, r31
    1b56:	a1 04       	cpc	r10, r1
    1b58:	b1 04       	cpc	r11, r1
    1b5a:	bc f1       	brlt	.+110    	; 0x1bca <tprintf+0x150>
    1b5c:	c5 01       	movw	r24, r10
    1b5e:	b4 01       	movw	r22, r8
    1b60:	a3 01       	movw	r20, r6
    1b62:	92 01       	movw	r18, r4
    1b64:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__divmodsi4>
    1b68:	49 01       	movw	r8, r18
    1b6a:	5a 01       	movw	r10, r20
    1b6c:	c6 2e       	mov	r12, r22
    1b6e:	d7 2e       	mov	r13, r23
    1b70:	28 2e       	mov	r2, r24
    1b72:	39 2e       	mov	r3, r25
    1b74:	4a e0       	ldi	r20, 0x0A	; 10
    1b76:	be 01       	movw	r22, r28
    1b78:	6f 5f       	subi	r22, 0xFF	; 255
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7c:	c4 01       	movw	r24, r8
    1b7e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__itoa_ncheck>
					itoa(l/10000, buf, 10);
					usart_write_string(buf);
    1b82:	ce 01       	movw	r24, r28
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <usart_write_string>
					l %= 10000;
    1b8a:	8c 2c       	mov	r8, r12
    1b8c:	9d 2c       	mov	r9, r13
    1b8e:	a2 2c       	mov	r10, r2
    1b90:	b3 2c       	mov	r11, r3
					if(l < 1000){
    1b92:	28 ee       	ldi	r18, 0xE8	; 232
    1b94:	82 16       	cp	r8, r18
    1b96:	23 e0       	ldi	r18, 0x03	; 3
    1b98:	92 06       	cpc	r9, r18
    1b9a:	a1 04       	cpc	r10, r1
    1b9c:	b1 04       	cpc	r11, r1
    1b9e:	1c f4       	brge	.+6      	; 0x1ba6 <tprintf+0x12c>
						usart_write_char('0');
    1ba0:	80 e3       	ldi	r24, 0x30	; 48
    1ba2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <usart_write_char>
					}
					if(l < 100){
    1ba6:	84 e6       	ldi	r24, 0x64	; 100
    1ba8:	88 16       	cp	r8, r24
    1baa:	91 04       	cpc	r9, r1
    1bac:	a1 04       	cpc	r10, r1
    1bae:	b1 04       	cpc	r11, r1
    1bb0:	1c f4       	brge	.+6      	; 0x1bb8 <tprintf+0x13e>
						usart_write_char('0');
    1bb2:	80 e3       	ldi	r24, 0x30	; 48
    1bb4:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <usart_write_char>
					}
					if(l < 10){
    1bb8:	9a e0       	ldi	r25, 0x0A	; 10
    1bba:	89 16       	cp	r8, r25
    1bbc:	91 04       	cpc	r9, r1
    1bbe:	a1 04       	cpc	r10, r1
    1bc0:	b1 04       	cpc	r11, r1
    1bc2:	1c f4       	brge	.+6      	; 0x1bca <tprintf+0x150>
						usart_write_char('0');
    1bc4:	80 e3       	ldi	r24, 0x30	; 48
    1bc6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <usart_write_char>
    1bca:	4a e0       	ldi	r20, 0x0A	; 10
    1bcc:	be 01       	movw	r22, r28
    1bce:	6f 5f       	subi	r22, 0xFF	; 255
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	c4 01       	movw	r24, r8
    1bd4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__itoa_ncheck>
					}
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
    1bd8:	ce 01       	movw	r24, r28
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <usart_write_string>
	}
	if(c == '%'){
		c=fmt[++i];
		switch(c){
			case 'l':
				l = va_arg(va, int32_t);
    1be0:	ca 84       	ldd	r12, Y+10	; 0x0a
    1be2:	db 84       	ldd	r13, Y+11	; 0x0b
						usart_write_char('0');
					}
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
				break;
    1be4:	38 c0       	rjmp	.+112    	; 0x1c56 <tprintf+0x1dc>
			case 'X':
				itoa(va_arg(va, int32_t), buf, 16);
    1be6:	56 01       	movw	r10, r12
    1be8:	e4 e0       	ldi	r30, 0x04	; 4
    1bea:	ae 0e       	add	r10, r30
    1bec:	b1 1c       	adc	r11, r1
    1bee:	40 e1       	ldi	r20, 0x10	; 16
    1bf0:	be 01       	movw	r22, r28
    1bf2:	6f 5f       	subi	r22, 0xFF	; 255
    1bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf6:	f6 01       	movw	r30, r12
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__itoa_ncheck>
				usart_write_string(buf);
    1c00:	ce 01       	movw	r24, r28
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <usart_write_string>
				}
				itoa(l, buf, 10);
				usart_write_string(buf);
				break;
			case 'X':
				itoa(va_arg(va, int32_t), buf, 16);
    1c08:	65 01       	movw	r12, r10
				usart_write_string(buf);
				break;
    1c0a:	25 c0       	rjmp	.+74     	; 0x1c56 <tprintf+0x1dc>
			case 'd':
				itoa(va_arg(va, int), buf, 10);
    1c0c:	f6 01       	movw	r30, r12
    1c0e:	4a e0       	ldi	r20, 0x0A	; 10
    1c10:	be 01       	movw	r22, r28
    1c12:	6f 5f       	subi	r22, 0xFF	; 255
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	f2 e0       	ldi	r31, 0x02	; 2
    1c1c:	cf 0e       	add	r12, r31
    1c1e:	d1 1c       	adc	r13, r1
    1c20:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__itoa_ncheck>
				usart_write_string(buf);
    1c24:	ce 01       	movw	r24, r28
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <usart_write_string>
				break;
    1c2c:	14 c0       	rjmp	.+40     	; 0x1c56 <tprintf+0x1dc>
			case 's':
				usart_write_string(va_arg(va, char*));
    1c2e:	f6 01       	movw	r30, r12
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	22 e0       	ldi	r18, 0x02	; 2
    1c36:	c2 0e       	add	r12, r18
    1c38:	d1 1c       	adc	r13, r1
    1c3a:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <usart_write_string>
				break;
    1c3e:	0b c0       	rjmp	.+22     	; 0x1c56 <tprintf+0x1dc>
			case 'c':
				usart_write_char(va_arg(va, int));
    1c40:	f6 01       	movw	r30, r12
    1c42:	80 81       	ld	r24, Z
    1c44:	92 e0       	ldi	r25, 0x02	; 2
    1c46:	c9 0e       	add	r12, r25
    1c48:	d1 1c       	adc	r13, r1
    1c4a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <usart_write_char>
				break;
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <tprintf+0x1dc>
			default:
				usart_write_char('?');
    1c50:	8f e3       	ldi	r24, 0x3F	; 63
    1c52:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <usart_write_char>
	va_list va;
	va_start(va, fmt);
	int i = 0;
	int32_t l;
	char buf[9],c;
	for(i = 0;c=fmt[i];i++){
    1c56:	0f 5f       	subi	r16, 0xFF	; 255
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	f7 01       	movw	r30, r14
    1c5c:	e0 0f       	add	r30, r16
    1c5e:	f1 1f       	adc	r31, r17
    1c60:	b0 80       	ld	r11, Z
    1c62:	b1 10       	cpse	r11, r1
    1c64:	38 cf       	rjmp	.-400    	; 0x1ad6 <tprintf+0x5c>
				usart_write_char('?');
				break;
			}
		}
	}
    1c66:	2b 96       	adiw	r28, 0x0b	; 11
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	ff 90       	pop	r15
    1c7c:	ef 90       	pop	r14
    1c7e:	df 90       	pop	r13
    1c80:	cf 90       	pop	r12
    1c82:	bf 90       	pop	r11
    1c84:	af 90       	pop	r10
    1c86:	9f 90       	pop	r9
    1c88:	8f 90       	pop	r8
    1c8a:	7f 90       	pop	r7
    1c8c:	6f 90       	pop	r6
    1c8e:	5f 90       	pop	r5
    1c90:	4f 90       	pop	r4
    1c92:	3f 90       	pop	r3
    1c94:	2f 90       	pop	r2
    1c96:	08 95       	ret

00001c98 <min>:
Returns:
the number of encoder ticks
*/
int16_t deg_to_ticks(int16_t d){
	return ((int32_t)d * (int32_t)ticks_per_degree_x10) / 10L;
}
    1c98:	62 17       	cp	r22, r18
    1c9a:	73 07       	cpc	r23, r19
    1c9c:	84 07       	cpc	r24, r20
    1c9e:	95 07       	cpc	r25, r21
    1ca0:	14 f4       	brge	.+4      	; 0x1ca6 <min+0xe>
    1ca2:	9b 01       	movw	r18, r22
    1ca4:	ac 01       	movw	r20, r24
    1ca6:	ca 01       	movw	r24, r20
    1ca8:	b9 01       	movw	r22, r18
    1caa:	08 95       	ret

00001cac <set_LED>:
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	f8 f4       	brcc	.+62     	; 0x1cee <set_LED+0x42>
    1cb0:	64 30       	cpi	r22, 0x04	; 4
    1cb2:	e8 f4       	brcc	.+58     	; 0x1cee <set_LED+0x42>
    1cb4:	9f ef       	ldi	r25, 0xFF	; 255
    1cb6:	96 0f       	add	r25, r22
    1cb8:	92 30       	cpi	r25, 0x02	; 2
    1cba:	18 f4       	brcc	.+6      	; 0x1cc2 <set_LED+0x16>
    1cbc:	93 e0       	ldi	r25, 0x03	; 3
    1cbe:	96 1b       	sub	r25, r22
    1cc0:	69 2f       	mov	r22, r25
    1cc2:	88 0f       	add	r24, r24
    1cc4:	23 e0       	ldi	r18, 0x03	; 3
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	08 2e       	mov	r0, r24
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <set_LED+0x24>
    1ccc:	22 0f       	add	r18, r18
    1cce:	33 1f       	adc	r19, r19
    1cd0:	0a 94       	dec	r0
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <set_LED+0x20>
    1cd4:	20 95       	com	r18
    1cd6:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <LED_states>
    1cda:	29 23       	and	r18, r25
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <set_LED+0x38>
    1ce0:	66 0f       	add	r22, r22
    1ce2:	77 1f       	adc	r23, r23
    1ce4:	8a 95       	dec	r24
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <set_LED+0x34>
    1ce8:	62 2b       	or	r22, r18
    1cea:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <LED_states>
    1cee:	08 95       	ret

00001cf0 <int_abs>:
    1cf0:	99 23       	and	r25, r25
    1cf2:	1c f4       	brge	.+6      	; 0x1cfa <int_abs+0xa>
    1cf4:	91 95       	neg	r25
    1cf6:	81 95       	neg	r24
    1cf8:	91 09       	sbc	r25, r1
    1cfa:	08 95       	ret

00001cfc <update_LEDS>:
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	8c 01       	movw	r16, r24
    1d0a:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <LED_states>
    1d0e:	91 11       	cpse	r25, r1
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <update_LEDS+0x1a>
    1d12:	12 b8       	out	0x02, r1	; 2
    1d14:	3d c0       	rjmp	.+122    	; 0x1d90 <update_LEDS+0x94>
    1d16:	16 95       	lsr	r17
    1d18:	07 95       	ror	r16
    1d1a:	e4 e0       	ldi	r30, 0x04	; 4
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	c0 e0       	ldi	r28, 0x00	; 0
    1d20:	d0 e0       	ldi	r29, 0x00	; 0
    1d22:	ee 24       	eor	r14, r14
    1d24:	e3 94       	inc	r14
    1d26:	f1 2c       	mov	r15, r1
    1d28:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <LED_states>
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	0c 2e       	mov	r0, r28
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <update_LEDS+0x3a>
    1d32:	35 95       	asr	r19
    1d34:	27 95       	ror	r18
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <update_LEDS+0x36>
    1d3a:	23 70       	andi	r18, 0x03	; 3
    1d3c:	69 f0       	breq	.+26     	; 0x1d58 <update_LEDS+0x5c>
    1d3e:	62 2f       	mov	r22, r18
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	66 0f       	add	r22, r22
    1d44:	77 1f       	adc	r23, r23
    1d46:	6f 5f       	subi	r22, 0xFF	; 255
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__udivmodhi4>
    1d50:	89 2b       	or	r24, r25
    1d52:	79 f0       	breq	.+30     	; 0x1d72 <update_LEDS+0x76>
    1d54:	23 30       	cpi	r18, 0x03	; 3
    1d56:	69 f0       	breq	.+26     	; 0x1d72 <update_LEDS+0x76>
    1d58:	92 b1       	in	r25, 0x02	; 2
    1d5a:	97 01       	movw	r18, r14
    1d5c:	0e 2e       	mov	r0, r30
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <update_LEDS+0x68>
    1d60:	22 0f       	add	r18, r18
    1d62:	33 1f       	adc	r19, r19
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <update_LEDS+0x64>
    1d68:	82 2f       	mov	r24, r18
    1d6a:	80 95       	com	r24
    1d6c:	89 23       	and	r24, r25
    1d6e:	82 b9       	out	0x02, r24	; 2
    1d70:	0a c0       	rjmp	.+20     	; 0x1d86 <update_LEDS+0x8a>
    1d72:	22 b1       	in	r18, 0x02	; 2
    1d74:	c7 01       	movw	r24, r14
    1d76:	0e 2e       	mov	r0, r30
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <update_LEDS+0x82>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	0a 94       	dec	r0
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <update_LEDS+0x7e>
    1d82:	82 2b       	or	r24, r18
    1d84:	82 b9       	out	0x02, r24	; 2
    1d86:	22 96       	adiw	r28, 0x02	; 2
    1d88:	31 96       	adiw	r30, 0x01	; 1
    1d8a:	e8 30       	cpi	r30, 0x08	; 8
    1d8c:	f1 05       	cpc	r31, r1
    1d8e:	61 f6       	brne	.-104    	; 0x1d28 <update_LEDS+0x2c>
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	08 95       	ret

00001d9e <set_ticks_per_10degrees>:
/*Sets a new ratio of ticks to degrees.
Parameters:
uint16_t tpd: the number of encoder ticks in 10 degrees of rotation
*/
void set_ticks_per_10degrees(uint16_t tpd){
	ticks_per_degree_x10 = tpd;
    1d9e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ticks_per_degree_x10+0x1>
    1da2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ticks_per_degree_x10>
    1da6:	08 95       	ret

00001da8 <__udivmodhi4>:
    1da8:	aa 1b       	sub	r26, r26
    1daa:	bb 1b       	sub	r27, r27
    1dac:	51 e1       	ldi	r21, 0x11	; 17
    1dae:	07 c0       	rjmp	.+14     	; 0x1dbe <__udivmodhi4_ep>

00001db0 <__udivmodhi4_loop>:
    1db0:	aa 1f       	adc	r26, r26
    1db2:	bb 1f       	adc	r27, r27
    1db4:	a6 17       	cp	r26, r22
    1db6:	b7 07       	cpc	r27, r23
    1db8:	10 f0       	brcs	.+4      	; 0x1dbe <__udivmodhi4_ep>
    1dba:	a6 1b       	sub	r26, r22
    1dbc:	b7 0b       	sbc	r27, r23

00001dbe <__udivmodhi4_ep>:
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	5a 95       	dec	r21
    1dc4:	a9 f7       	brne	.-22     	; 0x1db0 <__udivmodhi4_loop>
    1dc6:	80 95       	com	r24
    1dc8:	90 95       	com	r25
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	08 95       	ret

00001dd0 <__divmodhi4>:
    1dd0:	97 fb       	bst	r25, 7
    1dd2:	07 2e       	mov	r0, r23
    1dd4:	16 f4       	brtc	.+4      	; 0x1dda <__divmodhi4+0xa>
    1dd6:	00 94       	com	r0
    1dd8:	07 d0       	rcall	.+14     	; 0x1de8 <__divmodhi4_neg1>
    1dda:	77 fd       	sbrc	r23, 7
    1ddc:	09 d0       	rcall	.+18     	; 0x1df0 <__divmodhi4_neg2>
    1dde:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__udivmodhi4>
    1de2:	07 fc       	sbrc	r0, 7
    1de4:	05 d0       	rcall	.+10     	; 0x1df0 <__divmodhi4_neg2>
    1de6:	3e f4       	brtc	.+14     	; 0x1df6 <__divmodhi4_exit>

00001de8 <__divmodhi4_neg1>:
    1de8:	90 95       	com	r25
    1dea:	81 95       	neg	r24
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	08 95       	ret

00001df0 <__divmodhi4_neg2>:
    1df0:	70 95       	com	r23
    1df2:	61 95       	neg	r22
    1df4:	7f 4f       	sbci	r23, 0xFF	; 255

00001df6 <__divmodhi4_exit>:
    1df6:	08 95       	ret

00001df8 <__udivmodsi4>:
    1df8:	a1 e2       	ldi	r26, 0x21	; 33
    1dfa:	1a 2e       	mov	r1, r26
    1dfc:	aa 1b       	sub	r26, r26
    1dfe:	bb 1b       	sub	r27, r27
    1e00:	fd 01       	movw	r30, r26
    1e02:	0d c0       	rjmp	.+26     	; 0x1e1e <__udivmodsi4_ep>

00001e04 <__udivmodsi4_loop>:
    1e04:	aa 1f       	adc	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	ee 1f       	adc	r30, r30
    1e0a:	ff 1f       	adc	r31, r31
    1e0c:	a2 17       	cp	r26, r18
    1e0e:	b3 07       	cpc	r27, r19
    1e10:	e4 07       	cpc	r30, r20
    1e12:	f5 07       	cpc	r31, r21
    1e14:	20 f0       	brcs	.+8      	; 0x1e1e <__udivmodsi4_ep>
    1e16:	a2 1b       	sub	r26, r18
    1e18:	b3 0b       	sbc	r27, r19
    1e1a:	e4 0b       	sbc	r30, r20
    1e1c:	f5 0b       	sbc	r31, r21

00001e1e <__udivmodsi4_ep>:
    1e1e:	66 1f       	adc	r22, r22
    1e20:	77 1f       	adc	r23, r23
    1e22:	88 1f       	adc	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	1a 94       	dec	r1
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <__udivmodsi4_loop>
    1e2a:	60 95       	com	r22
    1e2c:	70 95       	com	r23
    1e2e:	80 95       	com	r24
    1e30:	90 95       	com	r25
    1e32:	9b 01       	movw	r18, r22
    1e34:	ac 01       	movw	r20, r24
    1e36:	bd 01       	movw	r22, r26
    1e38:	cf 01       	movw	r24, r30
    1e3a:	08 95       	ret

00001e3c <__divmodsi4>:
    1e3c:	05 2e       	mov	r0, r21
    1e3e:	97 fb       	bst	r25, 7
    1e40:	1e f4       	brtc	.+6      	; 0x1e48 <__divmodsi4+0xc>
    1e42:	00 94       	com	r0
    1e44:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__negsi2>
    1e48:	57 fd       	sbrc	r21, 7
    1e4a:	07 d0       	rcall	.+14     	; 0x1e5a <__divmodsi4_neg2>
    1e4c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__udivmodsi4>
    1e50:	07 fc       	sbrc	r0, 7
    1e52:	03 d0       	rcall	.+6      	; 0x1e5a <__divmodsi4_neg2>
    1e54:	4e f4       	brtc	.+18     	; 0x1e68 <__divmodsi4_exit>
    1e56:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__negsi2>

00001e5a <__divmodsi4_neg2>:
    1e5a:	50 95       	com	r21
    1e5c:	40 95       	com	r20
    1e5e:	30 95       	com	r19
    1e60:	21 95       	neg	r18
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	4f 4f       	sbci	r20, 0xFF	; 255
    1e66:	5f 4f       	sbci	r21, 0xFF	; 255

00001e68 <__divmodsi4_exit>:
    1e68:	08 95       	ret

00001e6a <__negsi2>:
    1e6a:	90 95       	com	r25
    1e6c:	80 95       	com	r24
    1e6e:	70 95       	com	r23
    1e70:	61 95       	neg	r22
    1e72:	7f 4f       	sbci	r23, 0xFF	; 255
    1e74:	8f 4f       	sbci	r24, 0xFF	; 255
    1e76:	9f 4f       	sbci	r25, 0xFF	; 255
    1e78:	08 95       	ret

00001e7a <__umulhisi3>:
    1e7a:	a2 9f       	mul	r26, r18
    1e7c:	b0 01       	movw	r22, r0
    1e7e:	b3 9f       	mul	r27, r19
    1e80:	c0 01       	movw	r24, r0
    1e82:	a3 9f       	mul	r26, r19
    1e84:	70 0d       	add	r23, r0
    1e86:	81 1d       	adc	r24, r1
    1e88:	11 24       	eor	r1, r1
    1e8a:	91 1d       	adc	r25, r1
    1e8c:	b2 9f       	mul	r27, r18
    1e8e:	70 0d       	add	r23, r0
    1e90:	81 1d       	adc	r24, r1
    1e92:	11 24       	eor	r1, r1
    1e94:	91 1d       	adc	r25, r1
    1e96:	08 95       	ret

00001e98 <__muluhisi3>:
    1e98:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <__umulhisi3>
    1e9c:	a5 9f       	mul	r26, r21
    1e9e:	90 0d       	add	r25, r0
    1ea0:	b4 9f       	mul	r27, r20
    1ea2:	90 0d       	add	r25, r0
    1ea4:	a4 9f       	mul	r26, r20
    1ea6:	80 0d       	add	r24, r0
    1ea8:	91 1d       	adc	r25, r1
    1eaa:	11 24       	eor	r1, r1
    1eac:	08 95       	ret

00001eae <memcpy>:
    1eae:	fb 01       	movw	r30, r22
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <memcpy+0xa>
    1eb4:	01 90       	ld	r0, Z+
    1eb6:	0d 92       	st	X+, r0
    1eb8:	41 50       	subi	r20, 0x01	; 1
    1eba:	50 40       	sbci	r21, 0x00	; 0
    1ebc:	d8 f7       	brcc	.-10     	; 0x1eb4 <memcpy+0x6>
    1ebe:	08 95       	ret

00001ec0 <__itoa_ncheck>:
    1ec0:	bb 27       	eor	r27, r27
    1ec2:	4a 30       	cpi	r20, 0x0A	; 10
    1ec4:	31 f4       	brne	.+12     	; 0x1ed2 <__itoa_ncheck+0x12>
    1ec6:	99 23       	and	r25, r25
    1ec8:	22 f4       	brpl	.+8      	; 0x1ed2 <__itoa_ncheck+0x12>
    1eca:	bd e2       	ldi	r27, 0x2D	; 45
    1ecc:	90 95       	com	r25
    1ece:	81 95       	neg	r24
    1ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed2:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__utoa_common>

00001ed6 <__utoa_ncheck>:
    1ed6:	bb 27       	eor	r27, r27

00001ed8 <__utoa_common>:
    1ed8:	fb 01       	movw	r30, r22
    1eda:	55 27       	eor	r21, r21
    1edc:	aa 27       	eor	r26, r26
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	a4 17       	cp	r26, r20
    1ee6:	10 f0       	brcs	.+4      	; 0x1eec <__utoa_common+0x14>
    1ee8:	a4 1b       	sub	r26, r20
    1eea:	83 95       	inc	r24
    1eec:	50 51       	subi	r21, 0x10	; 16
    1eee:	b9 f7       	brne	.-18     	; 0x1ede <__utoa_common+0x6>
    1ef0:	a0 5d       	subi	r26, 0xD0	; 208
    1ef2:	aa 33       	cpi	r26, 0x3A	; 58
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <__utoa_common+0x20>
    1ef6:	a9 5d       	subi	r26, 0xD9	; 217
    1ef8:	a1 93       	st	Z+, r26
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	79 f7       	brne	.-34     	; 0x1edc <__utoa_common+0x4>
    1efe:	b1 11       	cpse	r27, r1
    1f00:	b1 93       	st	Z+, r27
    1f02:	11 92       	st	Z+, r1
    1f04:	cb 01       	movw	r24, r22
    1f06:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <strrev>

00001f0a <strrev>:
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	67 2f       	mov	r22, r23
    1f10:	71 91       	ld	r23, Z+
    1f12:	77 23       	and	r23, r23
    1f14:	e1 f7       	brne	.-8      	; 0x1f0e <strrev+0x4>
    1f16:	32 97       	sbiw	r30, 0x02	; 2
    1f18:	04 c0       	rjmp	.+8      	; 0x1f22 <strrev+0x18>
    1f1a:	7c 91       	ld	r23, X
    1f1c:	6d 93       	st	X+, r22
    1f1e:	70 83       	st	Z, r23
    1f20:	62 91       	ld	r22, -Z
    1f22:	ae 17       	cp	r26, r30
    1f24:	bf 07       	cpc	r27, r31
    1f26:	c8 f3       	brcs	.-14     	; 0x1f1a <strrev+0x10>
    1f28:	08 95       	ret

00001f2a <_exit>:
    1f2a:	f8 94       	cli

00001f2c <__stop_program>:
    1f2c:	ff cf       	rjmp	.-2      	; 0x1f2c <__stop_program>
